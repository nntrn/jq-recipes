{"items":[{"tags":["json","bash","parsing","jq"],"answers":[{"owner":{"reputation":321577,"accept_rate":92,"display_name":"Brian Campbell","link":"https://stackoverflow.com/users/69755/brian-campbell"},"is_accepted":true,"score":1673,"creation_date":1261605570,"answer_id":1955555,"question_id":1955505,"share_link":"https://stackoverflow.com/a/1955555","body_markdown":"There are a number of tools specifically designed for the purpose of manipulating JSON from the command line, and will be a lot easier and more reliable than doing it with Awk, such as [`jq`][1]:\r\n\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | jq -r &#39;.name&#39;\r\n\r\nYou can also do this with tools that are likely already installed on your system, like Python using the [`json` module][3], and so avoid any extra dependencies, while still having the benefit of a proper JSON parser. The following assume you want to use UTF-8, which the original JSON should be encoded in and is what most modern terminals use as well:\r\n\r\nPython 3:\r\n\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | \\\r\n        python3 -c &quot;import sys, json; print(json.load(sys.stdin)[&#39;name&#39;])&quot;\r\n\r\nPython 2:\r\n\r\n    export PYTHONIOENCODING=utf8\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | \\\r\n        python2 -c &quot;import sys, json; print json.load(sys.stdin)[&#39;name&#39;]&quot;\r\n\r\n## Frequently Asked Questions\r\n\r\n### Why not a pure shell solution?\r\n\r\nThe standard [POSIX/Single Unix Specification shell](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html) is a very limited language which doesn&#39;t contain facilities for representing sequences (list or arrays) or associative arrays (also known as hash tables, maps, dicts, or objects in some other languages). This makes representing the result of parsing JSON somewhat tricky in portable shell scripts. There are [somewhat hacky ways to do it](https://stackoverflow.com/questions/688849/associative-arrays-in-shell-scripts), but many of them can break if keys or values contain certain special characters.\r\n\r\nBash 4 and later, zsh, and ksh have support for arrays and associative arrays, but these shells are not universally available (macOS stopped updating Bash at Bash 3, due to a change from GPLv2 to GPLv3, while many Linux systems don&#39;t have zsh installed out of the box). It&#39;s possible that you could write a script that would work in either Bash 4 or zsh, one of which is available on most macOS, Linux, and BSD systems these days, but it would be tough to write a shebang line that worked for such a polyglot script.\r\n\r\nFinally, writing a full fledged JSON parser in shell would be a significant enough dependency that you might as well just use an existing dependency like jq or Python instead. It&#39;s not going to be a one-liner, or even small five-line snippet, to do a good implementation.\r\n\r\n### Why not use awk, sed, or grep?\r\n\r\nIt is possible to use these tools to do some quick extraction from JSON with a known shape and formatted in a known way, such as one key per line. There are several examples of suggestions for this in other answers.\r\n\r\nHowever, these tools are designed for line based or record based formats; they are not designed for recursive parsing of matched delimiters with possible escape characters.\r\n\r\nSo these quick and dirty solutions using awk/sed/grep are likely to be fragile, and break if some aspect of the input format changes, such as collapsing whitespace, or adding additional levels of nesting to the JSON objects, or an escaped quote within a string. A solution that is robust enough to handle all JSON input without breaking will also be fairly large and complex, and so not too much different than adding another dependency on `jq` or Python.\r\n\r\nI have had to deal with large amounts of customer data being deleted due to poor input parsing in a shell script before, so I never recommend quick and dirty methods that may be fragile in this way. If you&#39;re doing some one-off processing, see the other answers for suggestions, but I still highly recommend just using an existing tested JSON parser.\r\n\r\n## Historical notes\r\n\r\nThis answer originally recommended [jsawk][2], which should still work, but is a little more cumbersome to use than `jq`, and depends on a standalone JavaScript interpreter being installed which is less common than a Python interpreter, so the above answers are probably preferable:\r\n\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | jsawk -a &#39;return this.name&#39;\r\n\r\nThis answer also originally used the Twitter API from the question, but that API no longer works, making it hard to copy the examples to test out, and the new Twitter API requires API keys, so I&#39;ve switched to using the GitHub API which can be used easily without API keys.  The first answer for the original question would be:\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; | jq -r &#39;.text&#39;\r\n\r\n  [1]: https://stedolan.github.io/jq/\r\n  [2]: http://github.com/micha/jsawk\r\n  [3]: https://docs.python.org/2/library/json.html","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1955555#1955555","title":"Parsing JSON with Unix tools","body":"<p>There are a number of tools specifically designed for the purpose of manipulating JSON from the command line, and will be a lot easier and more reliable than doing it with Awk, such as <a href=\"https://stedolan.github.io/jq/\" rel=\"noreferrer\"><code>jq</code></a>:</p>\n<pre><code>curl -s 'https://api.github.com/users/lambda' | jq -r '.name'\n</code></pre>\n<p>You can also do this with tools that are likely already installed on your system, like Python using the <a href=\"https://docs.python.org/2/library/json.html\" rel=\"noreferrer\"><code>json</code> module</a>, and so avoid any extra dependencies, while still having the benefit of a proper JSON parser. The following assume you want to use UTF-8, which the original JSON should be encoded in and is what most modern terminals use as well:</p>\n<p>Python 3:</p>\n<pre><code>curl -s 'https://api.github.com/users/lambda' | \\\n    python3 -c &quot;import sys, json; print(json.load(sys.stdin)['name'])&quot;\n</code></pre>\n<p>Python 2:</p>\n<pre><code>export PYTHONIOENCODING=utf8\ncurl -s 'https://api.github.com/users/lambda' | \\\n    python2 -c &quot;import sys, json; print json.load(sys.stdin)['name']&quot;\n</code></pre>\n<h2>Frequently Asked Questions</h2>\n<h3>Why not a pure shell solution?</h3>\n<p>The standard <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html\" rel=\"noreferrer\">POSIX/Single Unix Specification shell</a> is a very limited language which doesn't contain facilities for representing sequences (list or arrays) or associative arrays (also known as hash tables, maps, dicts, or objects in some other languages). This makes representing the result of parsing JSON somewhat tricky in portable shell scripts. There are <a href=\"https://stackoverflow.com/questions/688849/associative-arrays-in-shell-scripts\">somewhat hacky ways to do it</a>, but many of them can break if keys or values contain certain special characters.</p>\n<p>Bash 4 and later, zsh, and ksh have support for arrays and associative arrays, but these shells are not universally available (macOS stopped updating Bash at Bash 3, due to a change from GPLv2 to GPLv3, while many Linux systems don't have zsh installed out of the box). It's possible that you could write a script that would work in either Bash 4 or zsh, one of which is available on most macOS, Linux, and BSD systems these days, but it would be tough to write a shebang line that worked for such a polyglot script.</p>\n<p>Finally, writing a full fledged JSON parser in shell would be a significant enough dependency that you might as well just use an existing dependency like jq or Python instead. It's not going to be a one-liner, or even small five-line snippet, to do a good implementation.</p>\n<h3>Why not use awk, sed, or grep?</h3>\n<p>It is possible to use these tools to do some quick extraction from JSON with a known shape and formatted in a known way, such as one key per line. There are several examples of suggestions for this in other answers.</p>\n<p>However, these tools are designed for line based or record based formats; they are not designed for recursive parsing of matched delimiters with possible escape characters.</p>\n<p>So these quick and dirty solutions using awk/sed/grep are likely to be fragile, and break if some aspect of the input format changes, such as collapsing whitespace, or adding additional levels of nesting to the JSON objects, or an escaped quote within a string. A solution that is robust enough to handle all JSON input without breaking will also be fairly large and complex, and so not too much different than adding another dependency on <code>jq</code> or Python.</p>\n<p>I have had to deal with large amounts of customer data being deleted due to poor input parsing in a shell script before, so I never recommend quick and dirty methods that may be fragile in this way. If you're doing some one-off processing, see the other answers for suggestions, but I still highly recommend just using an existing tested JSON parser.</p>\n<h2>Historical notes</h2>\n<p>This answer originally recommended <a href=\"http://github.com/micha/jsawk\" rel=\"noreferrer\">jsawk</a>, which should still work, but is a little more cumbersome to use than <code>jq</code>, and depends on a standalone JavaScript interpreter being installed which is less common than a Python interpreter, so the above answers are probably preferable:</p>\n<pre><code>curl -s 'https://api.github.com/users/lambda' | jsawk -a 'return this.name'\n</code></pre>\n<p>This answer also originally used the Twitter API from the question, but that API no longer works, making it hard to copy the examples to test out, and the new Twitter API requires API keys, so I've switched to using the GitHub API which can be used easily without API keys.  The first answer for the original question would be:</p>\n<pre><code>curl 'http://twitter.com/users/username.json' | jq -r '.text'\n</code></pre>\n"},{"owner":{"reputation":3774,"accept_rate":88,"display_name":"martinr","link":"https://stackoverflow.com/users/231415/martinr"},"is_accepted":false,"score":120,"creation_date":1261607325,"answer_id":1955668,"question_id":1955505,"share_link":"https://stackoverflow.com/a/1955668","body_markdown":"Use [Python&#39;s JSON support][1] instead of using AWK!\r\n\r\nSomething like this:\r\n\r\n&lt;!-- language: lang-sh --&gt;\r\n\r\n    curl -s http://twitter.com/users/username.json | \\\r\n        python -c &quot;import json,sys;obj=json.load(sys.stdin);print(obj[&#39;name&#39;]);&quot;\r\n\r\n[macOS v12.3 (Monterey) removed `/usr/bin/python`][2], so we must use `/usr/bin/python3` for macOS v12.3 and later.\r\n\r\n    curl -s http://twitter.com/users/username.json | \\\r\n        python3 -c &quot;import json,sys;obj=json.load(sys.stdin);print(obj[&#39;name&#39;]);&quot;\r\n\r\n  [1]: http://docs.python.org/library/json.html\r\n  [2]: https://developer.apple.com/documentation/macos-release-notes/macos-12_3-release-notes#Python\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1955668#1955668","title":"Parsing JSON with Unix tools","body":"<p>Use <a href=\"http://docs.python.org/library/json.html\" rel=\"noreferrer\">Python's JSON support</a> instead of using AWK!</p>\n<p>Something like this:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>curl -s http://twitter.com/users/username.json | \\\n    python -c &quot;import json,sys;obj=json.load(sys.stdin);print(obj['name']);&quot;\n</code></pre>\n<p><a href=\"https://developer.apple.com/documentation/macos-release-notes/macos-12_3-release-notes#Python\" rel=\"noreferrer\">macOS v12.3 (Monterey) removed <code>/usr/bin/python</code></a>, so we must use <code>/usr/bin/python3</code> for macOS v12.3 and later.</p>\n<pre><code>curl -s http://twitter.com/users/username.json | \\\n    python3 -c &quot;import json,sys;obj=json.load(sys.stdin);print(obj['name']);&quot;\n</code></pre>\n"},{"owner":{"reputation":344687,"accept_rate":79,"display_name":"Dennis Williamson","link":"https://stackoverflow.com/users/26428/dennis-williamson"},"is_accepted":false,"score":79,"creation_date":1261613281,"answer_id":1956034,"question_id":1955505,"share_link":"https://stackoverflow.com/a/1956034","body_markdown":"You&#39;ve asked how to shoot yourself in the foot and I&#39;m here to provide the ammo:\r\n\r\n    curl -s &#39;http://twitter.com/users/username.json&#39; | sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | awk -v RS=&#39;,&quot;&#39; -F: &#39;/^text/ {print $2}&#39;\r\n\r\nYou could use `tr -d &#39;{}&#39;` instead of `sed`. But leaving them out completely seems to have the desired effect as well.\r\n\r\nIf you want to strip off the outer quotes, pipe the result of the above through `sed &#39;s/\\(^&quot;\\|&quot;$\\)//g&#39;`\r\n\r\nI think others have sounded sufficient alarm. I&#39;ll be standing by with a cell phone to call an ambulance. Fire when ready.","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1956034#1956034","title":"Parsing JSON with Unix tools","body":"<p>You've asked how to shoot yourself in the foot and I'm here to provide the ammo:</p>\n\n<pre><code>curl -s 'http://twitter.com/users/username.json' | sed -e 's/[{}]/''/g' | awk -v RS=',\"' -F: '/^text/ {print $2}'\n</code></pre>\n\n<p>You could use <code>tr -d '{}'</code> instead of <code>sed</code>. But leaving them out completely seems to have the desired effect as well.</p>\n\n<p>If you want to strip off the outer quotes, pipe the result of the above through <code>sed 's/\\(^\"\\|\"$\\)//g'</code></p>\n\n<p>I think others have sounded sufficient alarm. I'll be standing by with a cell phone to call an ambulance. Fire when ready.</p>\n"},{"owner":{"reputation":326449,"accept_rate":83,"display_name":"ghostdog74","link":"https://stackoverflow.com/users/131527/ghostdog74"},"is_accepted":false,"score":5,"creation_date":1261613328,"answer_id":1956038,"question_id":1955505,"share_link":"https://stackoverflow.com/a/1956038","body_markdown":"Here&#39;s one way you can do it with [AWK][1]:\r\n\r\n    curl -sL &#39;http://twitter.com/users/username.json&#39; | awk -F&quot;,&quot; -v k=&quot;text&quot; &#39;{\r\n        gsub(/{|}/,&quot;&quot;)\r\n        for(i=1;i&lt;=NF;i++){\r\n            if ( $i ~ k ){\r\n                print $i\r\n            }\r\n        }\r\n    }&#39;\r\n\r\n  [1]: https://en.wikipedia.org/wiki/AWK\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1956038#1956038","title":"Parsing JSON with Unix tools","body":"<p>Here's one way you can do it with <a href=\"https://en.wikipedia.org/wiki/AWK\" rel=\"nofollow noreferrer\">AWK</a>:</p>\n<pre><code>curl -sL 'http://twitter.com/users/username.json' | awk -F&quot;,&quot; -v k=&quot;text&quot; '{\n    gsub(/{|}/,&quot;&quot;)\n    for(i=1;i&lt;=NF;i++){\n        if ( $i ~ k ){\n            print $i\n        }\n    }\n}'\n</code></pre>\n"},{"owner":{"reputation":2185,"display_name":"boecko","link":"https://stackoverflow.com/users/456160/boecko"},"is_accepted":false,"score":14,"creation_date":1303897611,"answer_id":5802161,"question_id":1955505,"share_link":"https://stackoverflow.com/a/5802161","body_markdown":"Version which uses Ruby and http://flori.github.com/json/\r\n\r\n    &lt; file.json ruby -e &quot;require &#39;rubygems&#39;; require &#39;json&#39;; puts JSON.pretty_generate(JSON[STDIN.read]);&quot;\r\n\r\nOr more concisely:\r\n\r\n    &lt; file.json ruby -r rubygems -r json -e &quot;puts JSON.pretty_generate(JSON[STDIN.read]);&quot;","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/5802161#5802161","title":"Parsing JSON with Unix tools","body":"<p>Version which uses Ruby and <a href=\"http://flori.github.com/json/\" rel=\"nofollow noreferrer\">http://flori.github.com/json/</a></p>\n<pre><code>&lt; file.json ruby -e &quot;require 'rubygems'; require 'json'; puts JSON.pretty_generate(JSON[STDIN.read]);&quot;\n</code></pre>\n<p>Or more concisely:</p>\n<pre><code>&lt; file.json ruby -r rubygems -r json -e &quot;puts JSON.pretty_generate(JSON[STDIN.read]);&quot;\n</code></pre>\n"},{"owner":{"reputation":1861,"display_name":"jnrg","link":"https://stackoverflow.com/users/726716/jnrg"},"is_accepted":false,"score":152,"creation_date":1307865855,"answer_id":6320876,"question_id":1955505,"share_link":"https://stackoverflow.com/a/6320876","body_markdown":"Following [martinr&#39;s and][1] [Boecko&#39;s lead][2]: \r\n\r\n    curl -s &#39;http://twitter.com/users/username.json&#39; | python -mjson.tool\r\n\r\nThat will give you an extremely [grep][3]-friendly output. Very convenient:\r\n\r\n    curl -s &#39;http://twitter.com/users/username.json&#39; | python -mjson.tool | grep my_key\r\n\r\n  [1]: https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1955668#1955668\r\n  [2]: https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/5802161#5802161\r\n  [3]: https://en.wikipedia.org/wiki/Grep\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/6320876#6320876","title":"Parsing JSON with Unix tools","body":"<p>Following <a href=\"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/1955668#1955668\">martinr's and</a> <a href=\"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/5802161#5802161\">Boecko's lead</a>:</p>\n<pre><code>curl -s 'http://twitter.com/users/username.json' | python -mjson.tool\n</code></pre>\n<p>That will give you an extremely <a href=\"https://en.wikipedia.org/wiki/Grep\" rel=\"nofollow noreferrer\">grep</a>-friendly output. Very convenient:</p>\n<pre><code>curl -s 'http://twitter.com/users/username.json' | python -mjson.tool | grep my_key\n</code></pre>\n"},{"owner":{"reputation":9584,"accept_rate":57,"display_name":"Brendan OConnor","link":"https://stackoverflow.com/users/86684/brendan-oconnor"},"is_accepted":false,"score":326,"creation_date":1311809086,"answer_id":6852427,"question_id":1955505,"share_link":"https://stackoverflow.com/a/6852427","body_markdown":"To quickly extract the values for a particular key, I personally like to use &quot;grep -o&quot;, which only returns the regex&#39;s match.  For example, to get the &quot;text&quot; field from tweets, something like:\r\n\r\n    grep -Po &#39;&quot;text&quot;:.*?[^\\\\]&quot;,&#39; tweets.json\r\n\r\nThis regex is more robust than you might think; for example, it deals fine with strings having embedded commas and escaped quotes inside them. I think with a little more work you could make one that is actually guaranteed to extract the value, if it&#39;s atomic.  (If it has nesting, then a regex can&#39;t do it of course.)\r\n\r\nAnd to further clean (albeit keeping the string&#39;s original escaping) you can use something like: `| perl -pe &#39;s/&quot;text&quot;://; s/^&quot;//; s/&quot;,$//&#39;`.  (I did this for [this analysis][1].)\r\n\r\nTo all the haters who insist you should use a real JSON parser -- yes, that is essential for correctness, but\r\n\r\n  1. To do a really quick analysis, like counting values to check on data cleaning bugs or get a general feel for the data, banging out something on the command line is faster.  Opening an editor to write a script is distracting.\r\n  2. `grep -o` is orders of magnitude faster than the Python standard `json` library, at least when doing this for tweets (which are ~2 KB each).  I&#39;m not sure if this is just because `json` is slow (I should compare to yajl sometime); but in principle, a regex should be faster since it&#39;s finite state and much more optimizable, instead of a parser that has to support recursion, and in this case, spends lots of CPU building trees for structures you don&#39;t care about.  (If someone wrote a finite state transducer that did proper (depth-limited) JSON parsing, that would be fantastic!  In the meantime we have &quot;grep -o&quot;.)\r\n\r\nTo write maintainable code, I always use a real parsing library.  I haven&#39;t tried [jsawk][2], but if it works well, that would address point #1.\r\n\r\nOne last, wackier, solution: I wrote a script that uses Python `json` and extracts the keys you want, into tab-separated columns; then I pipe through a wrapper around `awk` that allows named access to columns.  [In here: the json2tsv and tsvawk scripts][3].  So for this example it would be:\r\n\r\n    json2tsv id text &lt; tweets.json | tsvawk &#39;{print &quot;tweet &quot; $id &quot; is: &quot; $text}&#39;\r\n\r\nThis approach doesn&#39;t address #2, is more inefficient than a single Python script, and it&#39;s a little brittle: it forces normalization of newlines and tabs in string values, to play nice with awk&#39;s field/record-delimited view of the world.  But it does let you stay on the command line, with more correctness than `grep -o`.\r\n\r\n  [1]: https://gist.github.com/1024217\r\n  [2]: https://github.com/micha/jsawk\r\n  [3]: https://github.com/brendano/tsvutils","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/6852427#6852427","title":"Parsing JSON with Unix tools","body":"<p>To quickly extract the values for a particular key, I personally like to use \"grep -o\", which only returns the regex's match.  For example, to get the \"text\" field from tweets, something like:</p>\n\n<pre><code>grep -Po '\"text\":.*?[^\\\\]\",' tweets.json\n</code></pre>\n\n<p>This regex is more robust than you might think; for example, it deals fine with strings having embedded commas and escaped quotes inside them. I think with a little more work you could make one that is actually guaranteed to extract the value, if it's atomic.  (If it has nesting, then a regex can't do it of course.)</p>\n\n<p>And to further clean (albeit keeping the string's original escaping) you can use something like: <code>| perl -pe 's/\"text\"://; s/^\"//; s/\",$//'</code>.  (I did this for <a href=\"https://gist.github.com/1024217\" rel=\"noreferrer\">this analysis</a>.)</p>\n\n<p>To all the haters who insist you should use a real JSON parser -- yes, that is essential for correctness, but</p>\n\n<ol>\n<li>To do a really quick analysis, like counting values to check on data cleaning bugs or get a general feel for the data, banging out something on the command line is faster.  Opening an editor to write a script is distracting.</li>\n<li><code>grep -o</code> is orders of magnitude faster than the Python standard <code>json</code> library, at least when doing this for tweets (which are ~2 KB each).  I'm not sure if this is just because <code>json</code> is slow (I should compare to yajl sometime); but in principle, a regex should be faster since it's finite state and much more optimizable, instead of a parser that has to support recursion, and in this case, spends lots of CPU building trees for structures you don't care about.  (If someone wrote a finite state transducer that did proper (depth-limited) JSON parsing, that would be fantastic!  In the meantime we have \"grep -o\".)</li>\n</ol>\n\n<p>To write maintainable code, I always use a real parsing library.  I haven't tried <a href=\"https://github.com/micha/jsawk\" rel=\"noreferrer\">jsawk</a>, but if it works well, that would address point #1.</p>\n\n<p>One last, wackier, solution: I wrote a script that uses Python <code>json</code> and extracts the keys you want, into tab-separated columns; then I pipe through a wrapper around <code>awk</code> that allows named access to columns.  <a href=\"https://github.com/brendano/tsvutils\" rel=\"noreferrer\">In here: the json2tsv and tsvawk scripts</a>.  So for this example it would be:</p>\n\n<pre><code>json2tsv id text &lt; tweets.json | tsvawk '{print \"tweet \" $id \" is: \" $text}'\n</code></pre>\n\n<p>This approach doesn't address #2, is more inefficient than a single Python script, and it's a little brittle: it forces normalization of newlines and tabs in string values, to play nice with awk's field/record-delimited view of the world.  But it does let you stay on the command line, with more correctness than <code>grep -o</code>.</p>\n"},{"owner":{"reputation":3223,"display_name":"paulkmoore","link":"https://stackoverflow.com/users/467253/paulkmoore"},"is_accepted":false,"score":192,"creation_date":1323176753,"answer_id":8400375,"question_id":1955505,"share_link":"https://stackoverflow.com/a/8400375","body_markdown":"On the basis that some of the recommendations here (especially in the comments) suggested the use of Python, I was disappointed not to find an example.\r\n\r\nSo, here&#39;s a one-liner to get a single value from some JSON data. It assumes that you are piping the data in (from somewhere) and so should be useful in a scripting context.\r\n\r\n    echo &#39;{&quot;hostname&quot;:&quot;test&quot;,&quot;domainname&quot;:&quot;example.com&quot;}&#39; | python -c &#39;import json,sys;obj=json.load(sys.stdin);print obj[&quot;hostname&quot;]&#39;\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/8400375#8400375","title":"Parsing JSON with Unix tools","body":"<p>On the basis that some of the recommendations here (especially in the comments) suggested the use of Python, I was disappointed not to find an example.</p>\n<p>So, here's a one-liner to get a single value from some JSON data. It assumes that you are piping the data in (from somewhere) and so should be useful in a scripting context.</p>\n<pre><code>echo '{&quot;hostname&quot;:&quot;test&quot;,&quot;domainname&quot;:&quot;example.com&quot;}' | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[&quot;hostname&quot;]'\n</code></pre>\n"},{"owner":{"reputation":74377,"accept_rate":93,"display_name":"jaypal singh","link":"https://stackoverflow.com/users/970195/jaypal-singh"},"is_accepted":false,"score":6,"creation_date":1323214743,"answer_id":8408487,"question_id":1955505,"share_link":"https://stackoverflow.com/a/8408487","body_markdown":"You can try something like this - \r\n\r\n    curl -s &#39;http://twitter.com/users/jaypalsingh.json&#39; | \r\n    awk -F=&quot;:&quot; -v RS=&quot;,&quot; &#39;$1~/&quot;text&quot;/ {print}&#39;","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/8408487#8408487","title":"Parsing JSON with Unix tools","body":"<p>You can try something like this - </p>\n\n<pre><code>curl -s 'http://twitter.com/users/jaypalsingh.json' | \nawk -F=\":\" -v RS=\",\" '$1~/\"text\"/ {print}'\n</code></pre>\n"},{"owner":{"reputation":73526,"accept_rate":76,"display_name":"coolaj86","link":"https://stackoverflow.com/users/151312/coolaj86"},"is_accepted":false,"score":48,"creation_date":1323488972,"answer_id":8454238,"question_id":1955505,"share_link":"https://stackoverflow.com/a/8454238","body_markdown":"# Update (2020)\r\n\r\nMy biggest issue with external tools (e.g., Python) was that you have to deal with package managers and dependencies to install them.\r\n\r\nHowever, now that we have `jq` as a standalone, static tool that&#39;s easy to install cross-platform via [GitHub Releases][1] and Webi ([webinstall.dev/jq][2]), I&#39;d recommend that:\r\n\r\nMac, Linux:\r\n\r\n```bash\r\ncurl -sS https://webi.sh/jq | bash\r\n```\r\n\r\nWindows 10:\r\n\r\n```bash\r\ncurl.exe -A MS https://webi.ms/jq | powershell\r\n```\r\n\r\n**Cheat Sheet**: https://webinstall.dev/jq\r\n\r\n# Original (2011)\r\n\r\n[TickTick][3] is a JSON parser written in bash (less than 250 lines of code).\r\n\r\nHere&#39;s the author&#39;s snippet from his article, *[Imagine a world where Bash supports JSON][4]*:\r\n\r\n    #!/bin/bash\r\n    . ticktick.sh\r\n\r\n    ``\r\n      people = {\r\n        &quot;Writers&quot;: [\r\n          &quot;Rod Serling&quot;,\r\n          &quot;Charles Beaumont&quot;,\r\n          &quot;Richard Matheson&quot;\r\n        ],\r\n        &quot;Cast&quot;: {\r\n          &quot;Rod Serling&quot;: { &quot;Episodes&quot;: 156 },\r\n          &quot;Martin Landau&quot;: { &quot;Episodes&quot;: 2 },\r\n          &quot;William Shatner&quot;: { &quot;Episodes&quot;: 2 }\r\n        }\r\n      }\r\n    ``\r\n\r\n    function printDirectors() {\r\n      echo &quot;  The ``people.Directors.length()`` Directors are:&quot;\r\n\r\n      for director in ``people.Directors.items()``; do\r\n        printf &quot;    - %s\\n&quot; ${!director}\r\n      done\r\n    }\r\n\r\n    `` people.Directors = [ &quot;John Brahm&quot;, &quot;Douglas Heyes&quot; ] ``\r\n    printDirectors\r\n\r\n    newDirector=&quot;Lamont Johnson&quot;\r\n    `` people.Directors.push($newDirector) ``\r\n    printDirectors\r\n\r\n    echo &quot;Shifted: &quot;``people.Directors.shift()``\r\n    printDirectors\r\n\r\n    echo &quot;Popped: &quot;``people.Directors.pop()``\r\n    printDirectors\r\n\r\n  [1]: https://github.com/stedolan/jq/releases/\r\n  [2]: https://webinstall.dev/jq\r\n  [3]: https://github.com/kristopolous/TickTick\r\n  [4]: http://9ol.es/TheEmperorsNewClothes.html\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/8454238#8454238","title":"Parsing JSON with Unix tools","body":"<h1>Update (2020)</h1>\n<p>My biggest issue with external tools (e.g., Python) was that you have to deal with package managers and dependencies to install them.</p>\n<p>However, now that we have <code>jq</code> as a standalone, static tool that's easy to install cross-platform via <a href=\"https://github.com/stedolan/jq/releases/\" rel=\"nofollow noreferrer\">GitHub Releases</a> and Webi (<a href=\"https://webinstall.dev/jq\" rel=\"nofollow noreferrer\">webinstall.dev/jq</a>), I'd recommend that:</p>\n<p>Mac, Linux:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>curl -sS https://webi.sh/jq | bash\n</code></pre>\n<p>Windows 10:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>curl.exe -A MS https://webi.ms/jq | powershell\n</code></pre>\n<p><strong>Cheat Sheet</strong>: <a href=\"https://webinstall.dev/jq\" rel=\"nofollow noreferrer\">https://webinstall.dev/jq</a></p>\n<h1>Original (2011)</h1>\n<p><a href=\"https://github.com/kristopolous/TickTick\" rel=\"nofollow noreferrer\">TickTick</a> is a JSON parser written in bash (less than 250 lines of code).</p>\n<p>Here's the author's snippet from his article, <em><a href=\"http://9ol.es/TheEmperorsNewClothes.html\" rel=\"nofollow noreferrer\">Imagine a world where Bash supports JSON</a></em>:</p>\n<pre><code>#!/bin/bash\n. ticktick.sh\n\n``\n  people = {\n    &quot;Writers&quot;: [\n      &quot;Rod Serling&quot;,\n      &quot;Charles Beaumont&quot;,\n      &quot;Richard Matheson&quot;\n    ],\n    &quot;Cast&quot;: {\n      &quot;Rod Serling&quot;: { &quot;Episodes&quot;: 156 },\n      &quot;Martin Landau&quot;: { &quot;Episodes&quot;: 2 },\n      &quot;William Shatner&quot;: { &quot;Episodes&quot;: 2 }\n    }\n  }\n``\n\nfunction printDirectors() {\n  echo &quot;  The ``people.Directors.length()`` Directors are:&quot;\n\n  for director in ``people.Directors.items()``; do\n    printf &quot;    - %s\\n&quot; ${!director}\n  done\n}\n\n`` people.Directors = [ &quot;John Brahm&quot;, &quot;Douglas Heyes&quot; ] ``\nprintDirectors\n\nnewDirector=&quot;Lamont Johnson&quot;\n`` people.Directors.push($newDirector) ``\nprintDirectors\n\necho &quot;Shifted: &quot;``people.Directors.shift()``\nprintDirectors\n\necho &quot;Popped: &quot;``people.Directors.pop()``\nprintDirectors\n</code></pre>\n"},{"owner":{"reputation":154442,"accept_rate":97,"display_name":"kev","link":"https://stackoverflow.com/users/348785/kev"},"is_accepted":false,"score":5,"creation_date":1334155690,"answer_id":10108392,"question_id":1955505,"share_link":"https://stackoverflow.com/a/10108392","body_markdown":"You can use [`jshon`][1]:\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; | jshon -e text\r\n\r\n\r\n  [1]: http://kmkeen.com/jshon/","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/10108392#10108392","title":"Parsing JSON with Unix tools","body":"<p>You can use <a href=\"http://kmkeen.com/jshon/\" rel=\"noreferrer\"><code>jshon</code></a>:</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' | jshon -e text\n</code></pre>\n"},{"owner":{"reputation":171,"accept_rate":38,"display_name":"tonybaldwin","link":"https://stackoverflow.com/users/732202/tonybaldwin"},"is_accepted":false,"score":2,"creation_date":1355112787,"answer_id":13794892,"question_id":1955505,"share_link":"https://stackoverflow.com/a/13794892","body_markdown":"I&#39;ve done this, &quot;parsing&quot; a JSON response for a particular value, as follows:\r\n\r\n    curl $url | grep $var | awk &#39;{print $2}&#39; | sed s/\\&quot;//g\r\n\r\nClearly, $url here would be the Twitter URL, and $var would be &quot;text&quot; to get the response for that variable.\r\n\r\nReally, I think the only thing I&#39;m doing the OP has left out is grep for the line with the specific variable he seeks. AWK grabs the second item on the line, and with sed I strip the quotes.\r\n\r\nSomeone smarter than I am could probably do the whole think with AWK or grep.\r\n\r\nNow, you could do it all with just sed:\r\n\r\n    curl $url | sed &#39;/text/!d&#39; | sed s/\\&quot;text\\&quot;://g | sed s/\\&quot;//g | sed s/\\ //g\r\n\r\nThus, no AWK, no grep...I don&#39;t know why I didn&#39;t think of that before. Hmmm...\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/13794892#13794892","title":"Parsing JSON with Unix tools","body":"<p>I've done this, &quot;parsing&quot; a JSON response for a particular value, as follows:</p>\n<pre><code>curl $url | grep $var | awk '{print $2}' | sed s/\\&quot;//g\n</code></pre>\n<p>Clearly, $url here would be the Twitter URL, and $var would be &quot;text&quot; to get the response for that variable.</p>\n<p>Really, I think the only thing I'm doing the OP has left out is grep for the line with the specific variable he seeks. AWK grabs the second item on the line, and with sed I strip the quotes.</p>\n<p>Someone smarter than I am could probably do the whole think with AWK or grep.</p>\n<p>Now, you could do it all with just sed:</p>\n<pre><code>curl $url | sed '/text/!d' | sed s/\\&quot;text\\&quot;://g | sed s/\\&quot;//g | sed s/\\ //g\n</code></pre>\n<p>Thus, no AWK, no grep...I don't know why I didn't think of that before. Hmmm...</p>\n"},{"owner":{"reputation":8389,"display_name":"nickl-","link":"https://stackoverflow.com/users/1522117/nickl"},"is_accepted":false,"score":26,"creation_date":1358976949,"answer_id":14489827,"question_id":1955505,"share_link":"https://stackoverflow.com/a/14489827","body_markdown":"## Parsing JSON with PHP CLI\r\n\r\nIt is arguably off-topic, but since precedence reigns, this question remains incomplete without a mention of our trusty and faithful [PHP][1], am I right?\r\n\r\nIt is using the same example JSON, but let’s assign it to a variable to reduce obscurity.\r\n\r\n    export JSON=&#39;{&quot;hostname&quot;:&quot;test&quot;,&quot;domainname&quot;:&quot;example.com&quot;}&#39;\r\n\r\nNow for PHP goodness, it is using [file_get_contents][2] and the [php://stdin][3] stream wrapper.\r\n\r\n    echo $JSON | php -r &#39;echo json_decode(file_get_contents(&quot;php://stdin&quot;))-&gt;hostname;&#39;\r\n\r\nOr as pointed out using [fgets][4] and the already opened stream at CLI constant [STDIN][5].\r\n\r\n    echo $JSON | php -r &#39;echo json_decode(fgets(STDIN))-&gt;hostname;&#39;\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PHP\r\n  [2]: http://php.net/manual/en/function.file-get-contents.php\r\n  [3]: http://php.net/manual/en/wrappers.php.php\r\n  [4]: http://www.php.net/manual/en/function.fgets.php\r\n  [5]: http://php.net/manual/en/features.commandline.io-streams.php\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/14489827#14489827","title":"Parsing JSON with Unix tools","body":"<h2>Parsing JSON with PHP CLI</h2>\n<p>It is arguably off-topic, but since precedence reigns, this question remains incomplete without a mention of our trusty and faithful <a href=\"https://en.wikipedia.org/wiki/PHP\" rel=\"nofollow noreferrer\">PHP</a>, am I right?</p>\n<p>It is using the same example JSON, but let’s assign it to a variable to reduce obscurity.</p>\n<pre><code>export JSON='{&quot;hostname&quot;:&quot;test&quot;,&quot;domainname&quot;:&quot;example.com&quot;}'\n</code></pre>\n<p>Now for PHP goodness, it is using <a href=\"http://php.net/manual/en/function.file-get-contents.php\" rel=\"nofollow noreferrer\">file_get_contents</a> and the <a href=\"http://php.net/manual/en/wrappers.php.php\" rel=\"nofollow noreferrer\">php://stdin</a> stream wrapper.</p>\n<pre><code>echo $JSON | php -r 'echo json_decode(file_get_contents(&quot;php://stdin&quot;))-&gt;hostname;'\n</code></pre>\n<p>Or as pointed out using <a href=\"http://www.php.net/manual/en/function.fgets.php\" rel=\"nofollow noreferrer\">fgets</a> and the already opened stream at CLI constant <a href=\"http://php.net/manual/en/features.commandline.io-streams.php\" rel=\"nofollow noreferrer\">STDIN</a>.</p>\n<pre><code>echo $JSON | php -r 'echo json_decode(fgets(STDIN))-&gt;hostname;'\n</code></pre>\n"},{"owner":{"reputation":397887,"accept_rate":94,"display_name":"jfs","link":"https://stackoverflow.com/users/4279/jfs"},"is_accepted":false,"score":150,"creation_date":1369922367,"answer_id":16838234,"question_id":1955505,"share_link":"https://stackoverflow.com/a/16838234","body_markdown":"You could just [download `jq` binary for your platform](http://stedolan.github.io/jq/download/) and run (`chmod +x jq`):\r\n\r\n    $ curl &#39;https://twitter.com/users/username.json&#39; | ./jq -r &#39;.name&#39;\r\n\r\nIt extracts `&quot;name&quot;` attribute from the json object.\r\n\r\n[`jq` homepage](http://stedolan.github.io/jq/) says it is like `sed` for JSON data.","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/16838234#16838234","title":"Parsing JSON with Unix tools","body":"<p>You could just <a href=\"http://stedolan.github.io/jq/download/\" rel=\"noreferrer\">download <code>jq</code> binary for your platform</a> and run (<code>chmod +x jq</code>):</p>\n<pre><code>$ curl 'https://twitter.com/users/username.json' | ./jq -r '.name'\n</code></pre>\n<p>It extracts <code>&quot;name&quot;</code> attribute from the json object.</p>\n<p><a href=\"http://stedolan.github.io/jq/\" rel=\"noreferrer\"><code>jq</code> homepage</a> says it is like <code>sed</code> for JSON data.</p>\n"},{"owner":{"reputation":16372,"accept_rate":40,"display_name":"BeniBela","link":"https://stackoverflow.com/users/1501222/benibela"},"is_accepted":false,"score":7,"creation_date":1369933741,"answer_id":16842104,"question_id":1955505,"share_link":"https://stackoverflow.com/a/16842104","body_markdown":"Someone who also has XML files, might want to look at my [Xidel][1]. It is a command-line interface, dependency-free [JSONiq][2] processor. (I.e., it also supports XQuery for XML or JSON processing.)\r\n\r\nThe example in the question would be:\r\n\r\n     xidel -e &#39;json(&quot;http://twitter.com/users/username.json&quot;)(&quot;name&quot;)&#39;\r\n\r\nOr with my own, nonstandard extension syntax:\r\n\r\n     xidel -e &#39;json(&quot;http://twitter.com/users/username.json&quot;).name&#39;\r\n\r\n  [1]: http://videlibri.sourceforge.net/xidel.html\r\n  [2]: http://www.jsoniq.org/\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/16842104#16842104","title":"Parsing JSON with Unix tools","body":"<p>Someone who also has XML files, might want to look at my <a href=\"http://videlibri.sourceforge.net/xidel.html\" rel=\"nofollow noreferrer\">Xidel</a>. It is a command-line interface, dependency-free <a href=\"http://www.jsoniq.org/\" rel=\"nofollow noreferrer\">JSONiq</a> processor. (I.e., it also supports XQuery for XML or JSON processing.)</p>\n<p>The example in the question would be:</p>\n<pre><code> xidel -e 'json(&quot;http://twitter.com/users/username.json&quot;)(&quot;name&quot;)'\n</code></pre>\n<p>Or with my own, nonstandard extension syntax:</p>\n<pre><code> xidel -e 'json(&quot;http://twitter.com/users/username.json&quot;).name'\n</code></pre>\n"},{"owner":{"reputation":18849,"accept_rate":95,"display_name":"Jay","link":"https://stackoverflow.com/users/586621/jay"},"is_accepted":false,"score":141,"creation_date":1377616282,"answer_id":18469304,"question_id":1955505,"share_link":"https://stackoverflow.com/a/18469304","body_markdown":"## Using Node.js\r\n\r\nIf the system has [Node.js][1] installed, it&#39;s possible to use the `-p` print and `-e` evaluate script flags with [`JSON.parse`][2] to pull out any value that is needed.\r\n\r\nA simple example using the JSON string `{ &quot;foo&quot;: &quot;bar&quot; }` and pulling out the value of &quot;foo&quot;:\r\n\r\n&lt;!-- language: lang-sh --&gt;\r\n\r\n    node -pe &#39;JSON.parse(process.argv[1]).foo&#39; &#39;{ &quot;foo&quot;: &quot;bar&quot; }&#39;\r\n\r\nOutput:\r\n\r\n    bar\r\n\r\nBecause we have access to `cat` and other utilities, we can use this for files:\r\n\r\n    node -pe &#39;JSON.parse(process.argv[1]).foo&#39; &quot;$(cat foobar.json)&quot;\r\n\r\nOutput:\r\n\r\n    bar\r\n\r\nOr any other format such as an URL that contains JSON:\r\n\r\n&lt;!-- language: lang-sh --&gt;\r\n\r\n    node -pe &#39;JSON.parse(process.argv[1]).name&#39; &quot;$(curl -s https://api.github.com/users/trevorsenior)&quot;\r\n\r\nOutput:\r\n\r\n    Trevor Senior\r\n\r\n  [1]: https://stackoverflow.com/questions/tagged/node.js\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/18469304#18469304","title":"Parsing JSON with Unix tools","body":"<h2>Using Node.js</h2>\n<p>If the system has <a href=\"https://stackoverflow.com/questions/tagged/node.js\">Node.js</a> installed, it's possible to use the <code>-p</code> print and <code>-e</code> evaluate script flags with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\" rel=\"noreferrer\"><code>JSON.parse</code></a> to pull out any value that is needed.</p>\n<p>A simple example using the JSON string <code>{ &quot;foo&quot;: &quot;bar&quot; }</code> and pulling out the value of &quot;foo&quot;:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>node -pe 'JSON.parse(process.argv[1]).foo' '{ &quot;foo&quot;: &quot;bar&quot; }'\n</code></pre>\n<p>Output:</p>\n<pre><code>bar\n</code></pre>\n<p>Because we have access to <code>cat</code> and other utilities, we can use this for files:</p>\n<pre><code>node -pe 'JSON.parse(process.argv[1]).foo' &quot;$(cat foobar.json)&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>bar\n</code></pre>\n<p>Or any other format such as an URL that contains JSON:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>node -pe 'JSON.parse(process.argv[1]).name' &quot;$(curl -s https://api.github.com/users/trevorsenior)&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>Trevor Senior\n</code></pre>\n"},{"owner":{"reputation":41,"display_name":"mcnabicus","link":"https://stackoverflow.com/users/1335389/mcnabicus"},"is_accepted":false,"score":4,"creation_date":1391376481,"answer_id":21516469,"question_id":1955505,"share_link":"https://stackoverflow.com/a/21516469","body_markdown":"Parsing JSON is painful in a shell script. With a more appropriate language, create a tool that extracts JSON attributes in a way consistent with shell scripting conventions. You can use your new tool to solve the immediate shell scripting problem and then add it to your kit for future situations.\r\n\r\nFor example, consider a tool *jsonlookup* such that if I say `jsonlookup access token id` it will return the attribute *id* defined within the attribute *token* defined within the attribute *access* from standard input, which is presumably JSON data. If the attribute doesn&#39;t exist, the tool returns nothing (exit status 1). If the parsing fails, exit status 2 and a message to standard error. If the lookup succeeds, the tool prints the attribute&#39;s value.\r\n\r\nHaving created a Unix tool for the precise purpose of extracting JSON values you can easily use it in shell scripts:\r\n\r\n    access_token=$(curl &lt;some horrible crap&gt; | jsonlookup access token id)\r\n\r\nAny language will do for the implementation of *jsonlookup*. Here is a fairly concise Python version:\r\n\r\n    #!/usr/bin/python\r\n\r\n    import sys\r\n    import json\r\n\r\n    try: rep = json.loads(sys.stdin.read())\r\n    except:\r\n        sys.stderr.write(sys.argv[0] + &quot;: unable to parse JSON from stdin\\n&quot;)\r\n        sys.exit(2)\r\n    for key in sys.argv[1:]:\r\n        if key not in rep:\r\n            sys.exit(1)\r\n        rep = rep[key]\r\n    print rep\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/21516469#21516469","title":"Parsing JSON with Unix tools","body":"<p>Parsing JSON is painful in a shell script. With a more appropriate language, create a tool that extracts JSON attributes in a way consistent with shell scripting conventions. You can use your new tool to solve the immediate shell scripting problem and then add it to your kit for future situations.</p>\n<p>For example, consider a tool <em>jsonlookup</em> such that if I say <code>jsonlookup access token id</code> it will return the attribute <em>id</em> defined within the attribute <em>token</em> defined within the attribute <em>access</em> from standard input, which is presumably JSON data. If the attribute doesn't exist, the tool returns nothing (exit status 1). If the parsing fails, exit status 2 and a message to standard error. If the lookup succeeds, the tool prints the attribute's value.</p>\n<p>Having created a Unix tool for the precise purpose of extracting JSON values you can easily use it in shell scripts:</p>\n<pre><code>access_token=$(curl &lt;some horrible crap&gt; | jsonlookup access token id)\n</code></pre>\n<p>Any language will do for the implementation of <em>jsonlookup</em>. Here is a fairly concise Python version:</p>\n<pre><code>#!/usr/bin/python\n\nimport sys\nimport json\n\ntry: rep = json.loads(sys.stdin.read())\nexcept:\n    sys.stderr.write(sys.argv[0] + &quot;: unable to parse JSON from stdin\\n&quot;)\n    sys.exit(2)\nfor key in sys.argv[1:]:\n    if key not in rep:\n        sys.exit(1)\n    rep = rep[key]\nprint rep\n</code></pre>\n"},{"owner":{"reputation":777,"display_name":"Joe Heyming","link":"https://stackoverflow.com/users/1222743/joe-heyming"},"is_accepted":false,"score":50,"creation_date":1391666012,"answer_id":21595107,"question_id":1955505,"share_link":"https://stackoverflow.com/a/21595107","body_markdown":"## Using Bash with Python\r\n\r\nCreate a Bash function in your *.bashrc* file:\r\n\r\n    function getJsonVal () {\r\n        python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))&quot;;\r\n    }\r\n\r\nThen\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; | getJsonVal &quot;[&#39;text&#39;]&quot;\r\n\r\nOutput:\r\n\r\n    My status\r\n\r\nHere is the same function, but with error checking.\r\n\r\n    function getJsonVal() {\r\n       if [ \\( $# -ne 1 \\) -o \\( -t 0 \\) ]; then\r\n           cat &lt;&lt;EOF\r\n    Usage: getJsonVal &#39;key&#39; &lt; /tmp/\r\n     -- or --\r\n     cat /tmp/input | getJsonVal &#39;key&#39;\r\n    EOF\r\n           return;\r\n       fi;\r\n       python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))&quot;;\r\n    }\r\n\r\nWhere $# -ne 1 makes sure at least 1 input, and -t 0 make sure you are redirecting from a pipe.\r\n\r\nThe nice thing about this implementation is that you can access nested JSON values and get JSON content in return! =)\r\n\r\nExample:\r\n\r\n    echo &#39;{&quot;foo&quot;: {&quot;bar&quot;: &quot;baz&quot;, &quot;a&quot;: [1,2,3]}}&#39; |  getJsonVal &quot;[&#39;foo&#39;][&#39;a&#39;][1]&quot;\r\n\r\nOutput:\r\n\r\n    2\r\n\r\nIf you want to be really fancy, you could pretty print the data:\r\n\r\n    function getJsonVal () {\r\n        python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1, sort_keys=True, indent=4))&quot;;\r\n    }\r\n\r\n    echo &#39;{&quot;foo&quot;: {&quot;bar&quot;: &quot;baz&quot;, &quot;a&quot;: [1,2,3]}}&#39; |  getJsonVal &quot;[&#39;foo&#39;]&quot;\r\n    {\r\n        &quot;a&quot;: [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        &quot;bar&quot;: &quot;baz&quot;\r\n    }\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/21595107#21595107","title":"Parsing JSON with Unix tools","body":"<h2>Using Bash with Python</h2>\n<p>Create a Bash function in your <em>.bashrc</em> file:</p>\n<pre><code>function getJsonVal () {\n    python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))&quot;;\n}\n</code></pre>\n<p>Then</p>\n<pre><code>curl 'http://twitter.com/users/username.json' | getJsonVal &quot;['text']&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>My status\n</code></pre>\n<p>Here is the same function, but with error checking.</p>\n<pre><code>function getJsonVal() {\n   if [ \\( $# -ne 1 \\) -o \\( -t 0 \\) ]; then\n       cat &lt;&lt;EOF\nUsage: getJsonVal 'key' &lt; /tmp/\n -- or --\n cat /tmp/input | getJsonVal 'key'\nEOF\n       return;\n   fi;\n   python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))&quot;;\n}\n</code></pre>\n<p>Where $# -ne 1 makes sure at least 1 input, and -t 0 make sure you are redirecting from a pipe.</p>\n<p>The nice thing about this implementation is that you can access nested JSON values and get JSON content in return! =)</p>\n<p>Example:</p>\n<pre><code>echo '{&quot;foo&quot;: {&quot;bar&quot;: &quot;baz&quot;, &quot;a&quot;: [1,2,3]}}' |  getJsonVal &quot;['foo']['a'][1]&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>2\n</code></pre>\n<p>If you want to be really fancy, you could pretty print the data:</p>\n<pre><code>function getJsonVal () {\n    python -c &quot;import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1, sort_keys=True, indent=4))&quot;;\n}\n\necho '{&quot;foo&quot;: {&quot;bar&quot;: &quot;baz&quot;, &quot;a&quot;: [1,2,3]}}' |  getJsonVal &quot;['foo']&quot;\n{\n    &quot;a&quot;: [\n        1,\n        2,\n        3\n    ],\n    &quot;bar&quot;: &quot;baz&quot;\n}\n</code></pre>\n"},{"owner":{"reputation":59,"display_name":"shlomosh","link":"https://stackoverflow.com/users/1496609/shlomosh"},"is_accepted":false,"score":3,"creation_date":1396342672,"answer_id":22781151,"question_id":1955505,"share_link":"https://stackoverflow.com/a/22781151","body_markdown":"For more complex JSON parsing, I suggest using the Python *jsonpath* module (by Stefan Goessner) -\r\n\r\n1. Install it -\r\n\r\n    ```lang-none\r\n    sudo easy_install -U jsonpath\r\n    ```\r\n\r\n2. Use it -\r\n\r\n    Example file.json (from http://goessner.net/articles/JsonPath) -\r\n\r\n    ```lang-none\r\n    { &quot;store&quot;: {\r\n        &quot;book&quot;: [\r\n          { &quot;category&quot;: &quot;reference&quot;,\r\n            &quot;author&quot;: &quot;Nigel Rees&quot;,\r\n            &quot;title&quot;: &quot;Sayings of the Century&quot;,\r\n            &quot;price&quot;: 8.95\r\n          },\r\n          { &quot;category&quot;: &quot;fiction&quot;,\r\n            &quot;author&quot;: &quot;Evelyn Waugh&quot;,\r\n            &quot;title&quot;: &quot;Sword of Honour&quot;,\r\n            &quot;price&quot;: 12.99\r\n          },\r\n          { &quot;category&quot;: &quot;fiction&quot;,\r\n            &quot;author&quot;: &quot;Herman Melville&quot;,\r\n            &quot;title&quot;: &quot;Moby Dick&quot;,\r\n            &quot;isbn&quot;: &quot;0-553-21311-3&quot;,\r\n            &quot;price&quot;: 8.99\r\n          },\r\n          { &quot;category&quot;: &quot;fiction&quot;,\r\n            &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,\r\n            &quot;title&quot;: &quot;The Lord of the Rings&quot;,\r\n            &quot;isbn&quot;: &quot;0-395-19395-8&quot;,\r\n            &quot;price&quot;: 22.99\r\n          }\r\n        ],\r\n        &quot;bicycle&quot;: {\r\n          &quot;color&quot;: &quot;red&quot;,\r\n          &quot;price&quot;: 19.95\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n    Parse it (extract all book titles with price &lt; 10) -\r\n\r\n    ```lang-none\r\n    cat file.json | python -c &quot;import sys, json, jsonpath; print &#39;\\n&#39;.join(jsonpath.jsonpath(json.load(sys.stdin), &#39;store.book[?(@.price &lt; 10)].title&#39;))&quot;\r\n    ```\r\n\r\n    Will output -\r\n\r\n    ```lang-none\r\n    Sayings of the Century\r\n    Moby Dick\r\n    ```\r\n\r\n    *Note*: The above command line does not include error checking. For a full solution with error checking, you should create a small Python script, and wrap the code with *try-except*.\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/22781151#22781151","title":"Parsing JSON with Unix tools","body":"<p>For more complex JSON parsing, I suggest using the Python <em>jsonpath</em> module (by Stefan Goessner) -</p>\n<ol>\n<li><p>Install it -</p>\n<pre class=\"lang-none prettyprint-override\"><code>sudo easy_install -U jsonpath\n</code></pre>\n</li>\n<li><p>Use it -</p>\n<p>Example file.json (from <a href=\"http://goessner.net/articles/JsonPath\" rel=\"nofollow noreferrer\">http://goessner.net/articles/JsonPath</a>) -</p>\n<pre class=\"lang-none prettyprint-override\"><code>{ &quot;store&quot;: {\n    &quot;book&quot;: [\n      { &quot;category&quot;: &quot;reference&quot;,\n        &quot;author&quot;: &quot;Nigel Rees&quot;,\n        &quot;title&quot;: &quot;Sayings of the Century&quot;,\n        &quot;price&quot;: 8.95\n      },\n      { &quot;category&quot;: &quot;fiction&quot;,\n        &quot;author&quot;: &quot;Evelyn Waugh&quot;,\n        &quot;title&quot;: &quot;Sword of Honour&quot;,\n        &quot;price&quot;: 12.99\n      },\n      { &quot;category&quot;: &quot;fiction&quot;,\n        &quot;author&quot;: &quot;Herman Melville&quot;,\n        &quot;title&quot;: &quot;Moby Dick&quot;,\n        &quot;isbn&quot;: &quot;0-553-21311-3&quot;,\n        &quot;price&quot;: 8.99\n      },\n      { &quot;category&quot;: &quot;fiction&quot;,\n        &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,\n        &quot;title&quot;: &quot;The Lord of the Rings&quot;,\n        &quot;isbn&quot;: &quot;0-395-19395-8&quot;,\n        &quot;price&quot;: 22.99\n      }\n    ],\n    &quot;bicycle&quot;: {\n      &quot;color&quot;: &quot;red&quot;,\n      &quot;price&quot;: 19.95\n    }\n  }\n}\n</code></pre>\n<p>Parse it (extract all book titles with price &lt; 10) -</p>\n<pre class=\"lang-none prettyprint-override\"><code>cat file.json | python -c &quot;import sys, json, jsonpath; print '\\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book[?(@.price &lt; 10)].title'))&quot;\n</code></pre>\n<p>Will output -</p>\n<pre class=\"lang-none prettyprint-override\"><code>Sayings of the Century\nMoby Dick\n</code></pre>\n<p><em>Note</em>: The above command line does not include error checking. For a full solution with error checking, you should create a small Python script, and wrap the code with <em>try-except</em>.</p>\n</li>\n</ol>\n"},{"owner":{"reputation":5283,"display_name":"RussellStewart","link":"https://stackoverflow.com/users/2237635/russellstewart"},"is_accepted":false,"score":3,"creation_date":1410725549,"answer_id":25837557,"question_id":1955505,"share_link":"https://stackoverflow.com/a/25837557","body_markdown":"This is a good usecase for [pythonpy](https://pypi.python.org/pypi/pythonpy):\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; | py &#39;json.load(sys.stdin)[&quot;name&quot;]&#39;","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/25837557#25837557","title":"Parsing JSON with Unix tools","body":"<p>This is a good usecase for <a href=\"https://pypi.python.org/pypi/pythonpy\" rel=\"nofollow\">pythonpy</a>:</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' | py 'json.load(sys.stdin)[\"name\"]'\n</code></pre>\n"},{"owner":{"reputation":1135,"display_name":"maikel","link":"https://stackoverflow.com/users/2120710/maikel"},"is_accepted":false,"score":34,"creation_date":1414679932,"answer_id":26655887,"question_id":1955505,"share_link":"https://stackoverflow.com/a/26655887","body_markdown":"This is using standard Unix tools available on most [distributions][1]. It also works well with backslashes (\\\\) and quotes (&quot;).\r\n\r\n***Warning***: This doesn&#39;t come close to the power of [jq][2] and will only work with very simple JSON objects. It&#39;s an attempt to answer to the original question and in situations where you can&#39;t install additional tools.\r\n\r\n    function parse_json()\r\n    {\r\n        echo $1 | \\\r\n        sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | \\\r\n        sed -e &#39;s/&quot;, &quot;/&#39;\\&quot;,\\&quot;&#39;/g&#39; | \\\r\n        sed -e &#39;s/&quot; ,&quot;/&#39;\\&quot;,\\&quot;&#39;/g&#39; | \\\r\n        sed -e &#39;s/&quot; , &quot;/&#39;\\&quot;,\\&quot;&#39;/g&#39; | \\\r\n        sed -e &#39;s/&quot;,&quot;/&#39;\\&quot;---SEPERATOR---\\&quot;&#39;/g&#39; | \\\r\n        awk -F=&#39;:&#39; -v RS=&#39;---SEPERATOR---&#39; &quot;\\$1~/\\&quot;$2\\&quot;/ {print}&quot; | \\\r\n        sed -e &quot;s/\\&quot;$2\\&quot;://&quot; | \\\r\n        tr -d &quot;\\n\\t&quot; | \\\r\n        sed -e &#39;s/\\\\&quot;/&quot;/g&#39; | \\\r\n        sed -e &#39;s/\\\\\\\\/\\\\/g&#39; | \\\r\n        sed -e &#39;s/^[ \\t]*//g&#39; | \\\r\n        sed -e &#39;s/^&quot;//&#39;  -e &#39;s/&quot;$//&#39;\r\n    }\r\n\r\n\r\n    parse_json &#39;{&quot;username&quot;:&quot;john, doe&quot;,&quot;email&quot;:&quot;john@doe.com&quot;}&#39; username\r\n    parse_json &#39;{&quot;username&quot;:&quot;john doe&quot;,&quot;email&quot;:&quot;john@doe.com&quot;}&#39; email\r\n\r\n    --- outputs ---\r\n\r\n    john, doe\r\n    johh@doe.com\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Linux_distribution\r\n  [2]: https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/26655887#answer-1955555\r\n\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/26655887#26655887","title":"Parsing JSON with Unix tools","body":"<p>This is using standard Unix tools available on most <a href=\"https://en.wikipedia.org/wiki/Linux_distribution\" rel=\"nofollow noreferrer\">distributions</a>. It also works well with backslashes (\\) and quotes (&quot;).</p>\n<p><em><strong>Warning</strong></em>: This doesn't come close to the power of <a href=\"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/26655887#answer-1955555\">jq</a> and will only work with very simple JSON objects. It's an attempt to answer to the original question and in situations where you can't install additional tools.</p>\n<pre><code>function parse_json()\n{\n    echo $1 | \\\n    sed -e 's/[{}]/''/g' | \\\n    sed -e 's/&quot;, &quot;/'\\&quot;,\\&quot;'/g' | \\\n    sed -e 's/&quot; ,&quot;/'\\&quot;,\\&quot;'/g' | \\\n    sed -e 's/&quot; , &quot;/'\\&quot;,\\&quot;'/g' | \\\n    sed -e 's/&quot;,&quot;/'\\&quot;---SEPERATOR---\\&quot;'/g' | \\\n    awk -F=':' -v RS='---SEPERATOR---' &quot;\\$1~/\\&quot;$2\\&quot;/ {print}&quot; | \\\n    sed -e &quot;s/\\&quot;$2\\&quot;://&quot; | \\\n    tr -d &quot;\\n\\t&quot; | \\\n    sed -e 's/\\\\&quot;/&quot;/g' | \\\n    sed -e 's/\\\\\\\\/\\\\/g' | \\\n    sed -e 's/^[ \\t]*//g' | \\\n    sed -e 's/^&quot;//'  -e 's/&quot;$//'\n}\n\n\nparse_json '{&quot;username&quot;:&quot;john, doe&quot;,&quot;email&quot;:&quot;john@doe.com&quot;}' username\nparse_json '{&quot;username&quot;:&quot;john doe&quot;,&quot;email&quot;:&quot;john@doe.com&quot;}' email\n\n--- outputs ---\n\njohn, doe\njohh@doe.com\n</code></pre>\n"},{"owner":{"reputation":1516,"accept_rate":94,"display_name":"Adam Kurkiewicz","link":"https://stackoverflow.com/users/2099631/adam-kurkiewicz"},"is_accepted":false,"score":4,"creation_date":1417715259,"answer_id":27300595,"question_id":1955505,"share_link":"https://stackoverflow.com/a/27300595","body_markdown":"A two-liner which uses Python. It works particularly well if you&#39;re writing a single .sh file and you don&#39;t want to depend on another .py file. It also leverages the usage of pipe `|`. `echo &quot;{\\&quot;field\\&quot;: \\&quot;value\\&quot;}&quot;` can be replaced by anything printing a JSON file to standard output.\r\n\r\n    echo &quot;{\\&quot;field\\&quot;: \\&quot;value\\&quot;}&quot; | python -c &#39;import sys, json\r\n    print(json.load(sys.stdin)[&quot;field&quot;])&#39;\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/27300595#27300595","title":"Parsing JSON with Unix tools","body":"<p>A two-liner which uses Python. It works particularly well if you're writing a single .sh file and you don't want to depend on another .py file. It also leverages the usage of pipe <code>|</code>. <code>echo &quot;{\\&quot;field\\&quot;: \\&quot;value\\&quot;}&quot;</code> can be replaced by anything printing a JSON file to standard output.</p>\n<pre><code>echo &quot;{\\&quot;field\\&quot;: \\&quot;value\\&quot;}&quot; | python -c 'import sys, json\nprint(json.load(sys.stdin)[&quot;field&quot;])'\n</code></pre>\n"},{"owner":{"reputation":2706,"display_name":"Max Barrass","link":"https://stackoverflow.com/users/2332337/max-barrass"},"is_accepted":false,"score":4,"creation_date":1432525550,"answer_id":30430917,"question_id":1955505,"share_link":"https://stackoverflow.com/a/30430917","body_markdown":"[Here is a good reference](http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_toc.html). In this case:\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; | sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | awk -v k=&quot;text&quot; &#39;{n=split($0,a,&quot;,&quot;); for (i=1; i&lt;=n; i++) { where = match(a[i], /\\&quot;text\\&quot;/); if(where) {print a[i]} }  }&#39;","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/30430917#30430917","title":"Parsing JSON with Unix tools","body":"<p><a href=\"http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_toc.html\" rel=\"nofollow\">Here is a good reference</a>. In this case:</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' | sed -e 's/[{}]/''/g' | awk -v k=\"text\" '{n=split($0,a,\",\"); for (i=1; i&lt;=n; i++) { where = match(a[i], /\\\"text\\\"/); if(where) {print a[i]} }  }'\n</code></pre>\n"},{"owner":{"reputation":16516,"accept_rate":29,"display_name":"cn007b","link":"https://stackoverflow.com/users/3612353/cn007b"},"is_accepted":false,"score":4,"creation_date":1447856647,"answer_id":33782551,"question_id":1955505,"share_link":"https://stackoverflow.com/a/33782551","body_markdown":"If you have the [PHP][1] interpreter installed:\r\n\r\n    php -r &#39;var_export(json_decode(`curl http://twitter.com/users/username.json`, 1));&#39;\r\n\r\nFor example:\r\n\r\nWe have a resource that provides JSON content with countries&#39; [ISO codes][2]: http://country.io/iso3.json and we can easily see it in a shell with curl:\r\n\r\n    curl http://country.io/iso3.json\r\n\r\nBut it looks not very convenient, and not readable. Better parse the JSON content and see a readable structure:\r\n\r\n    php -r &#39;var_export(json_decode(`curl http://country.io/iso3.json`, 1));&#39;\r\n\r\nThis code will print something like:\r\n\r\n    array (\r\n      &#39;BD&#39; =&gt; &#39;BGD&#39;,\r\n      &#39;BE&#39; =&gt; &#39;BEL&#39;,\r\n      &#39;BF&#39; =&gt; &#39;BFA&#39;,\r\n      &#39;BG&#39; =&gt; &#39;BGR&#39;,\r\n      &#39;BA&#39; =&gt; &#39;BIH&#39;,\r\n      &#39;BB&#39; =&gt; &#39;BRB&#39;,\r\n      &#39;WF&#39; =&gt; &#39;WLF&#39;,\r\n      &#39;BL&#39; =&gt; &#39;BLM&#39;,\r\n      ...\r\n\r\nIf you have nested arrays this output will looks much better...\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PHP\r\n  [2]: https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/33782551#33782551","title":"Parsing JSON with Unix tools","body":"<p>If you have the <a href=\"https://en.wikipedia.org/wiki/PHP\" rel=\"nofollow noreferrer\">PHP</a> interpreter installed:</p>\n<pre><code>php -r 'var_export(json_decode(`curl http://twitter.com/users/username.json`, 1));'\n</code></pre>\n<p>For example:</p>\n<p>We have a resource that provides JSON content with countries' <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" rel=\"nofollow noreferrer\">ISO codes</a>: <a href=\"http://country.io/iso3.json\" rel=\"nofollow noreferrer\">http://country.io/iso3.json</a> and we can easily see it in a shell with curl:</p>\n<pre><code>curl http://country.io/iso3.json\n</code></pre>\n<p>But it looks not very convenient, and not readable. Better parse the JSON content and see a readable structure:</p>\n<pre><code>php -r 'var_export(json_decode(`curl http://country.io/iso3.json`, 1));'\n</code></pre>\n<p>This code will print something like:</p>\n<pre><code>array (\n  'BD' =&gt; 'BGD',\n  'BE' =&gt; 'BEL',\n  'BF' =&gt; 'BFA',\n  'BG' =&gt; 'BGR',\n  'BA' =&gt; 'BIH',\n  'BB' =&gt; 'BRB',\n  'WF' =&gt; 'WLF',\n  'BL' =&gt; 'BLM',\n  ...\n</code></pre>\n<p>If you have nested arrays this output will looks much better...</p>\n"},{"owner":{"reputation":681,"display_name":"Ehsan Chavoshi","link":"https://stackoverflow.com/users/530553/ehsan-chavoshi"},"is_accepted":false,"score":2,"creation_date":1466585441,"answer_id":37963014,"question_id":1955505,"share_link":"https://stackoverflow.com/a/37963014","body_markdown":"I used this to extract the video duration from ffprobe JSON output:\r\n\r\n    MOVIE_INFO=`ffprobe &quot;path/to/movie.mp4&quot;  -show_streams -show_format -print_format json -v quiet`\r\n    MOVIE_SECONDS=`echo &quot;$MOVIE_INFO&quot;|grep -w \\&quot;duration\\&quot; |tail -1 | cut -d\\&quot; -f4 |cut -d \\. -f 1`\r\n\r\nIt can be used to extract a value from any JSON file:\r\n\r\n    value=`echo &quot;$jsondata&quot; | grep -w \\&quot;key_name\\&quot; |tail -1 | cut -d\\&quot; -f4\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/37963014#37963014","title":"Parsing JSON with Unix tools","body":"<p>I used this to extract the video duration from ffprobe JSON output:</p>\n<pre><code>MOVIE_INFO=`ffprobe &quot;path/to/movie.mp4&quot;  -show_streams -show_format -print_format json -v quiet`\nMOVIE_SECONDS=`echo &quot;$MOVIE_INFO&quot;|grep -w \\&quot;duration\\&quot; |tail -1 | cut -d\\&quot; -f4 |cut -d \\. -f 1`\n</code></pre>\n<p>It can be used to extract a value from any JSON file:</p>\n<pre><code>value=`echo &quot;$jsondata&quot; | grep -w \\&quot;key_name\\&quot; |tail -1 | cut -d\\&quot; -f4\n</code></pre>\n"},{"owner":{"reputation":41,"display_name":"Alexey Dubkov","link":"https://stackoverflow.com/users/2645064/alexey-dubkov"},"is_accepted":false,"score":3,"creation_date":1472272664,"answer_id":39177507,"question_id":1955505,"share_link":"https://stackoverflow.com/a/39177507","body_markdown":"If `pip` is avaiable on the system then:\r\n\r\n    $ pip install json-query\r\n\r\nExamples of usage:\r\n\r\n    $ curl -s http://0/file.json | json-query\r\n    {\r\n        &quot;key&quot;:&quot;value&quot;    \r\n    }\r\n\r\n    $ curl -s http://0/file.json | json-query my.key\r\n    value\r\n\r\n    $ curl -s http://0/file.json | json-query my.keys.\r\n    key_1\r\n    key_2\r\n    key_3\r\n\r\n    $ curl -s http://0/file.json | json-query my.keys.2\r\n    value_2","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/39177507#39177507","title":"Parsing JSON with Unix tools","body":"<p>If <code>pip</code> is avaiable on the system then:</p>\n\n<pre><code>$ pip install json-query\n</code></pre>\n\n<p>Examples of usage:</p>\n\n<pre><code>$ curl -s http://0/file.json | json-query\n{\n    \"key\":\"value\"    \n}\n\n$ curl -s http://0/file.json | json-query my.key\nvalue\n\n$ curl -s http://0/file.json | json-query my.keys.\nkey_1\nkey_2\nkey_3\n\n$ curl -s http://0/file.json | json-query my.keys.2\nvalue_2\n</code></pre>\n"},{"owner":{"reputation":11942,"accept_rate":50,"display_name":"Daniel Sokolowski","link":"https://stackoverflow.com/users/913223/daniel-sokolowski"},"is_accepted":false,"score":15,"creation_date":1479672225,"answer_id":40708779,"question_id":1955505,"share_link":"https://stackoverflow.com/a/40708779","body_markdown":"Unfortunately the top voted answer that uses `grep` returns the **full** match that didn&#39;t work in my scenario, but if you know the JSON format will remain constant you can use *lookbehind* and *lookahead* to extract just the desired values.\r\n\r\n\r\n    # echo &#39;{&quot;TotalPages&quot;:33,&quot;FooBar&quot;:&quot;he\\&quot;llo&quot;,&quot;anotherValue&quot;:100}&#39; | grep -Po &#39;(?&lt;=&quot;FooBar&quot;:&quot;)(.*?)(?=&quot;,)&#39;\r\n    he\\&quot;llo\r\n    # echo &#39;{&quot;TotalPages&quot;:33,&quot;FooBar&quot;:&quot;he\\&quot;llo&quot;,&quot;anotherValue&quot;:100}&#39; | grep -Po &#39;(?&lt;=&quot;TotalPages&quot;:)(.*?)(?=,)&#39;\r\n    33\r\n    #  echo &#39;{&quot;TotalPages&quot;:33,&quot;FooBar&quot;:&quot;he\\&quot;llo&quot;,&quot;anotherValue&quot;:100}&#39; | grep -Po &#39;(?&lt;=&quot;anotherValue&quot;:)(.*?)(?=})&#39;\r\n    100\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/40708779#40708779","title":"Parsing JSON with Unix tools","body":"<p>Unfortunately the top voted answer that uses <code>grep</code> returns the <strong>full</strong> match that didn't work in my scenario, but if you know the JSON format will remain constant you can use <em>lookbehind</em> and <em>lookahead</em> to extract just the desired values.</p>\n\n<pre><code># echo '{\"TotalPages\":33,\"FooBar\":\"he\\\"llo\",\"anotherValue\":100}' | grep -Po '(?&lt;=\"FooBar\":\")(.*?)(?=\",)'\nhe\\\"llo\n# echo '{\"TotalPages\":33,\"FooBar\":\"he\\\"llo\",\"anotherValue\":100}' | grep -Po '(?&lt;=\"TotalPages\":)(.*?)(?=,)'\n33\n#  echo '{\"TotalPages\":33,\"FooBar\":\"he\\\"llo\",\"anotherValue\":100}' | grep -Po '(?&lt;=\"anotherValue\":)(.*?)(?=})'\n100\n</code></pre>\n"},{"owner":{"reputation":2033,"accept_rate":0,"display_name":"user2233949","link":"https://stackoverflow.com/users/2233949/user2233949"},"is_accepted":false,"score":9,"creation_date":1490013112,"answer_id":42903698,"question_id":1955505,"share_link":"https://stackoverflow.com/a/42903698","body_markdown":"Now that [PowerShell][1] is cross platform, I thought I&#39;d throw its way out there, since I find it to be fairly intuitive and extremely simple.\r\n\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | ConvertFrom-Json\r\n\r\n[ConvertFrom-Json][2] converts the JSON into a PowerShell custom object, so you can easily work with the properties from that point forward.  If you only wanted the &#39;id&#39; property for example, you&#39;d just do this:\r\n\r\n    curl -s &#39;https://api.github.com/users/lambda&#39; | ConvertFrom-Json | select -ExpandProperty id\r\n\r\nIf you wanted to invoke the whole thing from within Bash, then you&#39;d have to call it like this:\r\n\r\n    powershell &#39;curl -s &quot;https://api.github.com/users/lambda&quot; | ConvertFrom-Json&#39;\r\n\r\nOf course, there&#39;s a pure PowerShell way to do it without curl, which would be:\r\n\r\n    Invoke-WebRequest &#39;https://api.github.com/users/lambda&#39; | select -ExpandProperty Content | ConvertFrom-Json\r\n\r\nFinally, there&#39;s also [ConvertTo-Json][3] which converts a custom object to JSON just as easily.  Here&#39;s an example:\r\n\r\n    (New-Object PsObject -Property @{ Name = &quot;Tester&quot;; SomeList = @(&#39;one&#39;,&#39;two&#39;,&#39;three&#39;)}) | ConvertTo-Json\r\n\r\nWhich would produce nice JSON like this:\r\n\r\n    {\r\n    &quot;Name&quot;:  &quot;Tester&quot;,\r\n    &quot;SomeList&quot;:  [\r\n                     &quot;one&quot;,\r\n                     &quot;two&quot;,\r\n                     &quot;three&quot;\r\n                 ]\r\n}\r\n\r\nAdmittedly, using a Windows shell on Unix is somewhat sacrilegious, but PowerShell is really good at some things, and parsing JSON and XML are a couple of them.  This is the GitHub page for the cross platform version: *[PowerShell][4]*\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PowerShell\r\n  [2]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-json\r\n  [3]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json\r\n  [4]: https://github.com/PowerShell/PowerShell\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/42903698#42903698","title":"Parsing JSON with Unix tools","body":"<p>Now that <a href=\"https://en.wikipedia.org/wiki/PowerShell\" rel=\"nofollow noreferrer\">PowerShell</a> is cross platform, I thought I'd throw its way out there, since I find it to be fairly intuitive and extremely simple.</p>\n<pre><code>curl -s 'https://api.github.com/users/lambda' | ConvertFrom-Json\n</code></pre>\n<p><a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-json\" rel=\"nofollow noreferrer\">ConvertFrom-Json</a> converts the JSON into a PowerShell custom object, so you can easily work with the properties from that point forward.  If you only wanted the 'id' property for example, you'd just do this:</p>\n<pre><code>curl -s 'https://api.github.com/users/lambda' | ConvertFrom-Json | select -ExpandProperty id\n</code></pre>\n<p>If you wanted to invoke the whole thing from within Bash, then you'd have to call it like this:</p>\n<pre><code>powershell 'curl -s &quot;https://api.github.com/users/lambda&quot; | ConvertFrom-Json'\n</code></pre>\n<p>Of course, there's a pure PowerShell way to do it without curl, which would be:</p>\n<pre><code>Invoke-WebRequest 'https://api.github.com/users/lambda' | select -ExpandProperty Content | ConvertFrom-Json\n</code></pre>\n<p>Finally, there's also <a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json\" rel=\"nofollow noreferrer\">ConvertTo-Json</a> which converts a custom object to JSON just as easily.  Here's an example:</p>\n<pre><code>(New-Object PsObject -Property @{ Name = &quot;Tester&quot;; SomeList = @('one','two','three')}) | ConvertTo-Json\n</code></pre>\n<p>Which would produce nice JSON like this:</p>\n<pre><code>{\n&quot;Name&quot;:  &quot;Tester&quot;,\n&quot;SomeList&quot;:  [\n                 &quot;one&quot;,\n                 &quot;two&quot;,\n                 &quot;three&quot;\n             ]\n</code></pre>\n<p>}</p>\n<p>Admittedly, using a Windows shell on Unix is somewhat sacrilegious, but PowerShell is really good at some things, and parsing JSON and XML are a couple of them.  This is the GitHub page for the cross platform version: <em><a href=\"https://github.com/PowerShell/PowerShell\" rel=\"nofollow noreferrer\">PowerShell</a></em></p>\n"},{"owner":{"reputation":21140,"display_name":"Stephen Quan","link":"https://stackoverflow.com/users/881441/stephen-quan"},"is_accepted":false,"score":12,"creation_date":1493191823,"answer_id":43627697,"question_id":1955505,"share_link":"https://stackoverflow.com/a/43627697","body_markdown":"This is yet another Bash and Python hybrid answer. I posted this answer, because I wanted to process more complex JSON output, but, reducing the complexity of my bash application. I want to crack open the following JSON object from http://www.arcgis.com/sharing/rest/info?f=json in Bash:\r\n\r\n&lt;!-- language: javascript --&gt;\r\n\r\n    {\r\n      &quot;owningSystemUrl&quot;: &quot;http://www.arcgis.com&quot;,\r\n      &quot;authInfo&quot;: {\r\n        &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\r\n        &quot;isTokenBasedSecurity&quot;: true\r\n      }\r\n    }\r\n\r\nIn the following example, I created my own implementation of `jq` and `unquote` leveraging Python. You&#39;ll note that once we import the Python object from `json` to a Python dictionary we can use Python syntax to navigate the dictionary. To navigate the above, the syntax is:\r\n\r\n - `data`\r\n - `data[ &quot;authInfo&quot; ]`\r\n - `data[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]`\r\n\r\nBy using magic in Bash, we omit `data` and only supply the Python text to the right of data, i.e.\r\n\r\n - `jq`\r\n - `jq &#39;[ &quot;authInfo&quot; ]&#39;`\r\n - `jq &#39;[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]&#39;`\r\n\r\nNote, with no parameters, jq acts as a JSON prettifier. With parameters, we can use Python syntax to extract anything we want from the dictionary including navigating subdictionaries and array elements.\r\n\r\nHere are the Bash Python hybrid functions:\r\n\r\n&lt;!-- language: bash --&gt;\r\n\r\n    #!/bin/bash -xe\r\n\r\n    jq_py() {\r\n      cat &lt;&lt;EOF\r\n    import json, sys\r\n    data = json.load( sys.stdin )\r\n    print( json.dumps( data$1, indent = 4 ) )\r\n    EOF\r\n    }\r\n\r\n    jq() {\r\n      python -c &quot;$( jq_py &quot;$1&quot; )&quot;\r\n    }\r\n\r\n    unquote_py() {\r\n      cat &lt;&lt;EOF\r\n    import json,sys\r\n    print( json.load( sys.stdin ) )\r\n    EOF\r\n    }\r\n\r\n    unquote() {\r\n      python -c &quot;$( unquote_py )&quot;\r\n    }\r\n\r\nHere&#39;s a sample usage of the Bash Python functions:\r\n\r\n    curl http://www.arcgis.com/sharing/rest/info?f=json | tee arcgis.json\r\n    # {&quot;owningSystemUrl&quot;:&quot;https://www.arcgis.com&quot;,&quot;authInfo&quot;:{&quot;tokenServicesUrl&quot;:&quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,&quot;isTokenBasedSecurity&quot;:true}}\r\n\r\n    cat arcgis.json | jq\r\n    # {\r\n    #     &quot;owningSystemUrl&quot;: &quot;https://www.arcgis.com&quot;,\r\n    #     &quot;authInfo&quot;: {\r\n    #         &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\r\n    #         &quot;isTokenBasedSecurity&quot;: true\r\n    #     }\r\n    # }\r\n\r\n    cat arcgis.json | jq &#39;[ &quot;authInfo&quot; ]&#39;\r\n    # {\r\n    #     &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\r\n    #     &quot;isTokenBasedSecurity&quot;: true\r\n    # }\r\n\r\n    cat arcgis.json | jq &#39;[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]&#39;\r\n    # &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;\r\n\r\n    cat arcgis.json | jq &#39;[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]&#39; | unquote\r\n    # https://www.arcgis.com/sharing/rest/generateToken\r\n\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/43627697#43627697","title":"Parsing JSON with Unix tools","body":"<p>This is yet another Bash and Python hybrid answer. I posted this answer, because I wanted to process more complex JSON output, but, reducing the complexity of my bash application. I want to crack open the following JSON object from <a href=\"http://www.arcgis.com/sharing/rest/info?f=json\" rel=\"nofollow noreferrer\">http://www.arcgis.com/sharing/rest/info?f=json</a> in Bash:</p>\n<pre class=\"lang-js prettyprint-override\"><code>{\n  &quot;owningSystemUrl&quot;: &quot;http://www.arcgis.com&quot;,\n  &quot;authInfo&quot;: {\n    &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\n    &quot;isTokenBasedSecurity&quot;: true\n  }\n}\n</code></pre>\n<p>In the following example, I created my own implementation of <code>jq</code> and <code>unquote</code> leveraging Python. You'll note that once we import the Python object from <code>json</code> to a Python dictionary we can use Python syntax to navigate the dictionary. To navigate the above, the syntax is:</p>\n<ul>\n<li><code>data</code></li>\n<li><code>data[ &quot;authInfo&quot; ]</code></li>\n<li><code>data[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]</code></li>\n</ul>\n<p>By using magic in Bash, we omit <code>data</code> and only supply the Python text to the right of data, i.e.</p>\n<ul>\n<li><code>jq</code></li>\n<li><code>jq '[ &quot;authInfo&quot; ]'</code></li>\n<li><code>jq '[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]'</code></li>\n</ul>\n<p>Note, with no parameters, jq acts as a JSON prettifier. With parameters, we can use Python syntax to extract anything we want from the dictionary including navigating subdictionaries and array elements.</p>\n<p>Here are the Bash Python hybrid functions:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/bash -xe\n\njq_py() {\n  cat &lt;&lt;EOF\nimport json, sys\ndata = json.load( sys.stdin )\nprint( json.dumps( data$1, indent = 4 ) )\nEOF\n}\n\njq() {\n  python -c &quot;$( jq_py &quot;$1&quot; )&quot;\n}\n\nunquote_py() {\n  cat &lt;&lt;EOF\nimport json,sys\nprint( json.load( sys.stdin ) )\nEOF\n}\n\nunquote() {\n  python -c &quot;$( unquote_py )&quot;\n}\n</code></pre>\n<p>Here's a sample usage of the Bash Python functions:</p>\n<pre><code>curl http://www.arcgis.com/sharing/rest/info?f=json | tee arcgis.json\n# {&quot;owningSystemUrl&quot;:&quot;https://www.arcgis.com&quot;,&quot;authInfo&quot;:{&quot;tokenServicesUrl&quot;:&quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,&quot;isTokenBasedSecurity&quot;:true}}\n\ncat arcgis.json | jq\n# {\n#     &quot;owningSystemUrl&quot;: &quot;https://www.arcgis.com&quot;,\n#     &quot;authInfo&quot;: {\n#         &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\n#         &quot;isTokenBasedSecurity&quot;: true\n#     }\n# }\n\ncat arcgis.json | jq '[ &quot;authInfo&quot; ]'\n# {\n#     &quot;tokenServicesUrl&quot;: &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;,\n#     &quot;isTokenBasedSecurity&quot;: true\n# }\n\ncat arcgis.json | jq '[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]'\n# &quot;https://www.arcgis.com/sharing/rest/generateToken&quot;\n\ncat arcgis.json | jq '[ &quot;authInfo&quot; ][ &quot;tokenServicesUrl&quot; ]' | unquote\n# https://www.arcgis.com/sharing/rest/generateToken\n</code></pre>\n"},{"owner":{"reputation":5512,"display_name":"Helder Pereira","link":"https://stackoverflow.com/users/5180989/helder-pereira"},"is_accepted":false,"score":18,"creation_date":1505918012,"answer_id":46324904,"question_id":1955505,"share_link":"https://stackoverflow.com/a/46324904","body_markdown":"If someone just wants to extract values from simple JSON objects without the need for nested structures, it is possible to use regular expressions without even leaving Bash.\r\n\r\nHere is a function I defined using bash regular expressions based on the [JSON standard][1]:\r\n\r\n    function json_extract() {\r\n      local key=$1\r\n      local json=$2\r\n\r\n      local string_regex=&#39;&quot;([^&quot;\\]|\\\\.)*&quot;&#39;\r\n      local number_regex=&#39;-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?&#39;\r\n      local value_regex=&quot;${string_regex}|${number_regex}|true|false|null&quot;\r\n      local pair_regex=&quot;\\&quot;${key}\\&quot;[[:space:]]*:[[:space:]]*(${value_regex})&quot;\r\n\r\n      if [[ ${json} =~ ${pair_regex} ]]; then\r\n        echo $(sed &#39;s/^&quot;\\|&quot;$//g&#39; &lt;&lt;&lt; &quot;${BASH_REMATCH[1]}&quot;)\r\n      else\r\n        return 1\r\n      fi\r\n    }\r\n\r\nCaveats: objects and arrays are not supported as values, but all other value types defined in the standard are supported. Also, a pair will be matched no matter how deep in the JSON document it is as long as it has exactly the same key name.\r\n\r\nUsing the OP&#39;s example:\r\n\r\n    $ json_extract text &quot;$(curl &#39;http://twitter.com/users/username.json&#39;)&quot;\r\n    My status\r\n\r\n    $ json_extract friends_count &quot;$(curl &#39;http://twitter.com/users/username.json&#39;)&quot;\r\n    245\r\n\r\n  [1]: http://www.json.org/\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/46324904#46324904","title":"Parsing JSON with Unix tools","body":"<p>If someone just wants to extract values from simple JSON objects without the need for nested structures, it is possible to use regular expressions without even leaving Bash.</p>\n<p>Here is a function I defined using bash regular expressions based on the <a href=\"http://www.json.org/\" rel=\"nofollow noreferrer\">JSON standard</a>:</p>\n<pre><code>function json_extract() {\n  local key=$1\n  local json=$2\n\n  local string_regex='&quot;([^&quot;\\]|\\\\.)*&quot;'\n  local number_regex='-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?'\n  local value_regex=&quot;${string_regex}|${number_regex}|true|false|null&quot;\n  local pair_regex=&quot;\\&quot;${key}\\&quot;[[:space:]]*:[[:space:]]*(${value_regex})&quot;\n\n  if [[ ${json} =~ ${pair_regex} ]]; then\n    echo $(sed 's/^&quot;\\|&quot;$//g' &lt;&lt;&lt; &quot;${BASH_REMATCH[1]}&quot;)\n  else\n    return 1\n  fi\n}\n</code></pre>\n<p>Caveats: objects and arrays are not supported as values, but all other value types defined in the standard are supported. Also, a pair will be matched no matter how deep in the JSON document it is as long as it has exactly the same key name.</p>\n<p>Using the OP's example:</p>\n<pre><code>$ json_extract text &quot;$(curl 'http://twitter.com/users/username.json')&quot;\nMy status\n\n$ json_extract friends_count &quot;$(curl 'http://twitter.com/users/username.json')&quot;\n245\n</code></pre>\n"},{"owner":{"reputation":90009,"accept_rate":54,"display_name":"Alexander Mills","link":"https://stackoverflow.com/users/1223975/alexander-mills"},"is_accepted":false,"score":11,"creation_date":1510380597,"answer_id":47234961,"question_id":1955505,"share_link":"https://stackoverflow.com/a/47234961","body_markdown":"There is an easier way to get a property from a JSON string. Using a `package.json` file as an example, try this:\r\n\r\n    #!/usr/bin/env bash\r\n    my_val=&quot;$(json=$(&lt;package.json) node -pe &quot;JSON.parse(process.env.json)[&#39;version&#39;]&quot;)&quot;\r\n\r\nWe&#39;re using `process.env`, because this gets the file&#39;s contents into Node.js as a string without any risk of malicious contents escaping their quoting and being parsed as code.\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/47234961#47234961","title":"Parsing JSON with Unix tools","body":"<p>There is an easier way to get a property from a JSON string. Using a <code>package.json</code> file as an example, try this:</p>\n<pre><code>#!/usr/bin/env bash\nmy_val=&quot;$(json=$(&lt;package.json) node -pe &quot;JSON.parse(process.env.json)['version']&quot;)&quot;\n</code></pre>\n<p>We're using <code>process.env</code>, because this gets the file's contents into Node.js as a string without any risk of malicious contents escaping their quoting and being parsed as code.</p>\n"},{"owner":{"reputation":3333,"accept_rate":79,"display_name":"Anton Medvedev","link":"https://stackoverflow.com/users/905486/anton-medvedev"},"is_accepted":false,"score":4,"creation_date":1516902664,"answer_id":48449061,"question_id":1955505,"share_link":"https://stackoverflow.com/a/48449061","body_markdown":"There is also a very simple, but powerful, JSON CLI processing tool, [fx][1].\r\n\r\n[![Example of JSON formatting in Bash terminal][2]][2]\r\n\r\n### Examples\r\n\r\nUse an anonymous function:\r\n\r\n    echo &#39;{&quot;key&quot;: &quot;value&quot;}&#39; | fx &quot;x =&gt; x.key&quot;\r\n\r\nOutput:\r\n\r\n    value\r\n\r\nIf you don&#39;t pass anonymous function parameter &amp;rarr; ..., code will be automatically transformed into an anonymous function. And you can get access to JSON by this keyword:\r\n\r\n    $ echo &#39;[1,2,3]&#39; | fx &quot;this.map(x =&gt; x * 2)&quot;\r\n    [2, 4, 6]\r\n\r\nOr just use dot syntax too:\r\n\r\n    echo &#39;{&quot;items&quot;: {&quot;one&quot;: 1}}&#39; | fx .items.one\r\n\r\nOutput:\r\n\r\n    1\r\n\r\nYou can pass any number of anonymous functions for reducing JSON:\r\n\r\n    echo &#39;{&quot;items&quot;: [&quot;one&quot;, &quot;two&quot;]}&#39; | fx &quot;this.items&quot; &quot;this[1]&quot;\r\n\r\nOutput:\r\n\r\n    two\r\n\r\nYou can update existing JSON using spread operator:\r\n\r\n    echo &#39;{&quot;count&quot;: 0}&#39; | fx &quot;{...this, count: 1}&quot;\r\n\r\nOutput:\r\n\r\n    {&quot;count&quot;: 1}\r\n\r\n**Just plain JavaScript**. There isn&#39;t any need to learn new syntax.\r\n\r\n----------\r\n\r\nLater version of fx has an interactive mode! -\r\n\r\n&lt;img src=&quot;https://i.stack.imgur.com/fplnB.gif&quot; width=&quot;530&quot;&gt;\r\n\r\n  [1]: https://github.com/antonmedv/fx\r\n  [2]: https://i.stack.imgur.com/OE1cE.png\r\n\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/48449061#48449061","title":"Parsing JSON with Unix tools","body":"<p>There is also a very simple, but powerful, JSON CLI processing tool, <a href=\"https://github.com/antonmedv/fx\" rel=\"nofollow noreferrer\">fx</a>.</p>\n<p><a href=\"https://i.stack.imgur.com/OE1cE.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/OE1cE.png\" alt=\"Example of JSON formatting in Bash terminal\" /></a></p>\n<h3>Examples</h3>\n<p>Use an anonymous function:</p>\n<pre><code>echo '{&quot;key&quot;: &quot;value&quot;}' | fx &quot;x =&gt; x.key&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>value\n</code></pre>\n<p>If you don't pass anonymous function parameter → ..., code will be automatically transformed into an anonymous function. And you can get access to JSON by this keyword:</p>\n<pre><code>$ echo '[1,2,3]' | fx &quot;this.map(x =&gt; x * 2)&quot;\n[2, 4, 6]\n</code></pre>\n<p>Or just use dot syntax too:</p>\n<pre><code>echo '{&quot;items&quot;: {&quot;one&quot;: 1}}' | fx .items.one\n</code></pre>\n<p>Output:</p>\n<pre><code>1\n</code></pre>\n<p>You can pass any number of anonymous functions for reducing JSON:</p>\n<pre><code>echo '{&quot;items&quot;: [&quot;one&quot;, &quot;two&quot;]}' | fx &quot;this.items&quot; &quot;this[1]&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>two\n</code></pre>\n<p>You can update existing JSON using spread operator:</p>\n<pre><code>echo '{&quot;count&quot;: 0}' | fx &quot;{...this, count: 1}&quot;\n</code></pre>\n<p>Output:</p>\n<pre><code>{&quot;count&quot;: 1}\n</code></pre>\n<p><strong>Just plain JavaScript</strong>. There isn't any need to learn new syntax.</p>\n<hr />\n<p>Later version of fx has an interactive mode! -</p>\n<img src=\"https://i.stack.imgur.com/fplnB.gif\" width=\"530\">\n"},{"owner":{"reputation":127,"display_name":"Herve","link":"https://stackoverflow.com/users/1315435/herve"},"is_accepted":false,"score":0,"creation_date":1518449852,"answer_id":48750064,"question_id":1955505,"share_link":"https://stackoverflow.com/a/48750064","body_markdown":"[Niet][1] is a tool that helps you to extract data from a JSON or [YAML][2] file directly in your shell or Bash CLI.\r\n\r\n    pip install niet\r\n\r\nConsider a JSON file named *project.json* with the following contents:\r\n\r\n    {\r\n      project: {\r\n        meta: {\r\n          name: project-sample\r\n        }\r\n    }\r\n\r\nYou can use Niet like this:\r\n\r\n    PROJECT_NAME=$(niet project.json project.meta.name)\r\n    echo ${PROJECT_NAME}\r\n\r\nOutput:\r\n\r\n    project-sample\r\n\r\n  [1]: https://github.com/gr0und-s3ct0r/niet/\r\n  [2]: https://en.wikipedia.org/wiki/YAML\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/48750064#48750064","title":"Parsing JSON with Unix tools","body":"<p><a href=\"https://github.com/gr0und-s3ct0r/niet/\" rel=\"nofollow noreferrer\">Niet</a> is a tool that helps you to extract data from a JSON or <a href=\"https://en.wikipedia.org/wiki/YAML\" rel=\"nofollow noreferrer\">YAML</a> file directly in your shell or Bash CLI.</p>\n<pre><code>pip install niet\n</code></pre>\n<p>Consider a JSON file named <em>project.json</em> with the following contents:</p>\n<pre><code>{\n  project: {\n    meta: {\n      name: project-sample\n    }\n}\n</code></pre>\n<p>You can use Niet like this:</p>\n<pre><code>PROJECT_NAME=$(niet project.json project.meta.name)\necho ${PROJECT_NAME}\n</code></pre>\n<p>Output:</p>\n<pre><code>project-sample\n</code></pre>\n"},{"owner":{"reputation":1051,"display_name":"Anand Singh","link":"https://stackoverflow.com/users/2734348/anand-singh"},"is_accepted":false,"score":1,"creation_date":1534161628,"answer_id":51821898,"question_id":1955505,"share_link":"https://stackoverflow.com/a/51821898","body_markdown":"You can use [bashJson][1]\r\n\r\nIt’s a wrapper for the Python&#39;s JSON module and can handle complex JSON data.\r\n\r\nLet&#39;s consider this exmaple JSON data from the file `test.json`\r\n\r\n    {\r\n    \t&quot;name&quot;:&quot;Test tool&quot;,\r\n    \t&quot;author&quot;:&quot;hack4mer&quot;,\r\n    \t&quot;supported_os&quot;:{\r\n    \t\t&quot;osx&quot;:{\r\n    \t\t    &quot;foo&quot;:&quot;bar&quot;,\r\n    \t\t    &quot;min_version&quot; : 10.12,\r\n    \t\t    &quot;tested_on&quot; : [10.1,10.13]\r\n    \t\t},\r\n    \t\t&quot;ubuntu&quot;:{\r\n    \t\t\t&quot;min_version&quot;:14.04,\r\n    \t\t\t&quot;tested_on&quot; : 16.04\r\n    \t\t}\r\n    \t}\r\n    }\r\n\r\n\r\nFollowing commands read data from this example JSON file\r\n\r\n    ./bashjson.sh test.json name\r\n\r\nPrints: Test Tool\r\n\r\n    ./bashjson.sh test.json supported_os osx foo\r\n\r\nPrints: bar\r\n\r\n    ./bashjson.sh test.json supported_os osx tested_on\r\n\r\nPrints: [10.1,10.13]\r\n\r\n  [1]: https://github.com/hack4mer/bashjson\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/51821898#51821898","title":"Parsing JSON with Unix tools","body":"<p>You can use <a href=\"https://github.com/hack4mer/bashjson\" rel=\"nofollow noreferrer\">bashJson</a></p>\n\n<p>It’s a wrapper for the Python's JSON module and can handle complex JSON data.</p>\n\n<p>Let's consider this exmaple JSON data from the file <code>test.json</code></p>\n\n<pre><code>{\n    \"name\":\"Test tool\",\n    \"author\":\"hack4mer\",\n    \"supported_os\":{\n        \"osx\":{\n            \"foo\":\"bar\",\n            \"min_version\" : 10.12,\n            \"tested_on\" : [10.1,10.13]\n        },\n        \"ubuntu\":{\n            \"min_version\":14.04,\n            \"tested_on\" : 16.04\n        }\n    }\n}\n</code></pre>\n\n<p>Following commands read data from this example JSON file</p>\n\n<pre><code>./bashjson.sh test.json name\n</code></pre>\n\n<p>Prints: Test Tool</p>\n\n<pre><code>./bashjson.sh test.json supported_os osx foo\n</code></pre>\n\n<p>Prints: bar</p>\n\n<pre><code>./bashjson.sh test.json supported_os osx tested_on\n</code></pre>\n\n<p>Prints: [10.1,10.13]</p>\n"},{"owner":{"reputation":125,"display_name":"Pila","link":"https://stackoverflow.com/users/9901844/pila"},"is_accepted":false,"score":9,"creation_date":1539868890,"answer_id":52875055,"question_id":1955505,"share_link":"https://stackoverflow.com/a/52875055","body_markdown":"I can not use any of the answers here. Neither jq, shell arrays, declare, *grep -P*, lookbehind, lookahead, Python, Perl, Ruby, or even Bash, is available.\r\n\r\nThe remaining answers simply do not work well. JavaScript sounded familiar, but the tin says Nescaffe - so it is a no go, too :) Even if available, for my simple needs - they would be overkill and slow.\r\n\r\nYet, it is extremely important for me to get many variables from the JSON formatted reply of my modem. I am doing it in [Bourne shell][1] (`sh`) with a very trimmed down [BusyBox][2] at my routers! There aren&#39;t any problems using [AWK][3] alone: just set delimiters and read the data. For a single variable, that is all!\r\n\r\n    awk &#39;BEGIN { FS=&quot;\\&quot;&quot;; RS=&quot;,&quot; }; { if ($2 == &quot;login&quot;) {print $4} }&#39; test.json\r\n\r\nRemember I don&#39;t have any arrays? I had to assign within the AWK parsed data to the 11 variables which I need in a shell script. Wherever I looked, that was said to be an impossible mission. No problem with that, either.\r\n\r\nMy solution is simple. This code will:\r\n\r\n1) parse .json file from the question (actually, I have borrowed a working data sample from the most upvoted answer) and picked out the quoted data, plus\r\n2) create shell variables from within the awk assigning free named shell variable names.\r\n\r\n    eval $( curl -s &#39;https://api.github.com/users/lambda&#39; |\r\n    awk &#39; BEGIN { FS=&quot;\\&quot;&quot;; RS=&quot;,&quot; };\r\n    {\r\n        if ($2 == &quot;login&quot;) { print &quot;Login=\\&quot;&quot;$4&quot;\\&quot;&quot; }\r\n        if ($2 == &quot;name&quot;) { print &quot;Name=\\&quot;&quot;$4&quot;\\&quot;&quot; }\r\n        if ($2 == &quot;updated_at&quot;) { print &quot;Updated=\\&quot;&quot;$4&quot;\\&quot;&quot; }\r\n    }&#39; )\r\n    echo &quot;$Login, $Name, $Updated&quot;\r\n\r\nThere aren&#39;t any problems with blanks within. In my use, the same command parses a long single line output. As *eval* is used, this solution is suited for trusted data only.\r\n\r\nIt is simple to adapt it to pickup unquoted data. For a huge number of variables, a marginal speed gain can be achieved using *else if*. Lack of arrays obviously means: no multiple records without extra fiddling. But where arrays are available, adapting this solution is a simple task.\r\n\r\n@maikel&#39;s sed answer almost works (but I can not comment on it). For my nicely formatted data - it works. Not so much with the example used here (missing quotes throw it off). It is complicated and difficult to modify. Plus, I do not like having to make 11 calls to extract 11 variables. Why? I timed 100 loops extracting 9 variables: the sed function took 48.99 seconds and my solution took 0.91 second! Not fair? Doing just a single extraction of 9 variables: 0.51 vs. 0.02 second.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Bourne_shell\r\n  [2]: https://en.wikipedia.org/wiki/BusyBox\r\n  [3]: https://en.wikipedia.org/wiki/AWK\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/52875055#52875055","title":"Parsing JSON with Unix tools","body":"<p>I can not use any of the answers here. Neither jq, shell arrays, declare, <em>grep -P</em>, lookbehind, lookahead, Python, Perl, Ruby, or even Bash, is available.</p>\n<p>The remaining answers simply do not work well. JavaScript sounded familiar, but the tin says Nescaffe - so it is a no go, too :) Even if available, for my simple needs - they would be overkill and slow.</p>\n<p>Yet, it is extremely important for me to get many variables from the JSON formatted reply of my modem. I am doing it in <a href=\"https://en.wikipedia.org/wiki/Bourne_shell\" rel=\"nofollow noreferrer\">Bourne shell</a> (<code>sh</code>) with a very trimmed down <a href=\"https://en.wikipedia.org/wiki/BusyBox\" rel=\"nofollow noreferrer\">BusyBox</a> at my routers! There aren't any problems using <a href=\"https://en.wikipedia.org/wiki/AWK\" rel=\"nofollow noreferrer\">AWK</a> alone: just set delimiters and read the data. For a single variable, that is all!</p>\n<pre><code>awk 'BEGIN { FS=&quot;\\&quot;&quot;; RS=&quot;,&quot; }; { if ($2 == &quot;login&quot;) {print $4} }' test.json\n</code></pre>\n<p>Remember I don't have any arrays? I had to assign within the AWK parsed data to the 11 variables which I need in a shell script. Wherever I looked, that was said to be an impossible mission. No problem with that, either.</p>\n<p>My solution is simple. This code will:</p>\n<ol>\n<li><p>parse .json file from the question (actually, I have borrowed a working data sample from the most upvoted answer) and picked out the quoted data, plus</p>\n</li>\n<li><p>create shell variables from within the awk assigning free named shell variable names.</p>\n<p>eval $( curl -s 'https://api.github.com/users/lambda' |\nawk ' BEGIN { FS=&quot;&quot;&quot;; RS=&quot;,&quot; };\n{\nif ($2 == &quot;login&quot;) { print &quot;Login=&quot;&quot;$4&quot;&quot;&quot; }\nif ($2 == &quot;name&quot;) { print &quot;Name=&quot;&quot;$4&quot;&quot;&quot; }\nif ($2 == &quot;updated_at&quot;) { print &quot;Updated=&quot;&quot;$4&quot;&quot;&quot; }\n}' )\necho &quot;$Login, $Name, $Updated&quot;</p>\n</li>\n</ol>\n<p>There aren't any problems with blanks within. In my use, the same command parses a long single line output. As <em>eval</em> is used, this solution is suited for trusted data only.</p>\n<p>It is simple to adapt it to pickup unquoted data. For a huge number of variables, a marginal speed gain can be achieved using <em>else if</em>. Lack of arrays obviously means: no multiple records without extra fiddling. But where arrays are available, adapting this solution is a simple task.</p>\n<p>@maikel's sed answer almost works (but I can not comment on it). For my nicely formatted data - it works. Not so much with the example used here (missing quotes throw it off). It is complicated and difficult to modify. Plus, I do not like having to make 11 calls to extract 11 variables. Why? I timed 100 loops extracting 9 variables: the sed function took 48.99 seconds and my solution took 0.91 second! Not fair? Doing just a single extraction of 9 variables: 0.51 vs. 0.02 second.</p>\n"},{"owner":{"reputation":2409,"accept_rate":88,"display_name":"Mike","link":"https://stackoverflow.com/users/370746/mike"},"is_accepted":false,"score":4,"creation_date":1553524627,"answer_id":55340267,"question_id":1955505,"share_link":"https://stackoverflow.com/a/55340267","body_markdown":"I needed something in Bash that was short and would run without dependencies beyond vanilla [Linux LSB][1] and Mac OS for both Python&amp;nbsp;2.7 &amp; 3 and handle errors, e.g. would report JSON parse errors and missing property errors without spewing Python exceptions:\r\n\r\n    json-extract () {\r\n      if [[ &quot;$1&quot; == &quot;&quot; || &quot;$1&quot; == &quot;-h&quot; || &quot;$1&quot; == &quot;-?&quot; || &quot;$1&quot; == &quot;--help&quot; ]] ; then\r\n        echo &#39;Extract top level property value from json document&#39;\r\n        echo &#39;  Usage: json-extract &lt;property&gt; [ &lt;file-path&gt; ]&#39;\r\n        echo &#39;  Example 1: json-extract status /tmp/response.json&#39;\r\n        echo &#39;  Example 2: echo $JSON_STRING | json-extract status&#39;\r\n        echo &#39;  Status codes: 0 - success, 1 - json parse error, 2 - property missing&#39;\r\n      else\r\n        python -c $&#39;import sys, json;\\ntry: obj = json.load(open(sys.argv[2])); \\nexcept: sys.exit(1)\\ntry: print(obj[sys.argv[1]])\\nexcept: sys.exit(2)&#39; &quot;$1&quot; &quot;${2:-/dev/stdin}&quot;\r\n      fi\r\n    }\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Linux_Standard_Base\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/55340267#55340267","title":"Parsing JSON with Unix tools","body":"<p>I needed something in Bash that was short and would run without dependencies beyond vanilla <a href=\"https://en.wikipedia.org/wiki/Linux_Standard_Base\" rel=\"nofollow noreferrer\">Linux LSB</a> and Mac OS for both Python 2.7 &amp; 3 and handle errors, e.g. would report JSON parse errors and missing property errors without spewing Python exceptions:</p>\n<pre><code>json-extract () {\n  if [[ &quot;$1&quot; == &quot;&quot; || &quot;$1&quot; == &quot;-h&quot; || &quot;$1&quot; == &quot;-?&quot; || &quot;$1&quot; == &quot;--help&quot; ]] ; then\n    echo 'Extract top level property value from json document'\n    echo '  Usage: json-extract &lt;property&gt; [ &lt;file-path&gt; ]'\n    echo '  Example 1: json-extract status /tmp/response.json'\n    echo '  Example 2: echo $JSON_STRING | json-extract status'\n    echo '  Status codes: 0 - success, 1 - json parse error, 2 - property missing'\n  else\n    python -c $'import sys, json;\\ntry: obj = json.load(open(sys.argv[2])); \\nexcept: sys.exit(1)\\ntry: print(obj[sys.argv[1]])\\nexcept: sys.exit(2)' &quot;$1&quot; &quot;${2:-/dev/stdin}&quot;\n  fi\n}\n</code></pre>\n"},{"owner":{"reputation":1087,"display_name":"Mingye Wang","link":"https://stackoverflow.com/users/3770260/mingye-wang"},"is_accepted":false,"score":3,"creation_date":1588615648,"answer_id":61598788,"question_id":1955505,"share_link":"https://stackoverflow.com/a/61598788","body_markdown":"Here is the answer for shell nerds using the POSIX shell (with `local`) and `egrep`: [JSON.sh][1], 4.7 KB.\r\n\r\nThis thing has plenty of test cases, so it should be correct. It is also pipeable. It is used in the package manager for Bash, *bpkg*.\r\n\r\n  [1]: https://github.com/dominictarr/JSON.sh\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/61598788#61598788","title":"Parsing JSON with Unix tools","body":"<p>Here is the answer for shell nerds using the POSIX shell (with <code>local</code>) and <code>egrep</code>: <a href=\"https://github.com/dominictarr/JSON.sh\" rel=\"nofollow noreferrer\">JSON.sh</a>, 4.7 KB.</p>\n<p>This thing has plenty of test cases, so it should be correct. It is also pipeable. It is used in the package manager for Bash, <em>bpkg</em>.</p>\n"},{"owner":{"reputation":479,"display_name":"Liu Hao","link":"https://stackoverflow.com/users/7672410/liu-hao"},"is_accepted":false,"score":1,"creation_date":1594387272,"answer_id":62835220,"question_id":1955505,"share_link":"https://stackoverflow.com/a/62835220","body_markdown":"Here is a simple approach for a Node.js-ready environment:\r\n\r\n    curl -L https://github.com/trentm/json/raw/master/lib/json.js &gt; json\r\n    chmod +x json\r\n    echo &#39;{&quot;hello&quot;:{&quot;hi&quot;:&quot;there&quot;}}&#39; | ./json &quot;hello.hi&quot;\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/62835220#62835220","title":"Parsing JSON with Unix tools","body":"<p>Here is a simple approach for a Node.js-ready environment:</p>\n<pre><code>curl -L https://github.com/trentm/json/raw/master/lib/json.js &gt; json\nchmod +x json\necho '{&quot;hello&quot;:{&quot;hi&quot;:&quot;there&quot;}}' | ./json &quot;hello.hi&quot;\n</code></pre>\n"},{"owner":{"reputation":79378,"accept_rate":100,"display_name":"Inian","link":"https://stackoverflow.com/users/5291015/inian"},"is_accepted":false,"score":6,"creation_date":1610960685,"answer_id":65771500,"question_id":1955505,"share_link":"https://stackoverflow.com/a/65771500","body_markdown":"One interesting tool that hasn&#39;t be covered in the existing answers is using [`gron` written in Go][1] which has a tagline that says **_Make JSON greppable!_** which is exactly what it does.\r\n\r\nSo essentially `gron` breaks down your JSON into discrete assignments see the absolute &#39;path&#39; to it. The primary advantage of it over other tools like `jq` would be to allow searching for the value without knowing how nested the record to search is present at, without breaking the original JSON structure\r\n\r\ne.g., I want to search for the `&#39;twitter_username&#39;` field from the following link, I just do\r\n\r\n```bash\r\n% gron &#39;https://api.github.com/users/lambda&#39; | fgrep &#39;twitter_username&#39;\r\njson.twitter_username = &quot;unlambda&quot;;\r\n% gron &#39;https://api.github.com/users/lambda&#39; | fgrep &#39;twitter_username&#39; | gron -u\r\n{\r\n  &quot;twitter_username&quot;: &quot;unlambda&quot;\r\n}\r\n```\r\nAs simple as that. Note how the `gron -u` (short for ungron) reconstructs the JSON back from the search path. The need for `fgrep` is just to filter your search to the paths needed and not let the search expression be evaluated as a regex, but as a fixed string (which is essentially `grep -F`)\r\n\r\nAnother example to search for a string to see where in the nested structure the record is under\r\n\r\n```bash\r\n% echo &#39;{&quot;foo&quot;:{&quot;bar&quot;:{&quot;zoo&quot;:{&quot;moo&quot;:&quot;fine&quot;}}}}&#39; | gron | fgrep &quot;fine&quot;\r\njson.foo.bar.zoo.moo = &quot;fine&quot;;\r\n```\r\n\r\nIt also supports streaming JSON with its `-s` command line flag, where you can continuously gron the input stream for a matching record. Also `gron` has zero runtime dependencies. You can [download a binary][2] for Linux, Mac, Windows or FreeBSD and run it.\r\n\r\nMore usage examples and trips can be found at the official Github page - [Advanced Usage][3]\r\n\r\nAs for why you one can use `gron` over other JSON parsing tools, see from author&#39;s note from the project page.\r\n\r\n### Why shouldn&#39;t I just use jq?\r\n\r\n&gt; jq is awesome, and a lot more powerful than gron, but with that power comes complexity. gron aims to make it easier to use the tools you already know, like grep and sed. \r\n\r\n\r\n  [1]: https://github.com/tomnomnom/gron\r\n  [2]: https://github.com/tomnomnom/gron/releases\r\n  [3]: https://github.com/tomnomnom/gron/blob/master/ADVANCED.mkd","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/65771500#65771500","title":"Parsing JSON with Unix tools","body":"<p>One interesting tool that hasn't be covered in the existing answers is using <a href=\"https://github.com/tomnomnom/gron\" rel=\"noreferrer\"><code>gron</code> written in Go</a> which has a tagline that says <strong><em>Make JSON greppable!</em></strong> which is exactly what it does.</p>\n<p>So essentially <code>gron</code> breaks down your JSON into discrete assignments see the absolute 'path' to it. The primary advantage of it over other tools like <code>jq</code> would be to allow searching for the value without knowing how nested the record to search is present at, without breaking the original JSON structure</p>\n<p>e.g., I want to search for the <code>'twitter_username'</code> field from the following link, I just do</p>\n<pre class=\"lang-sh prettyprint-override\"><code>% gron 'https://api.github.com/users/lambda' | fgrep 'twitter_username'\njson.twitter_username = &quot;unlambda&quot;;\n% gron 'https://api.github.com/users/lambda' | fgrep 'twitter_username' | gron -u\n{\n  &quot;twitter_username&quot;: &quot;unlambda&quot;\n}\n</code></pre>\n<p>As simple as that. Note how the <code>gron -u</code> (short for ungron) reconstructs the JSON back from the search path. The need for <code>fgrep</code> is just to filter your search to the paths needed and not let the search expression be evaluated as a regex, but as a fixed string (which is essentially <code>grep -F</code>)</p>\n<p>Another example to search for a string to see where in the nested structure the record is under</p>\n<pre class=\"lang-sh prettyprint-override\"><code>% echo '{&quot;foo&quot;:{&quot;bar&quot;:{&quot;zoo&quot;:{&quot;moo&quot;:&quot;fine&quot;}}}}' | gron | fgrep &quot;fine&quot;\njson.foo.bar.zoo.moo = &quot;fine&quot;;\n</code></pre>\n<p>It also supports streaming JSON with its <code>-s</code> command line flag, where you can continuously gron the input stream for a matching record. Also <code>gron</code> has zero runtime dependencies. You can <a href=\"https://github.com/tomnomnom/gron/releases\" rel=\"noreferrer\">download a binary</a> for Linux, Mac, Windows or FreeBSD and run it.</p>\n<p>More usage examples and trips can be found at the official Github page - <a href=\"https://github.com/tomnomnom/gron/blob/master/ADVANCED.mkd\" rel=\"noreferrer\">Advanced Usage</a></p>\n<p>As for why you one can use <code>gron</code> over other JSON parsing tools, see from author's note from the project page.</p>\n<h3>Why shouldn't I just use jq?</h3>\n<blockquote>\n<p>jq is awesome, and a lot more powerful than gron, but with that power comes complexity. gron aims to make it easier to use the tools you already know, like grep and sed.</p>\n</blockquote>\n"},{"owner":{"reputation":2830,"display_name":"Henry","link":"https://stackoverflow.com/users/716177/henry"},"is_accepted":false,"score":0,"creation_date":1626126376,"answer_id":68354208,"question_id":1955505,"share_link":"https://stackoverflow.com/a/68354208","body_markdown":"Using PHP after `yum install php-cli`:\r\n\r\n```\r\nphp -r &quot; foreach(json_decode(file_get_contents(&#39;http://a.com/a.json&#39;), true) as \\$key =&gt; \\$value) echo \\$key.&#39;=&#39;.\\$value.\\&quot;\\n\\&quot; ; &quot;\r\n```\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/68354208#68354208","title":"Parsing JSON with Unix tools","body":"<p>Using PHP after <code>yum install php-cli</code>:</p>\n<pre><code>php -r &quot; foreach(json_decode(file_get_contents('http://a.com/a.json'), true) as \\$key =&gt; \\$value) echo \\$key.'='.\\$value.\\&quot;\\n\\&quot; ; &quot;\n</code></pre>\n"},{"owner":{"reputation":388,"accept_rate":47,"display_name":"jasenmichael","link":"https://stackoverflow.com/users/1939027/jasenmichael"},"is_accepted":false,"score":3,"creation_date":1645111697,"answer_id":71160907,"question_id":1955505,"share_link":"https://stackoverflow.com/a/71160907","body_markdown":"This works for me if [Node.js][1] is installed:\r\n\r\n    node -pe &quot;require(&#39;${HOME}/.config/dev-utils.json&#39;).doToken&quot;\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Node.js\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/71160907#71160907","title":"Parsing JSON with Unix tools","body":"<p>This works for me if <a href=\"https://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow noreferrer\">Node.js</a> is installed:</p>\n<pre><code>node -pe &quot;require('${HOME}/.config/dev-utils.json').doToken&quot;\n</code></pre>\n"},{"owner":{"reputation":30789,"accept_rate":81,"display_name":"Heath Borders","link":"https://stackoverflow.com/users/9636/heath-borders"},"is_accepted":false,"score":3,"creation_date":1649781925,"answer_id":71846406,"question_id":1955505,"share_link":"https://stackoverflow.com/a/71846406","body_markdown":"Parse using [Ruby][1] (the interpreter is available on all [macOS][2] versions by default in `/usr/bin/ruby`):\r\n\r\n    echo &quot;${JSON}&quot; | /usr/bin/ruby -e &#39;require &quot;json&quot;; puts JSON.parse(http://STDIN.read)[&quot;key1&quot;][&quot;nested_key_2&quot;];&#39;\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Ruby_%28programming_language%29\r\n  [2]: https://en.wikipedia.org/wiki/MacOS\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/71846406#71846406","title":"Parsing JSON with Unix tools","body":"<p>Parse using <a href=\"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"nofollow noreferrer\">Ruby</a> (the interpreter is available on all <a href=\"https://en.wikipedia.org/wiki/MacOS\" rel=\"nofollow noreferrer\">macOS</a> versions by default in <code>/usr/bin/ruby</code>):</p>\n<pre><code>echo &quot;${JSON}&quot; | /usr/bin/ruby -e 'require &quot;json&quot;; puts JSON.parse(http://STDIN.read)[&quot;key1&quot;][&quot;nested_key_2&quot;];'\n</code></pre>\n"},{"owner":{"reputation":718,"accept_rate":100,"display_name":"ᐅdevrimbaris","link":"https://stackoverflow.com/users/301535/%e1%90%85devrimbaris"},"is_accepted":false,"score":1,"creation_date":1652297291,"answer_id":72206625,"question_id":1955505,"share_link":"https://stackoverflow.com/a/72206625","body_markdown":"You have multiple options.\r\nYou can use **trdsql** [1] for parsing and transforming JSON/CSV input. Following your example;\r\n```\r\ntrdsql &quot;select attr1,attr2 from sample.json&quot;\r\n```\r\n\r\nYou can also use where clause just like in SQL. Output in CSV, JSON etc. Very handy tool.\r\n\r\nTo my experience trdsql was a bit problematic when dealing with attribute nested values so I came to a solution using qp [2] when appropriate.\r\n\r\n```\r\ncat sample.json | qp &#39;select attr1, attr2.detail.name where attr3=10&#39;\r\n```\r\n\r\n*Notice there is no FROM.*\r\n\r\nFor viewing the results you may use the ultra fast command line json viewer tool, **jless** to view the output [3].\r\n\r\nThere is a new kid on the block from Clickhouse. You can see what it is capable of from [4].\r\n\r\n 1. https://github.com/noborus/trdsql\r\n 2. https://jless.io\r\n 3. https://github.com/f5io/qp\r\n 4. https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local\r\n\r\n","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/72206625#72206625","title":"Parsing JSON with Unix tools","body":"<p>You have multiple options.\nYou can use <strong>trdsql</strong> [1] for parsing and transforming JSON/CSV input. Following your example;</p>\n<pre><code>trdsql &quot;select attr1,attr2 from sample.json&quot;\n</code></pre>\n<p>You can also use where clause just like in SQL. Output in CSV, JSON etc. Very handy tool.</p>\n<p>To my experience trdsql was a bit problematic when dealing with attribute nested values so I came to a solution using qp [2] when appropriate.</p>\n<pre><code>cat sample.json | qp 'select attr1, attr2.detail.name where attr3=10'\n</code></pre>\n<p><em>Notice there is no FROM.</em></p>\n<p>For viewing the results you may use the ultra fast command line json viewer tool, <strong>jless</strong> to view the output [3].</p>\n<p>There is a new kid on the block from Clickhouse. You can see what it is capable of from [4].</p>\n<ol>\n<li><a href=\"https://github.com/noborus/trdsql\" rel=\"nofollow noreferrer\">https://github.com/noborus/trdsql</a></li>\n<li><a href=\"https://jless.io\" rel=\"nofollow noreferrer\">https://jless.io</a></li>\n<li><a href=\"https://github.com/f5io/qp\" rel=\"nofollow noreferrer\">https://github.com/f5io/qp</a></li>\n<li><a href=\"https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local\" rel=\"nofollow noreferrer\">https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local</a></li>\n</ol>\n"},{"owner":{"reputation":8549,"accept_rate":83,"display_name":"Joseph Astrahan","link":"https://stackoverflow.com/users/1606689/joseph-astrahan"},"is_accepted":false,"score":2,"creation_date":1652895739,"answer_id":72293735,"question_id":1955505,"share_link":"https://stackoverflow.com/a/72293735","body_markdown":"If you are looking for a **Native Mac solution** to parse JSON (No External Libraries etc...), then this is for you.\r\n\r\nThis information is based on an article here: https://www.macblog.org/parse-json-command-line-mac/\r\n\r\nIn short, since as far back as Mac OS Yosemite there is tool for running apple scripts called **osascript**, however if you pass the -l &#39;Javascript&#39; flag you can run javascript! Using JXA (JavaScript for Automation) is what this is called.\r\n\r\nAn example below of reading a JSON file for my own project.\r\n\r\n    DCMTK_JSON=$(curl -s https://formulae.brew.sh/api/bottle/dcmtk.json) # -s for silent mode\r\n    read -r -d &#39;&#39; JXA &lt;&lt;EOF\r\n    function run() {\r\n      var json = JSON.parse(\\`$DCMTK_JSON\\`);\r\n      return json.bottles.$2.url;\r\n    }\r\n    EOF\r\n    DOWNLOAD_URL=$( osascript -l &#39;JavaScript&#39; &lt;&lt;&lt; &quot;${JXA}&quot; )\r\n    echo &quot;DOWNLOAD_URL=${DOWNLOAD_URL}&quot;\r\n\r\nWhat is happening here is we are storing the ouput of the function into the variable JXA.  We can then simply run javascript to parse the JSON content with JSON.parse().  Then simply pass in the JXA variable that contains the script to the osascript tool so it can run the javascript. In my example the $2 refers to arm64_monterey if you test this.  The reason the javascript runs right away is because of the special function `run()`, which JXA looks for and will return its output when it finishes.\r\n\r\nNote that EOF (end of file) are used to handle multiple lines of text input, and the ending EOF can not have any spaces in front of it to work.\r\n\r\nYou can test if this will work for you by simply opening terminal and typing the command below\r\n\r\n    osascript -l &#39;JavaScript&#39; -e &#39;var app = Application.currentApplication(); app.includeStandardAdditions = true; app.displayDialog(&quot;Hello from JavaScript!&quot;);\r\n\r\nThis should bring up a pop up window that says hello from javascript","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/72293735#72293735","title":"Parsing JSON with Unix tools","body":"<p>If you are looking for a <strong>Native Mac solution</strong> to parse JSON (No External Libraries etc...), then this is for you.</p>\n<p>This information is based on an article here: <a href=\"https://www.macblog.org/parse-json-command-line-mac/\" rel=\"nofollow noreferrer\">https://www.macblog.org/parse-json-command-line-mac/</a></p>\n<p>In short, since as far back as Mac OS Yosemite there is tool for running apple scripts called <strong>osascript</strong>, however if you pass the -l 'Javascript' flag you can run javascript! Using JXA (JavaScript for Automation) is what this is called.</p>\n<p>An example below of reading a JSON file for my own project.</p>\n<pre><code>DCMTK_JSON=$(curl -s https://formulae.brew.sh/api/bottle/dcmtk.json) # -s for silent mode\nread -r -d '' JXA &lt;&lt;EOF\nfunction run() {\n  var json = JSON.parse(\\`$DCMTK_JSON\\`);\n  return json.bottles.$2.url;\n}\nEOF\nDOWNLOAD_URL=$( osascript -l 'JavaScript' &lt;&lt;&lt; &quot;${JXA}&quot; )\necho &quot;DOWNLOAD_URL=${DOWNLOAD_URL}&quot;\n</code></pre>\n<p>What is happening here is we are storing the ouput of the function into the variable JXA.  We can then simply run javascript to parse the JSON content with JSON.parse().  Then simply pass in the JXA variable that contains the script to the osascript tool so it can run the javascript. In my example the $2 refers to arm64_monterey if you test this.  The reason the javascript runs right away is because of the special function <code>run()</code>, which JXA looks for and will return its output when it finishes.</p>\n<p>Note that EOF (end of file) are used to handle multiple lines of text input, and the ending EOF can not have any spaces in front of it to work.</p>\n<p>You can test if this will work for you by simply opening terminal and typing the command below</p>\n<pre><code>osascript -l 'JavaScript' -e 'var app = Application.currentApplication(); app.includeStandardAdditions = true; app.displayDialog(&quot;Hello from JavaScript!&quot;);\n</code></pre>\n<p>This should bring up a pop up window that says hello from javascript</p>\n"},{"owner":{"reputation":1599,"display_name":"jpseng","link":"https://stackoverflow.com/users/16332641/jpseng"},"is_accepted":false,"score":1,"creation_date":1667739348,"answer_id":74336024,"question_id":1955505,"share_link":"https://stackoverflow.com/a/74336024","body_markdown":"YAML processor [yq](https://mikefarah.gitbook.io/yq/)\r\n===\r\n\r\nConsider using [yq](https://mikefarah.gitbook.io/yq/) for JSON processing.\r\n`yq` is a lightweight and portable command-line YAML processor (and JSON is a subset of YAML).\r\nThe syntax is similar to `jq`. \r\n\r\nInput\r\n---\r\n\r\n```json\r\n{\r\n  &quot;name&quot;: &quot;Angel&quot;,\r\n  &quot;address&quot;: {\r\n    &quot;street&quot;: &quot;Stairway to&quot;,\r\n    &quot;city&quot;: &quot;Heaven&quot;\r\n  }\r\n}\r\n```\r\n\r\nusage example 1\r\n---\r\n\r\n`yq e &#39;.name&#39; $FILE`\r\n\r\n```text\r\nAngel\r\n```\r\n\r\nusage example 2\r\n---\r\n\r\n`yq` has a nice builtin feature to make JSON and YAML grep-able\r\n\r\n`yq --output-format props $FILE`\r\n\r\n```text\r\nname = Angel\r\naddress.street = Stairway to\r\naddress.city = Heaven\r\n\r\n```","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/74336024#74336024","title":"Parsing JSON with Unix tools","body":"<h1>YAML processor <a href=\"https://mikefarah.gitbook.io/yq/\" rel=\"nofollow noreferrer\">yq</a></h1>\n<p>Consider using <a href=\"https://mikefarah.gitbook.io/yq/\" rel=\"nofollow noreferrer\">yq</a> for JSON processing.\n<code>yq</code> is a lightweight and portable command-line YAML processor (and JSON is a subset of YAML).\nThe syntax is similar to <code>jq</code>.</p>\n<h2>Input</h2>\n<pre class=\"lang-json prettyprint-override\"><code>{\n  &quot;name&quot;: &quot;Angel&quot;,\n  &quot;address&quot;: {\n    &quot;street&quot;: &quot;Stairway to&quot;,\n    &quot;city&quot;: &quot;Heaven&quot;\n  }\n}\n</code></pre>\n<h2>usage example 1</h2>\n<p><code>yq e '.name' $FILE</code></p>\n<pre><code>Angel\n</code></pre>\n<h2>usage example 2</h2>\n<p><code>yq</code> has a nice builtin feature to make JSON and YAML grep-able</p>\n<p><code>yq --output-format props $FILE</code></p>\n<pre><code>name = Angel\naddress.street = Stairway to\naddress.city = Heaven\n\n</code></pre>\n"},{"owner":{"reputation":1669,"display_name":"seunggabi","link":"https://stackoverflow.com/users/6172826/seunggabi"},"is_accepted":false,"score":0,"creation_date":1678427363,"answer_id":75692646,"question_id":1955505,"share_link":"https://stackoverflow.com/a/75692646","body_markdown":"```python\r\npip3 install jq\r\n\r\nparse() {\r\n  key=$1\r\n\r\n  python3 -c &quot;\r\nimport sys\r\nimport jq\r\nimport json\r\n\r\ninput = json.load(sys.stdin)\r\noutput = jq.compile(&#39;$key&#39;).input(input).all()\r\n\r\nif(isinstance(output, list)):\r\n    output = &#39; &#39;.join(output)\r\n\r\nprint(output)\r\n&quot;\r\n}\r\n\r\nname=$(aws emr describe-cluster --cluster-id $id | parse &quot;.Cluster.Name&quot;)\r\n\r\necho $name\r\n```","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools/75692646#75692646","title":"Parsing JSON with Unix tools","body":"<pre class=\"lang-py prettyprint-override\"><code>pip3 install jq\n\nparse() {\n  key=$1\n\n  python3 -c &quot;\nimport sys\nimport jq\nimport json\n\ninput = json.load(sys.stdin)\noutput = jq.compile('$key').input(input).all()\n\nif(isinstance(output, list)):\n    output = ' '.join(output)\n\nprint(output)\n&quot;\n}\n\nname=$(aws emr describe-cluster --cluster-id $id | parse &quot;.Cluster.Name&quot;)\n\necho $name\n</code></pre>\n"}],"owner":{"reputation":13758,"accept_rate":75,"display_name":"auser","link":"https://stackoverflow.com/users/141821/auser"},"is_answered":true,"view_count":1623590,"up_vote_count":1243,"accepted_answer_id":1955555,"answer_count":46,"score":1242,"last_activity_date":1681696405,"creation_date":1261604818,"last_edit_date":1670073637,"question_id":1955505,"body_markdown":"I&#39;m trying to parse JSON returned from a curl request, like so:\r\n\r\n    curl &#39;http://twitter.com/users/username.json&#39; |\r\n        sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | \r\n        awk -v k=&quot;text&quot; &#39;{n=split($0,a,&quot;,&quot;); for (i=1; i&lt;=n; i++) print a[i]}&#39;\r\n\r\nThe above splits the JSON into fields, for example:\r\n    \r\n    % ...\r\n    &quot;geo_enabled&quot;:false\r\n    &quot;friends_count&quot;:245\r\n    &quot;profile_text_color&quot;:&quot;000000&quot;\r\n    &quot;status&quot;:&quot;in_reply_to_screen_name&quot;:null\r\n    &quot;source&quot;:&quot;web&quot;\r\n    &quot;truncated&quot;:false\r\n    &quot;text&quot;:&quot;My status&quot;\r\n    &quot;favorited&quot;:false\r\n    % ...\r\n\r\nHow do I print a specific field (denoted by the `-v k=text`)?","link":"https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools","title":"Parsing JSON with Unix tools","body":"<p>I'm trying to parse JSON returned from a curl request, like so:</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' |\n    sed -e 's/[{}]/''/g' | \n    awk -v k=\"text\" '{n=split($0,a,\",\"); for (i=1; i&lt;=n; i++) print a[i]}'\n</code></pre>\n\n<p>The above splits the JSON into fields, for example:</p>\n\n<pre><code>% ...\n\"geo_enabled\":false\n\"friends_count\":245\n\"profile_text_color\":\"000000\"\n\"status\":\"in_reply_to_screen_name\":null\n\"source\":\"web\"\n\"truncated\":false\n\"text\":\"My status\"\n\"favorited\":false\n% ...\n</code></pre>\n\n<p>How do I print a specific field (denoted by the <code>-v k=text</code>)?</p>\n"},{"tags":["bash","awk","sed","jq"],"answers":[{"owner":{"reputation":278356,"accept_rate":71,"display_name":"Charles Duffy","link":"https://stackoverflow.com/users/14122/charles-duffy"},"is_accepted":true,"score":1135,"creation_date":1497970683,"answer_id":44656583,"question_id":44656515,"share_link":"https://stackoverflow.com/a/44656583","body_markdown":"Use the `-r` (or `--raw-output`) option to emit raw strings as output:\r\n\r\n    jq -r &#39;.name&#39; &lt;json.txt","link":"https://stackoverflow.com/questions/44656515/how-to-remove-double-quotes-in-jq-output-for-parsing-json-files-in-bash/44656583#44656583","title":"How to remove double-quotes in jq output for parsing json files in bash?","body":"<p>Use the <code>-r</code> (or <code>--raw-output</code>) option to emit raw strings as output:</p>\n\n<pre><code>jq -r '.name' &lt;json.txt\n</code></pre>\n"},{"owner":{"reputation":21081,"accept_rate":46,"display_name":"HeyWatchThis","link":"https://stackoverflow.com/users/472876/heywatchthis"},"is_accepted":false,"score":41,"creation_date":1663950381,"answer_id":73830593,"question_id":44656515,"share_link":"https://stackoverflow.com/a/73830593","body_markdown":"So for a file containing just `{&quot;name&quot;: &quot;Google&quot;}` then yes \r\n\r\n    sample=&#39;{&quot;name&quot;:&quot;Google&quot;}&#39;\r\n    echo $sample| jq &#39;.name&#39;\r\n\r\n    &quot;Google&quot;\r\n\r\nusing `--raw-output` helps\r\n\r\n    echo $sample| jq --raw-output &#39;.name&#39;\r\n\r\n    Google\r\n\r\nBut I stumbled upon this question because I was using `--raw-output` on a json array like this \r\n\r\n    sample=&#39;[{&quot;name&quot;:&quot;Yahoo&quot;},{&quot;name&quot;:&quot;Google&quot;}]&#39;\r\n    echo $sample | jq --raw-output &#39;map(.name)&#39;\r\n\r\n    [\r\n      &quot;Yahoo&quot;,\r\n      &quot;Google&quot;\r\n    ]\r\n\r\nAnd I didn&#39;t understand why the quotes remained. I came across [this post][1], and now I know adding `| .[]` does the trick! \r\n\r\n    echo $sample | jq --raw-output &#39;map(.name)| .[]&#39;\r\n\r\n    Yahoo\r\n    Google\r\n\r\n\r\n\r\n  [1]: https://www.starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/","link":"https://stackoverflow.com/questions/44656515/how-to-remove-double-quotes-in-jq-output-for-parsing-json-files-in-bash/73830593#73830593","title":"How to remove double-quotes in jq output for parsing json files in bash?","body":"<p>So for a file containing just <code>{&quot;name&quot;: &quot;Google&quot;}</code> then yes</p>\n<pre><code>sample='{&quot;name&quot;:&quot;Google&quot;}'\necho $sample| jq '.name'\n\n&quot;Google&quot;\n</code></pre>\n<p>using <code>--raw-output</code> helps</p>\n<pre><code>echo $sample| jq --raw-output '.name'\n\nGoogle\n</code></pre>\n<p>But I stumbled upon this question because I was using <code>--raw-output</code> on a json array like this</p>\n<pre><code>sample='[{&quot;name&quot;:&quot;Yahoo&quot;},{&quot;name&quot;:&quot;Google&quot;}]'\necho $sample | jq --raw-output 'map(.name)'\n\n[\n  &quot;Yahoo&quot;,\n  &quot;Google&quot;\n]\n</code></pre>\n<p>And I didn't understand why the quotes remained. I came across <a href=\"https://www.starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/\" rel=\"noreferrer\">this post</a>, and now I know adding <code>| .[]</code> does the trick!</p>\n<pre><code>echo $sample | jq --raw-output 'map(.name)| .[]'\n\nYahoo\nGoogle\n</code></pre>\n"}],"owner":{"reputation":14069,"accept_rate":70,"display_name":"Chris F","link":"https://stackoverflow.com/users/1401560/chris-f"},"is_answered":true,"view_count":263357,"up_vote_count":623,"accepted_answer_id":44656583,"answer_count":2,"score":622,"last_activity_date":1682188048,"creation_date":1497970519,"last_edit_date":1540642996,"question_id":44656515,"body_markdown":"I&#39;m using jq to parse a JSON file as shown [here][1]. However, the results for string values contain the &quot;double-quotes&quot; as expected, as shown below:\r\n\r\n&lt;!-- language-all: none --&gt;\r\n\r\n    $ cat json.txt | jq &#39;.name&#39;\r\n    &quot;Google&quot;\r\n\r\nHow can I pipe this into another command to remove the &quot;&quot;? so I get\r\n\r\n    $ cat json.txt | jq &#39;.name&#39; | some_other_command\r\n    Google\r\n\r\nWhat `some_other_command` can I use?\r\n\r\n  [1]: http://xmodulo.com/how-to-parse-json-string-via-command-line-on-linux.html#comment-13001","link":"https://stackoverflow.com/questions/44656515/how-to-remove-double-quotes-in-jq-output-for-parsing-json-files-in-bash","title":"How to remove double-quotes in jq output for parsing json files in bash?","body":"<p>I'm using jq to parse a JSON file as shown <a href=\"http://xmodulo.com/how-to-parse-json-string-via-command-line-on-linux.html#comment-13001\" rel=\"noreferrer\">here</a>. However, the results for string values contain the \"double-quotes\" as expected, as shown below:</p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cat json.txt | jq '.name'\n\"Google\"\n</code></pre>\n\n<p>How can I pipe this into another command to remove the \"\"? so I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cat json.txt | jq '.name' | some_other_command\nGoogle\n</code></pre>\n\n<p>What <code>some_other_command</code> can I use?</p>\n"},{"tags":["json","bash","select","jq"],"answers":[{"owner":{"reputation":12246,"display_name":"Daniel","link":"https://stackoverflow.com/users/179444/daniel"},"is_accepted":true,"score":655,"creation_date":1378280521,"answer_id":18608100,"question_id":18592173,"share_link":"https://stackoverflow.com/a/18608100","body_markdown":"Adapted from this post on [Processing JSON with jq][1], you can use the [`select(bool)`][2] like this:\r\n\r\n```bash\r\n$ jq &#39;.[] | select(.location==&quot;Stockholm&quot;)&#39; json\r\n{\r\n  &quot;location&quot;: &quot;Stockholm&quot;,\r\n  &quot;name&quot;: &quot;Walt&quot;\r\n}\r\n{\r\n  &quot;location&quot;: &quot;Stockholm&quot;,\r\n  &quot;name&quot;: &quot;Donald&quot;\r\n}\r\n```\r\n\r\n[1]: https://zerokspot.com/weblog/2013/07/18/processing-json-with-jq/\r\n[2]: https://stedolan.github.io/jq/manual/#select(boolean_expression)\r\n\r\n","link":"https://stackoverflow.com/questions/18592173/select-objects-based-on-value-of-variable-in-object-using-jq/18608100#18608100","title":"Select objects based on value of variable in object using jq","body":"<p>Adapted from this post on <a href=\"https://zerokspot.com/weblog/2013/07/18/processing-json-with-jq/\" rel=\"noreferrer\">Processing JSON with jq</a>, you can use the <a href=\"https://stedolan.github.io/jq/manual/#select(boolean_expression)\" rel=\"noreferrer\"><code>select(bool)</code></a> like this:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ jq '.[] | select(.location==\"Stockholm\")' json\n{\n  \"location\": \"Stockholm\",\n  \"name\": \"Walt\"\n}\n{\n  \"location\": \"Stockholm\",\n  \"name\": \"Donald\"\n}\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":303,"creation_date":1439182215,"answer_id":31911811,"question_id":18592173,"share_link":"https://stackoverflow.com/a/31911811","body_markdown":"To obtain a stream of just the names:\r\n\r\n    $ jq &#39;.[] | select(.location==&quot;Stockholm&quot;) | .name&#39; json\r\n\r\nproduces:\r\n\r\n    &quot;Donald&quot;\r\n    &quot;Walt&quot;\r\n\r\nTo obtain a stream of corresponding (key name, &quot;name&quot; attribute) pairs, consider:\r\n\r\n    $ jq -c &#39;to_entries[]\r\n            | select (.value.location == &quot;Stockholm&quot;)\r\n            | [.key, .value.name]&#39; json\r\n\r\nOutput:\r\n\r\n    [&quot;FOO&quot;,&quot;Donald&quot;]\r\n    [&quot;BAR&quot;,&quot;Walt&quot;]\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/18592173/select-objects-based-on-value-of-variable-in-object-using-jq/31911811#31911811","title":"Select objects based on value of variable in object using jq","body":"<p>To obtain a stream of just the names:</p>\n\n<pre><code>$ jq '.[] | select(.location==\"Stockholm\") | .name' json\n</code></pre>\n\n<p>produces:</p>\n\n<pre><code>\"Donald\"\n\"Walt\"\n</code></pre>\n\n<p>To obtain a stream of corresponding (key name, \"name\" attribute) pairs, consider:</p>\n\n<pre><code>$ jq -c 'to_entries[]\n        | select (.value.location == \"Stockholm\")\n        | [.key, .value.name]' json\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[\"FOO\",\"Donald\"]\n[\"BAR\",\"Walt\"]\n</code></pre>\n"},{"owner":{"reputation":4369,"display_name":"spazm","link":"https://stackoverflow.com/users/117714/spazm"},"is_accepted":false,"score":57,"creation_date":1466017588,"answer_id":37843822,"question_id":18592173,"share_link":"https://stackoverflow.com/a/37843822","body_markdown":"I had a similar related question:  What if you wanted the original object format back (with key names, e.g. FOO, BAR)?  \r\n\r\nJq provides `to_entries` and `from_entries` to convert between objects and key-value pair arrays.  That along with `map` around the select\r\n\r\n&gt; These functions convert between an object and an array of key-value\r\n&gt; pairs. If to_entries is passed an object, then for each k: v entry in\r\n&gt; the input, the output array includes {&quot;key&quot;: k, &quot;value&quot;: v}.\r\n&gt; \r\n&gt; from_entries does the opposite conversion, and with_entries(foo) is a\r\n&gt; shorthand for to_entries | map(foo) | from_entries, useful for doing\r\n&gt; some operation to all keys and values of an object. from_entries\r\n&gt; accepts key, Key, name, Name, value and Value as keys.\r\n\r\n\r\n    jq15 &lt; json &#39;to_entries | map(select(.value.location==&quot;Stockholm&quot;)) | from_entries&#39;\r\n    \r\n    {\r\n      &quot;FOO&quot;: {\r\n        &quot;name&quot;: &quot;Donald&quot;,\r\n        &quot;location&quot;: &quot;Stockholm&quot;\r\n      },\r\n      &quot;BAR&quot;: {\r\n        &quot;name&quot;: &quot;Walt&quot;,\r\n        &quot;location&quot;: &quot;Stockholm&quot;\r\n      }\r\n    }\r\n\r\nUsing the `with_entries` shorthand, this becomes:\r\n\r\n    jq15 &lt; json &#39;with_entries(select(.value.location==&quot;Stockholm&quot;))&#39;\r\n    {\r\n      &quot;FOO&quot;: {\r\n        &quot;name&quot;: &quot;Donald&quot;,\r\n        &quot;location&quot;: &quot;Stockholm&quot;\r\n      },\r\n      &quot;BAR&quot;: {\r\n        &quot;name&quot;: &quot;Walt&quot;,\r\n        &quot;location&quot;: &quot;Stockholm&quot;\r\n      }\r\n    }\r\n","link":"https://stackoverflow.com/questions/18592173/select-objects-based-on-value-of-variable-in-object-using-jq/37843822#37843822","title":"Select objects based on value of variable in object using jq","body":"<p>I had a similar related question:  What if you wanted the original object format back (with key names, e.g. FOO, BAR)?  </p>\n\n<p>Jq provides <code>to_entries</code> and <code>from_entries</code> to convert between objects and key-value pair arrays.  That along with <code>map</code> around the select</p>\n\n<blockquote>\n  <p>These functions convert between an object and an array of key-value\n  pairs. If to_entries is passed an object, then for each k: v entry in\n  the input, the output array includes {\"key\": k, \"value\": v}.</p>\n  \n  <p>from_entries does the opposite conversion, and with_entries(foo) is a\n  shorthand for to_entries | map(foo) | from_entries, useful for doing\n  some operation to all keys and values of an object. from_entries\n  accepts key, Key, name, Name, value and Value as keys.</p>\n</blockquote>\n\n<pre><code>jq15 &lt; json 'to_entries | map(select(.value.location==\"Stockholm\")) | from_entries'\n\n{\n  \"FOO\": {\n    \"name\": \"Donald\",\n    \"location\": \"Stockholm\"\n  },\n  \"BAR\": {\n    \"name\": \"Walt\",\n    \"location\": \"Stockholm\"\n  }\n}\n</code></pre>\n\n<p>Using the <code>with_entries</code> shorthand, this becomes:</p>\n\n<pre><code>jq15 &lt; json 'with_entries(select(.value.location==\"Stockholm\"))'\n{\n  \"FOO\": {\n    \"name\": \"Donald\",\n    \"location\": \"Stockholm\"\n  },\n  \"BAR\": {\n    \"name\": \"Walt\",\n    \"location\": \"Stockholm\"\n  }\n}\n</code></pre>\n"},{"owner":{"reputation":5084,"accept_rate":93,"display_name":"Yordan Georgiev","link":"https://stackoverflow.com/users/65706/yordan-georgiev"},"is_accepted":false,"score":35,"creation_date":1601913628,"answer_id":64212172,"question_id":18592173,"share_link":"https://stackoverflow.com/a/64212172","body_markdown":"Just try this one as a full copy paste in the shell and you will grasp it.\r\n\r\n    # pass the multiline string to the jq, use the jq to \r\n    # select the attribute named &quot;card_id&quot; \r\n    # ONLY if its neighbour attribute\r\n    # named &quot;card_id_type&quot; has the &quot;card_id_type-01&quot; value.\r\n    # jq -r means give me ONLY the value of the jq query no quotes aka raw\r\n\r\n\r\n    cat &lt;&lt; EOF | \\\r\n\t\tjq -r &#39;.[]| select (.card_id_type == &quot;card_id_type-01&quot;)|.card_id&#39;\r\n\t\t[  \r\n\t\t { &quot;card_id&quot;: &quot;id-00&quot;, &quot;card_id_type&quot;: &quot;card_id_type-00&quot;},\r\n\t\t { &quot;card_id&quot;: &quot;id-01&quot;, &quot;card_id_type&quot;: &quot;card_id_type-01&quot;},\r\n\t\t { &quot;card_id&quot;: &quot;id-02&quot;, &quot;card_id_type&quot;: &quot;card_id_type-02&quot;}\r\n\t\t]\r\n    EOF\r\n    # this ^^^ MUST start first on the line - no whitespace there !!!\r\n    # outputs:\r\n    # id-01\r\n\r\n   \r\n\r\n\r\n\r\nor with an aws cli command\r\n\r\n     # list my vpcs or\r\n     # list the values of the tags which names are &quot;Name&quot; \r\n     aws ec2 describe-vpcs | jq -r &#39;.| .Vpcs[].Tags[]\r\n            |select (.Key == &quot;Name&quot;) | .Value&#39;|sort  -nr\r\n\r\n\r\nNote that you could move up and down in the hierarchy both during the filtering phase and during the selecting phase : \r\n     \r\n    \r\n     kubectl get services --all-namespaces -o json | jq -r &#39;\r\n     .items[] | select( .metadata.name \r\n         | contains(&quot;my-srch-string&quot;)) | \r\n         { name: .metadata.name, ns: .metadata.namespace \r\n         , nodePort: .spec.ports[].nodePort\r\n         , port: .spec.ports[].port}\r\n     &#39;\r\n\r\n","link":"https://stackoverflow.com/questions/18592173/select-objects-based-on-value-of-variable-in-object-using-jq/64212172#64212172","title":"Select objects based on value of variable in object using jq","body":"<p>Just try this one as a full copy paste in the shell and you will grasp it.</p>\n<pre><code># pass the multiline string to the jq, use the jq to \n# select the attribute named &quot;card_id&quot; \n# ONLY if its neighbour attribute\n# named &quot;card_id_type&quot; has the &quot;card_id_type-01&quot; value.\n# jq -r means give me ONLY the value of the jq query no quotes aka raw\n\n\ncat &lt;&lt; EOF | \\\n    jq -r '.[]| select (.card_id_type == &quot;card_id_type-01&quot;)|.card_id'\n    [  \n     { &quot;card_id&quot;: &quot;id-00&quot;, &quot;card_id_type&quot;: &quot;card_id_type-00&quot;},\n     { &quot;card_id&quot;: &quot;id-01&quot;, &quot;card_id_type&quot;: &quot;card_id_type-01&quot;},\n     { &quot;card_id&quot;: &quot;id-02&quot;, &quot;card_id_type&quot;: &quot;card_id_type-02&quot;}\n    ]\nEOF\n# this ^^^ MUST start first on the line - no whitespace there !!!\n# outputs:\n# id-01\n</code></pre>\n<p>or with an aws cli command</p>\n<pre><code> # list my vpcs or\n # list the values of the tags which names are &quot;Name&quot; \n aws ec2 describe-vpcs | jq -r '.| .Vpcs[].Tags[]\n        |select (.Key == &quot;Name&quot;) | .Value'|sort  -nr\n</code></pre>\n<p>Note that you could move up and down in the hierarchy both during the filtering phase and during the selecting phase :</p>\n<pre><code> kubectl get services --all-namespaces -o json | jq -r '\n .items[] | select( .metadata.name \n     | contains(&quot;my-srch-string&quot;)) | \n     { name: .metadata.name, ns: .metadata.namespace \n     , nodePort: .spec.ports[].nodePort\n     , port: .spec.ports[].port}\n '\n</code></pre>\n"}],"owner":{"reputation":12246,"display_name":"Daniel","link":"https://stackoverflow.com/users/179444/daniel"},"is_answered":true,"view_count":577010,"up_vote_count":457,"accepted_answer_id":18608100,"answer_count":4,"score":457,"last_activity_date":1643703786,"creation_date":1378210772,"last_edit_date":1616841176,"question_id":18592173,"body_markdown":"I have the following json file:\r\n\r\n    {\r\n        &quot;FOO&quot;: {\r\n            &quot;name&quot;: &quot;Donald&quot;,\r\n            &quot;location&quot;: &quot;Stockholm&quot;\r\n        },\r\n        &quot;BAR&quot;: {\r\n            &quot;name&quot;: &quot;Walt&quot;,\r\n            &quot;location&quot;: &quot;Stockholm&quot;\r\n        },\r\n        &quot;BAZ&quot;: {\r\n            &quot;name&quot;: &quot;Jack&quot;,\r\n            &quot;location&quot;: &quot;Whereever&quot;\r\n        }\r\n    }\r\n\r\nI am using jq and want to get the &quot;name&quot; elements of the objects where &#39;location&#39; is &#39;Stockholm&#39;. \r\n\r\nI know I can get all names by\r\n\r\n    cat json | jq .[] | jq .&quot;name&quot;\r\n    &quot;Jack&quot;\r\n    &quot;Walt&quot;\r\n    &quot;Donald&quot;\r\n\r\nBut I can&#39;t figure out how to print only certain objects, given the value of a sub key (here: `&quot;location&quot; : &quot;Stockholm&quot;`). ","link":"https://stackoverflow.com/questions/18592173/select-objects-based-on-value-of-variable-in-object-using-jq","title":"Select objects based on value of variable in object using jq","body":"<p>I have the following json file:</p>\n<pre><code>{\n    &quot;FOO&quot;: {\n        &quot;name&quot;: &quot;Donald&quot;,\n        &quot;location&quot;: &quot;Stockholm&quot;\n    },\n    &quot;BAR&quot;: {\n        &quot;name&quot;: &quot;Walt&quot;,\n        &quot;location&quot;: &quot;Stockholm&quot;\n    },\n    &quot;BAZ&quot;: {\n        &quot;name&quot;: &quot;Jack&quot;,\n        &quot;location&quot;: &quot;Whereever&quot;\n    }\n}\n</code></pre>\n<p>I am using jq and want to get the &quot;name&quot; elements of the objects where 'location' is 'Stockholm'.</p>\n<p>I know I can get all names by</p>\n<pre><code>cat json | jq .[] | jq .&quot;name&quot;\n&quot;Jack&quot;\n&quot;Walt&quot;\n&quot;Donald&quot;\n</code></pre>\n<p>But I can't figure out how to print only certain objects, given the value of a sub key (here: <code>&quot;location&quot; : &quot;Stockholm&quot;</code>).</p>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":16294,"accept_rate":94,"display_name":"Eric Hartford","link":"https://stackoverflow.com/users/559378/eric-hartford"},"is_accepted":false,"score":626,"creation_date":1436911471,"answer_id":31418194,"question_id":28164849,"share_link":"https://stackoverflow.com/a/31418194","body_markdown":"I recommend using String Interpolation:\r\n\r\n    jq &#39;.users[] | &quot;\\(.first) \\(.last)&quot;&#39;\r\n\r\nWe are piping down the result of `.users[]` to generate the string &quot;.first .last&quot; using string interpolation. `\\(foo)` syntax is used for string interpolation in `jq`. So, for the above example, it becomes &quot;Stevie Wonder&quot; (`&quot;.users[].first .users[].second&quot;` working elementwise) and &quot;Michael Jackson&quot;.\r\n\r\njq reference: [String interpolation][1]\r\n\r\n  [1]: http://stedolan.github.io/jq/manual/#Stringinterpolation-%5C%28foo%29","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/31418194#31418194","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>I recommend using String Interpolation:</p>\n<pre><code>jq '.users[] | &quot;\\(.first) \\(.last)&quot;'\n</code></pre>\n<p>We are piping down the result of <code>.users[]</code> to generate the string &quot;.first .last&quot; using string interpolation. <code>\\(foo)</code> syntax is used for string interpolation in <code>jq</code>. So, for the above example, it becomes &quot;Stevie Wonder&quot; (<code>&quot;.users[].first .users[].second&quot;</code> working elementwise) and &quot;Michael Jackson&quot;.</p>\n<p>jq reference: <a href=\"http://stedolan.github.io/jq/manual/#Stringinterpolation-%5C%28foo%29\" rel=\"noreferrer\">String interpolation</a></p>\n"},{"owner":{"reputation":46333,"display_name":"abraham","link":"https://stackoverflow.com/users/26406/abraham"},"is_accepted":false,"score":354,"creation_date":1438616485,"answer_id":31791436,"question_id":28164849,"share_link":"https://stackoverflow.com/a/31791436","body_markdown":"You can use [addition][1] to concatenate strings.\r\n\r\n&gt; **Strings** are added by being joined into a larger string.\r\n\r\n    jq &#39;.users[] | .first + &quot; &quot; + .last&#39;\r\n\r\nThe above works when both `first` and `last` are string. If you are extracting different datatypes(number and string), then we need to convert to equivalent types. Referring to [solution on this question][2]. For example.\r\n\r\n    jq &#39;.users[] | .first + &quot; &quot; + (.number|tostring)&#39;\r\n\r\n  [1]: https://stedolan.github.io/jq/manual/#Addition\r\n  [2]: https://stackoverflow.com/a/46674867/979772","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/31791436#31791436","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>You can use <a href=\"https://stedolan.github.io/jq/manual/#Addition\" rel=\"noreferrer\">addition</a> to concatenate strings.</p>\n\n<blockquote>\n  <p><strong>Strings</strong> are added by being joined into a larger string.</p>\n</blockquote>\n\n<pre><code>jq '.users[] | .first + \" \" + .last'\n</code></pre>\n\n<p>The above works when both <code>first</code> and <code>last</code> are string. If you are extracting different datatypes(number and string), then we need to convert to equivalent types. Referring to <a href=\"https://stackoverflow.com/a/46674867/979772\">solution on this question</a>. For example.</p>\n\n<pre><code>jq '.users[] | .first + \" \" + (.number|tostring)'\n</code></pre>\n"},{"owner":{"reputation":1019,"accept_rate":20,"display_name":"machzqcq","link":"https://stackoverflow.com/users/3742551/machzqcq"},"is_accepted":false,"score":16,"creation_date":1462135158,"answer_id":36971694,"question_id":28164849,"share_link":"https://stackoverflow.com/a/36971694","body_markdown":"While both of the above answers work well if key,value are strings, I had a situation to append a string and integer (jq errors using the above expressions) \r\n\r\nRequirement: To construct a url out below json\r\n\r\n    pradeep@seleniumframework&gt;curl http://192.168.99.103:8500/v1/catalog/service/apache-443 | jq .[0]\r\n      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                     Dload  Upload   Total   Spent    Left  Speed\r\n    100   251  100   251    0     0   155k      0 --:--:-- --:--:-- --:--:--  245k\r\n    {\r\n      &quot;Node&quot;: &quot;myconsul&quot;,\r\n      &quot;Address&quot;: &quot;192.168.99.103&quot;,\r\n      &quot;ServiceID&quot;: &quot;4ce41e90ede4:compassionate_wozniak:443&quot;,\r\n      &quot;ServiceName&quot;: &quot;apache-443&quot;,\r\n      &quot;ServiceTags&quot;: [],\r\n      &quot;ServiceAddress&quot;: &quot;&quot;,\r\n      &quot;ServicePort&quot;: 1443,\r\n      &quot;ServiceEnableTagOverride&quot;: false,\r\n      &quot;CreateIndex&quot;: 45,\r\n      &quot;ModifyIndex&quot;: 45\r\n    }\r\n\r\nSolution:\r\n\r\n    curl http://192.168.99.103:8500/v1/catalog/service/apache-443 |\r\n    jq &#39;.[0] | &quot;http://&quot; + .Address + &quot;:&quot; + &quot;\\(.ServicePort)&quot;&#39;\r\n","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/36971694#36971694","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>While both of the above answers work well if key,value are strings, I had a situation to append a string and integer (jq errors using the above expressions) </p>\n\n<p>Requirement: To construct a url out below json</p>\n\n<pre><code>pradeep@seleniumframework&gt;curl http://192.168.99.103:8500/v1/catalog/service/apache-443 | jq .[0]\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   251  100   251    0     0   155k      0 --:--:-- --:--:-- --:--:--  245k\n{\n  \"Node\": \"myconsul\",\n  \"Address\": \"192.168.99.103\",\n  \"ServiceID\": \"4ce41e90ede4:compassionate_wozniak:443\",\n  \"ServiceName\": \"apache-443\",\n  \"ServiceTags\": [],\n  \"ServiceAddress\": \"\",\n  \"ServicePort\": 1443,\n  \"ServiceEnableTagOverride\": false,\n  \"CreateIndex\": 45,\n  \"ModifyIndex\": 45\n}\n</code></pre>\n\n<p>Solution:</p>\n\n<pre><code>curl http://192.168.99.103:8500/v1/catalog/service/apache-443 |\njq '.[0] | \"http://\" + .Address + \":\" + \"\\(.ServicePort)\"'\n</code></pre>\n"},{"owner":{"reputation":16509,"accept_rate":44,"display_name":"ThorSummoner","link":"https://stackoverflow.com/users/1695680/thorsummoner"},"is_accepted":false,"score":6,"creation_date":1500672676,"answer_id":45246993,"question_id":28164849,"share_link":"https://stackoverflow.com/a/45246993","body_markdown":"I got pretty close to what I wanted by doing something like this\r\n\r\n    cat my.json | jq &#39;.my.prefix[] | .primary_key + &quot;:&quot;, (.sub.prefix[] | &quot;    - &quot; + .sub_key)&#39; | tr -d &#39;&quot;&#39; \r\n\r\nThe output of which is close enough to yaml for me to usually import it into other tools without much problem. (I am still looking for a way to basicallt export a subset of the input json)","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/45246993#45246993","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>I got pretty close to what I wanted by doing something like this</p>\n\n<pre><code>cat my.json | jq '.my.prefix[] | .primary_key + \":\", (.sub.prefix[] | \"    - \" + .sub_key)' | tr -d '\"' \n</code></pre>\n\n<p>The output of which is close enough to yaml for me to usually import it into other tools without much problem. (I am still looking for a way to basicallt export a subset of the input json)</p>\n"},{"owner":{"reputation":309,"display_name":"TinyRoy","link":"https://stackoverflow.com/users/1292293/tinyroy"},"is_accepted":false,"score":18,"creation_date":1559850994,"answer_id":56484285,"question_id":28164849,"share_link":"https://stackoverflow.com/a/56484285","body_markdown":"This will produce an array of names\r\n\r\n```\r\n&gt; jq &#39;[ .users[] | (.first + &quot; &quot; + .last) ]&#39; ~/test.json\r\n\r\n[\r\n  &quot;Stevie Wonder&quot;,\r\n  &quot;Michael Jackson&quot;\r\n]\r\n```","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/56484285#56484285","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>This will produce an array of names</p>\n\n<pre><code>&gt; jq '[ .users[] | (.first + \" \" + .last) ]' ~/test.json\n\n[\n  \"Stevie Wonder\",\n  \"Michael Jackson\"\n]\n</code></pre>\n"},{"owner":{"reputation":841,"display_name":"optman","link":"https://stackoverflow.com/users/2787145/optman"},"is_accepted":false,"score":74,"creation_date":1561692300,"answer_id":56800543,"question_id":28164849,"share_link":"https://stackoverflow.com/a/56800543","body_markdown":"```\r\njq &#39;.users[]|.first,.last&#39; | paste - -\r\n```","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/56800543#56800543","title":"Using jq to parse and display multiple fields in a json serially","body":"<pre><code>jq '.users[]|.first,.last' | paste - -\n</code></pre>\n"},{"owner":{"reputation":1553,"display_name":"Ganesh Chandrasekaran","link":"https://stackoverflow.com/users/11086515/ganesh-chandrasekaran"},"is_accepted":false,"score":19,"creation_date":1584464606,"answer_id":60726989,"question_id":28164849,"share_link":"https://stackoverflow.com/a/60726989","body_markdown":"my approach will be (your json example is not well formed.. guess thats only a sample)\r\n\r\n\r\n    jq &#39;.Front[] | [.Name,.Out,.In,.Groups] | join(&quot;|&quot;)&#39;  front.json  &gt; output.txt\r\n\r\nreturns something like this \r\n\r\n    &quot;new.domain.com-80|8.8.8.8|192.168.2.2:80|192.168.3.29:80 192.168.3.30:80&quot;\r\n    &quot;new.domain.com -443|8.8.8.8|192.168.2.2:443|192.168.3.29:443 192.168.3.30:443&quot;\r\n\r\nand grep the output with regular expression. \r\n\r\n\r\n","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/60726989#60726989","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>my approach will be (your json example is not well formed.. guess thats only a sample)</p>\n\n<pre><code>jq '.Front[] | [.Name,.Out,.In,.Groups] | join(\"|\")'  front.json  &gt; output.txt\n</code></pre>\n\n<p>returns something like this </p>\n\n<pre><code>\"new.domain.com-80|8.8.8.8|192.168.2.2:80|192.168.3.29:80 192.168.3.30:80\"\n\"new.domain.com -443|8.8.8.8|192.168.2.2:443|192.168.3.29:443 192.168.3.30:443\"\n</code></pre>\n\n<p>and grep the output with regular expression. </p>\n"},{"owner":{"reputation":4048,"display_name":"ingomueller.net","link":"https://stackoverflow.com/users/651937/ingomueller-net"},"is_accepted":false,"score":60,"creation_date":1628157543,"answer_id":68664471,"question_id":28164849,"share_link":"https://stackoverflow.com/a/68664471","body_markdown":"In addition to what others have suggested, I think that two options are worth mentioning.\r\n\r\n### Print as CSV/TSV\r\n\r\n```bash\r\n$ cat file.json | jq -r &#39;.users[] | [.first, .last] | @tsv&#39;\r\nStevie  Wonder\r\nMichael Jackson\r\n```\r\n\r\n```bash\r\ncat file.json | jq -r &#39;.users[] | [.first, .last] | @csv&#39;\r\n&quot;Stevie&quot;,&quot;Wonder&quot;\r\n&quot;Michael&quot;,&quot;Jackson&quot;\r\n```\r\n\r\nThe first expression, `.users[]`, unnests the objects from the outer-most array as in the code given in the question. The next expression, `[.first, .last]`, creates a new array of the values for each input object, and the final expression uses the built-in functions `@tsv` and `@csv` to print all input arrays as tab-separated and comma-seperated values, respectively.\r\n\r\n### Print as JSON values\r\n\r\nSimilarly, it is possible to construct JSON values again, which is interesting if you just want to keep a subset of the fields:\r\n\r\n```bash\r\n$ cat file.json | jq -c &#39;.users[] | {first}&#39;\r\n{&quot;first&quot;:&quot;Stevie&quot;}\r\n{&quot;first&quot;:&quot;Michael&quot;}\r\n```","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially/68664471#68664471","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>In addition to what others have suggested, I think that two options are worth mentioning.</p>\n<h3>Print as CSV/TSV</h3>\n<pre class=\"lang-sh prettyprint-override\"><code>$ cat file.json | jq -r '.users[] | [.first, .last] | @tsv'\nStevie  Wonder\nMichael Jackson\n</code></pre>\n<pre class=\"lang-sh prettyprint-override\"><code>cat file.json | jq -r '.users[] | [.first, .last] | @csv'\n&quot;Stevie&quot;,&quot;Wonder&quot;\n&quot;Michael&quot;,&quot;Jackson&quot;\n</code></pre>\n<p>The first expression, <code>.users[]</code>, unnests the objects from the outer-most array as in the code given in the question. The next expression, <code>[.first, .last]</code>, creates a new array of the values for each input object, and the final expression uses the built-in functions <code>@tsv</code> and <code>@csv</code> to print all input arrays as tab-separated and comma-seperated values, respectively.</p>\n<h3>Print as JSON values</h3>\n<p>Similarly, it is possible to construct JSON values again, which is interesting if you just want to keep a subset of the fields:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ cat file.json | jq -c '.users[] | {first}'\n{&quot;first&quot;:&quot;Stevie&quot;}\n{&quot;first&quot;:&quot;Michael&quot;}\n</code></pre>\n"}],"owner":{"reputation":4941,"display_name":"San","link":"https://stackoverflow.com/users/3713971/san"},"is_answered":true,"view_count":401129,"up_vote_count":452,"answer_count":8,"score":452,"last_activity_date":1642751498,"creation_date":1422341673,"last_edit_date":1616840951,"question_id":28164849,"body_markdown":"I have this Json\r\n\r\n    {\r\n        &quot;users&quot;: [\r\n            {\r\n                &quot;first&quot;: &quot;Stevie&quot;,\r\n                &quot;last&quot;: &quot;Wonder&quot;\r\n            },\r\n            {\r\n                &quot;first&quot;: &quot;Michael&quot;,\r\n                &quot;last&quot;: &quot;Jackson&quot;\r\n            }\r\n        ]\r\n    }\r\n\r\nUsing jq I&#39;d like to display first and last name serially. Like so - \r\n\r\n    Stevie Wonder\r\n    Michael Jackson\r\n\r\nThis is how far I have gotten - \r\n\r\n    jq &#39;.users[].first, .users[].last&#39;\r\n\r\nBut it displays\r\n\r\n    &quot;Stevie&quot;\r\n    &quot;Michael&quot;\r\n    &quot;Wonder&quot;\r\n    &quot;Jackson&quot;\r\n\r\nNotice the following:\r\n\r\n1. The double quotes that I do not want.\r\n2. The carriage return that I do not want.\r\n3. It&#39;s jumbled up. My query displays all the first names first, and then all the last names. However, I want first-last, first-last pair.","link":"https://stackoverflow.com/questions/28164849/using-jq-to-parse-and-display-multiple-fields-in-a-json-serially","title":"Using jq to parse and display multiple fields in a json serially","body":"<p>I have this Json</p>\n<pre><code>{\n    &quot;users&quot;: [\n        {\n            &quot;first&quot;: &quot;Stevie&quot;,\n            &quot;last&quot;: &quot;Wonder&quot;\n        },\n        {\n            &quot;first&quot;: &quot;Michael&quot;,\n            &quot;last&quot;: &quot;Jackson&quot;\n        }\n    ]\n}\n</code></pre>\n<p>Using jq I'd like to display first and last name serially. Like so -</p>\n<pre><code>Stevie Wonder\nMichael Jackson\n</code></pre>\n<p>This is how far I have gotten -</p>\n<pre><code>jq '.users[].first, .users[].last'\n</code></pre>\n<p>But it displays</p>\n<pre><code>&quot;Stevie&quot;\n&quot;Michael&quot;\n&quot;Wonder&quot;\n&quot;Jackson&quot;\n</code></pre>\n<p>Notice the following:</p>\n<ol>\n<li>The double quotes that I do not want.</li>\n<li>The carriage return that I do not want.</li>\n<li>It's jumbled up. My query displays all the first names first, and then all the last names. However, I want first-last, first-last pair.</li>\n</ol>\n"},{"tags":["arrays","json","select","jq","negation"],"answers":[{"owner":{"reputation":19592,"accept_rate":77,"display_name":"Iain Samuel McLean Elder","link":"https://stackoverflow.com/users/111424/iain-samuel-mclean-elder"},"is_accepted":true,"score":651,"creation_date":1414947091,"answer_id":26701851,"question_id":26701538,"share_link":"https://stackoverflow.com/a/26701851","body_markdown":"Very close! In your `select` expression, you have to use a pipe (`|`) before `contains`.\r\n\r\nThis filter produces the expected output.\r\n\r\n    . - map(select(.Names[] | contains (&quot;data&quot;))) | .[] .Id\r\n\r\nThe [jq Cookbook](https://github.com/stedolan/jq/wiki/Cookbook#filter-objects-based-on-the-contents-of-a-key) has an example of the syntax.\r\n\r\n&gt; # Filter objects based on the contents of a key\r\n&gt; \r\n&gt; E.g., I only want objects whose genre key contains &quot;house&quot;.\r\n&gt; \r\n&gt;     $ json=&#39;[{&quot;genre&quot;:&quot;deep house&quot;}, {&quot;genre&quot;: &quot;progressive house&quot;}, {&quot;genre&quot;: &quot;dubstep&quot;}]&#39;\r\n&gt;     $ echo &quot;$json&quot; | jq -c &#39;.[] | select(.genre | contains(&quot;house&quot;))&#39;\r\n&gt;     {&quot;genre&quot;:&quot;deep house&quot;}\r\n&gt;     {&quot;genre&quot;:&quot;progressive house&quot;}\r\n\r\n[Colin D](https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/26701851?noredirect=1#comment65634694_26701851) asks how to preserve the JSON structure of the array, so that the final output is a single JSON array rather than a stream of JSON objects.\r\n\r\nThe simplest way is to wrap the whole expression in an array constructor:\r\n\r\n    $ echo &quot;$json&quot; | jq -c &#39;[ .[] | select( .genre | contains(&quot;house&quot;)) ]&#39;\r\n    [{&quot;genre&quot;:&quot;deep house&quot;},{&quot;genre&quot;:&quot;progressive house&quot;}]\r\n\r\nYou can also use the map function:\r\n\r\n    $ echo &quot;$json&quot; | jq -c &#39;map(select(.genre | contains(&quot;house&quot;)))&#39;\r\n    [{&quot;genre&quot;:&quot;deep house&quot;},{&quot;genre&quot;:&quot;progressive house&quot;}]\r\n\r\nmap unpacks the input array, applies the filter to every element, and creates a new array. In other words, `map(f)` is equivalent to `[.[]|f]`.\r\n","link":"https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/26701851#26701851","title":"How to filter an array of objects based on values in an inner array with jq?","body":"<p>Very close! In your <code>select</code> expression, you have to use a pipe (<code>|</code>) before <code>contains</code>.</p>\n\n<p>This filter produces the expected output.</p>\n\n<pre><code>. - map(select(.Names[] | contains (\"data\"))) | .[] .Id\n</code></pre>\n\n<p>The <a href=\"https://github.com/stedolan/jq/wiki/Cookbook#filter-objects-based-on-the-contents-of-a-key\" rel=\"noreferrer\">jq Cookbook</a> has an example of the syntax.</p>\n\n<blockquote>\n  <h1>Filter objects based on the contents of a key</h1>\n  \n  <p>E.g., I only want objects whose genre key contains \"house\".</p>\n\n<pre><code>$ json='[{\"genre\":\"deep house\"}, {\"genre\": \"progressive house\"}, {\"genre\": \"dubstep\"}]'\n$ echo \"$json\" | jq -c '.[] | select(.genre | contains(\"house\"))'\n{\"genre\":\"deep house\"}\n{\"genre\":\"progressive house\"}\n</code></pre>\n</blockquote>\n\n<p><a href=\"https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/26701851?noredirect=1#comment65634694_26701851\">Colin D</a> asks how to preserve the JSON structure of the array, so that the final output is a single JSON array rather than a stream of JSON objects.</p>\n\n<p>The simplest way is to wrap the whole expression in an array constructor:</p>\n\n<pre><code>$ echo \"$json\" | jq -c '[ .[] | select( .genre | contains(\"house\")) ]'\n[{\"genre\":\"deep house\"},{\"genre\":\"progressive house\"}]\n</code></pre>\n\n<p>You can also use the map function:</p>\n\n<pre><code>$ echo \"$json\" | jq -c 'map(select(.genre | contains(\"house\")))'\n[{\"genre\":\"deep house\"},{\"genre\":\"progressive house\"}]\n</code></pre>\n\n<p>map unpacks the input array, applies the filter to every element, and creates a new array. In other words, <code>map(f)</code> is equivalent to <code>[.[]|f]</code>.</p>\n"},{"owner":{"reputation":12949,"display_name":"jq170727","link":"https://stackoverflow.com/users/8379597/jq170727"},"is_accepted":false,"score":36,"creation_date":1504140804,"answer_id":45971669,"question_id":26701538,"share_link":"https://stackoverflow.com/a/45971669","body_markdown":"Here is another solution which uses [any/2](https://stedolan.github.io/jq/manual/#any,any\\(condition\\),any\\(generator;condition\\))\r\n\r\n    map(select(any(.Names[]; contains(&quot;data&quot;))|not)|.Id)[]\r\n\r\nwith the sample data and the `-r` option it produces:\r\n\r\n    cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b\r\n    a4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19\r\n","link":"https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/45971669#45971669","title":"How to filter an array of objects based on values in an inner array with jq?","body":"<p>Here is another solution which uses <a href=\"https://stedolan.github.io/jq/manual/#any,any(condition),any(generator;condition)\" rel=\"noreferrer\">any/2</a></p>\n<pre><code>map(select(any(.Names[]; contains(&quot;data&quot;))|not)|.Id)[]\n</code></pre>\n<p>with the sample data and the <code>-r</code> option it produces:</p>\n<pre><code>cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b\na4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19\n</code></pre>\n"},{"owner":{"reputation":21,"display_name":"Leia Ren&#233;e","link":"https://stackoverflow.com/users/17448063/leia-ren%c3%a9e"},"is_accepted":false,"score":1,"creation_date":1683643888,"answer_id":76210639,"question_id":26701538,"share_link":"https://stackoverflow.com/a/76210639","body_markdown":"Following jq map select expression produces the intended outcome:\r\n\r\n    aws ecr describe-images \\\r\n      --registry-id &lt;aws_account_id&gt; \\\r\n      --repository-name &lt;ecr_repository_name&gt; \\\r\n      --region &lt;aws_region&gt; \\\r\n      --no-cli-pager \\\r\n      --filter tagStatus=TAGGED \\\r\n    | jq &#39;.imageDetails | map(select(.imageTags[] | contains (&quot;version_tag&quot;)))&#39; ","link":"https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/76210639#76210639","title":"How to filter an array of objects based on values in an inner array with jq?","body":"<p>Following jq map select expression produces the intended outcome:</p>\n<pre><code>aws ecr describe-images \\\n  --registry-id &lt;aws_account_id&gt; \\\n  --repository-name &lt;ecr_repository_name&gt; \\\n  --region &lt;aws_region&gt; \\\n  --no-cli-pager \\\n  --filter tagStatus=TAGGED \\\n| jq '.imageDetails | map(select(.imageTags[] | contains (&quot;version_tag&quot;)))' \n</code></pre>\n"}],"owner":{"reputation":29886,"accept_rate":91,"display_name":"Abe Voelker","link":"https://stackoverflow.com/users/215168/abe-voelker"},"is_answered":true,"view_count":496361,"up_vote_count":443,"accepted_answer_id":26701851,"answer_count":3,"score":443,"last_activity_date":1683643888,"creation_date":1414945412,"last_edit_date":1616840927,"question_id":26701538,"body_markdown":"Given this input:\r\n\r\n    [\r\n      {\r\n        &quot;Id&quot;: &quot;cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b&quot;,\r\n        &quot;Names&quot;: [\r\n          &quot;condescending_jones&quot;,\r\n          &quot;loving_hoover&quot;\r\n        ]\r\n      },\r\n      {\r\n        &quot;Id&quot;: &quot;186db739b7509eb0114a09e14bcd16bf637019860d23c4fc20e98cbe068b55aa&quot;,\r\n        &quot;Names&quot;: [\r\n          &quot;foo_data&quot;\r\n        ]\r\n      },\r\n      {\r\n        &quot;Id&quot;: &quot;a4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19&quot;,\r\n        &quot;Names&quot;: [\r\n          &quot;jovial_wozniak&quot;\r\n        ]\r\n      },\r\n      {\r\n        &quot;Id&quot;: &quot;76b71c496556912012c20dc3cbd37a54a1f05bffad3d5e92466900a003fbb623&quot;,\r\n        &quot;Names&quot;: [\r\n          &quot;bar_data&quot;\r\n        ]\r\n      }\r\n    ]\r\n\r\nI&#39;m trying to construct a filter with [jq](http://stedolan.github.io/jq/) that returns all objects with `Id`s that **do not** contain &quot;data&quot; in the inner `Names` array, with the output being newline-separated.  For the above data, the output I&#39;d like is:\r\n\r\n    cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b\r\n    a4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19\r\n\r\nI think I&#39;m somewhat close with this:\r\n\r\n    (. - select(.Names[] contains(&quot;data&quot;))) | .[] .Id\r\n\r\nbut the `select` filter is not correct and it doesn&#39;t compile (get `error: syntax error, unexpected IDENT`).","link":"https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq","title":"How to filter an array of objects based on values in an inner array with jq?","body":"<p>Given this input:</p>\n<pre><code>[\n  {\n    &quot;Id&quot;: &quot;cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b&quot;,\n    &quot;Names&quot;: [\n      &quot;condescending_jones&quot;,\n      &quot;loving_hoover&quot;\n    ]\n  },\n  {\n    &quot;Id&quot;: &quot;186db739b7509eb0114a09e14bcd16bf637019860d23c4fc20e98cbe068b55aa&quot;,\n    &quot;Names&quot;: [\n      &quot;foo_data&quot;\n    ]\n  },\n  {\n    &quot;Id&quot;: &quot;a4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19&quot;,\n    &quot;Names&quot;: [\n      &quot;jovial_wozniak&quot;\n    ]\n  },\n  {\n    &quot;Id&quot;: &quot;76b71c496556912012c20dc3cbd37a54a1f05bffad3d5e92466900a003fbb623&quot;,\n    &quot;Names&quot;: [\n      &quot;bar_data&quot;\n    ]\n  }\n]\n</code></pre>\n<p>I'm trying to construct a filter with <a href=\"http://stedolan.github.io/jq/\" rel=\"noreferrer\">jq</a> that returns all objects with <code>Id</code>s that <strong>do not</strong> contain &quot;data&quot; in the inner <code>Names</code> array, with the output being newline-separated.  For the above data, the output I'd like is:</p>\n<pre><code>cb94e7a42732b598ad18a8f27454a886c1aa8bbba6167646d8f064cd86191e2b\na4b7e6f5752d8dcb906a5901f7ab82e403b9dff4eaaeebea767a04bac4aada19\n</code></pre>\n<p>I think I'm somewhat close with this:</p>\n<pre><code>(. - select(.Names[] contains(&quot;data&quot;))) | .[] .Id\n</code></pre>\n<p>but the <code>select</code> filter is not correct and it doesn't compile (get <code>error: syntax error, unexpected IDENT</code>).</p>\n"},{"tags":["json","bash","curl","jq"],"answers":[{"owner":{"reputation":40002,"accept_rate":59,"display_name":"&#201;douard Lopez","link":"https://stackoverflow.com/users/802365/%c3%89douard-lopez"},"is_accepted":false,"score":5,"creation_date":1390574722,"answer_id":21335518,"question_id":21334348,"share_link":"https://stackoverflow.com/a/21335518","body_markdown":"A simple solution is to install [`jshon`][1] library :\r\n\r\n    jshon -l &lt; /tmp/test.json\r\n    2\r\n\r\n  [1]: http://kmkeen.com/jshon/","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/21335518#21335518","title":"How to count items in JSON object using command line?","body":"<p>A simple solution is to install <a href=\"http://kmkeen.com/jshon/\" rel=\"noreferrer\"><code>jshon</code></a> library :</p>\n\n<pre><code>jshon -l &lt; /tmp/test.json\n2\n</code></pre>\n"},{"owner":{"reputation":7717,"display_name":"Ken","link":"https://stackoverflow.com/users/816157/ken"},"is_accepted":true,"score":616,"creation_date":1390679426,"answer_id":21355442,"question_id":21334348,"share_link":"https://stackoverflow.com/a/21355442","body_markdown":"Just throwing another solution in the mix...\r\n\r\nTry [`jq`][1], a lightweight and flexible command-line JSON processor:\r\n\r\n    jq length /tmp/test.json\r\n\r\nPrints the length of the array of objects.\r\n\r\n\r\n  [1]: http://stedolan.github.io/jq/\r\n","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/21355442#21355442","title":"How to count items in JSON object using command line?","body":"<p>Just throwing another solution in the mix...</p>\n\n<p>Try <a href=\"http://stedolan.github.io/jq/\" rel=\"noreferrer\"><code>jq</code></a>, a lightweight and flexible command-line JSON processor:</p>\n\n<pre><code>jq length /tmp/test.json\n</code></pre>\n\n<p>Prints the length of the array of objects.</p>\n"},{"owner":{"reputation":2546,"display_name":"nikolay","link":"https://stackoverflow.com/users/626067/nikolay"},"is_accepted":false,"score":85,"creation_date":1459419706,"answer_id":36330650,"question_id":21334348,"share_link":"https://stackoverflow.com/a/36330650","body_markdown":"The shortest expression is \r\n\r\n    curl &#39;http://…&#39; | jq length","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/36330650#36330650","title":"How to count items in JSON object using command line?","body":"<p>The shortest expression is </p>\n\n<pre><code>curl 'http://…' | jq length\n</code></pre>\n"},{"owner":{"reputation":3735,"accept_rate":80,"display_name":"yuvilio","link":"https://stackoverflow.com/users/462002/yuvilio"},"is_accepted":false,"score":81,"creation_date":1600716238,"answer_id":63998729,"question_id":21334348,"share_link":"https://stackoverflow.com/a/63998729","body_markdown":"You can also use [jq](https://stedolan.github.io/jq/) to track down the array within the returned json and then pipe that in to a _second_ `jq` call to get its length. Suppose it was in a property called `records`, like `{&quot;records&quot;:[...]}`.\r\n\r\n```bash\r\n$ curl https://my-source-of-json.com/list | jq -r &#39;.records | length&#39;\r\n2\r\n$ \r\n```","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/63998729#63998729","title":"How to count items in JSON object using command line?","body":"<p>You can also use <a href=\"https://stedolan.github.io/jq/\" rel=\"noreferrer\">jq</a> to track down the array within the returned json and then pipe that in to a <em>second</em> <code>jq</code> call to get its length. Suppose it was in a property called <code>records</code>, like <code>{&quot;records&quot;:[...]}</code>.</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ curl https://my-source-of-json.com/list | jq -r '.records | length'\n2\n$ \n</code></pre>\n"},{"owner":{"reputation":31,"display_name":"Y W","link":"https://stackoverflow.com/users/16395131/y-w"},"is_accepted":false,"score":3,"creation_date":1625618431,"answer_id":68278776,"question_id":21334348,"share_link":"https://stackoverflow.com/a/68278776","body_markdown":"try qic.  it works like jq/jello.  qic support interactive mode as well.\r\n\r\ncat test.json | qic &quot;len(_)&quot;\r\n\r\n\r\nhttps://walkerever.github.io/qic/\r\n","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/68278776#68278776","title":"How to count items in JSON object using command line?","body":"<p>try qic.  it works like jq/jello.  qic support interactive mode as well.</p>\n<p>cat test.json | qic &quot;len(_)&quot;</p>\n<p><a href=\"https://walkerever.github.io/qic/\" rel=\"nofollow noreferrer\">https://walkerever.github.io/qic/</a></p>\n"},{"owner":{"reputation":818,"display_name":"Dhruv Saraswat","link":"https://stackoverflow.com/users/11550411/dhruv-saraswat"},"is_accepted":false,"score":19,"creation_date":1629789054,"answer_id":68903201,"question_id":21334348,"share_link":"https://stackoverflow.com/a/68903201","body_markdown":"If the `JSON` is being read from a file, try this -\r\n\r\n```\r\nnumber_of_objects=`jq &#39;. | length&#39; json_file_name.json`\r\necho $number_of_objects\r\n```\r\n\r\nIf the `JSON` array is inside a key in the `JSON` as shown below -\r\n\r\n```\r\n{\r\n  &quot;fruits&quot;: [\r\n    &quot;apples&quot;,\r\n    &quot;oranges&quot;,\r\n    &quot;pears&quot;\r\n  ]\r\n}\r\n```\r\ntry this -\r\n```\r\nnumber_of_objects=`jq &#39;.fruits | length&#39; json_file_name.json`\r\necho $number_of_objects\r\n```\r\n(You&#39;ll have to download [`jq`][1] for this solution to work)\r\n\r\n\r\n  [1]: https://stedolan.github.io/jq/","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/68903201#68903201","title":"How to count items in JSON object using command line?","body":"<p>If the <code>JSON</code> is being read from a file, try this -</p>\n<pre><code>number_of_objects=`jq '. | length' json_file_name.json`\necho $number_of_objects\n</code></pre>\n<p>If the <code>JSON</code> array is inside a key in the <code>JSON</code> as shown below -</p>\n<pre><code>{\n  &quot;fruits&quot;: [\n    &quot;apples&quot;,\n    &quot;oranges&quot;,\n    &quot;pears&quot;\n  ]\n}\n</code></pre>\n<p>try this -</p>\n<pre><code>number_of_objects=`jq '.fruits | length' json_file_name.json`\necho $number_of_objects\n</code></pre>\n<p>(You'll have to download <a href=\"https://stedolan.github.io/jq/\" rel=\"noreferrer\"><code>jq</code></a> for this solution to work)</p>\n"},{"owner":{"reputation":7615,"accept_rate":83,"display_name":"Kellen Stuart","link":"https://stackoverflow.com/users/5361412/kellen-stuart"},"is_accepted":false,"score":5,"creation_date":1677012165,"answer_id":75525705,"question_id":21334348,"share_link":"https://stackoverflow.com/a/75525705","body_markdown":"Assume this structure:\r\n\r\n(stored in a variable named `json`)\r\n```\r\n{\r\n    &quot;results&quot;: [\r\n        { &quot;id&quot;: 1 }\r\n        { &quot;id&quot;: 2 }\r\n    ]\r\n\r\n}\r\n```\r\n\r\nIf you&#39;re looking to count how many are in the  `results` array, the command is:\r\n```\r\n$json | jq &#39;.results | length&#39;\r\n```","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line/75525705#75525705","title":"How to count items in JSON object using command line?","body":"<p>Assume this structure:</p>\n<p>(stored in a variable named <code>json</code>)</p>\n<pre><code>{\n    &quot;results&quot;: [\n        { &quot;id&quot;: 1 }\n        { &quot;id&quot;: 2 }\n    ]\n\n}\n</code></pre>\n<p>If you're looking to count how many are in the  <code>results</code> array, the command is:</p>\n<pre><code>$json | jq '.results | length'\n</code></pre>\n"}],"owner":{"reputation":40002,"accept_rate":59,"display_name":"&#201;douard Lopez","link":"https://stackoverflow.com/users/802365/%c3%89douard-lopez"},"is_answered":true,"view_count":286788,"up_vote_count":364,"accepted_answer_id":21355442,"answer_count":7,"score":362,"last_activity_date":1677012165,"creation_date":1390571239,"last_edit_date":1536498549,"question_id":21334348,"body_markdown":"I&#39;m getting this kind of `JSON` reply from a `curl` command:\r\n\r\n    [\r\n      {\r\n        &quot;cid&quot;: 49,\r\n        &quot;pyn&quot;: &quot;yi4&quot;,\r\n        &quot;hans&quot;: &quot;亿&quot;,\r\n        &quot;hant&quot;: &quot;億&quot;,\r\n        &quot;tid&quot;: 68,\r\n        &quot;l10n&quot;: &quot;cent million&quot;,\r\n        &quot;pid&quot;: 1,\r\n        &quot;pos&quot;: &quot;num&quot;,\r\n        &quot;pos_txt&quot;: &quot;&quot;\r\n      },\r\n      {\r\n        &quot;cid&quot;: 50,\r\n        &quot;pyn&quot;: &quot;yi4&quot;,\r\n        &quot;hans&quot;: &quot;亿&quot;,\r\n        &quot;hant&quot;: &quot;億&quot;,\r\n        &quot;tid&quot;: 69,\r\n        &quot;l10n&quot;: &quot;100 millions&quot;,\r\n        &quot;pid&quot;: 1,\r\n        &quot;pos&quot;: &quot;num&quot;,\r\n        &quot;pos_txt&quot;: &quot;&quot;\r\n      }\r\n    ]\r\n\r\nHow can I count the number of items in the array (here `2`), using `Bash` or a command line (e.g. `underscore`) ?","link":"https://stackoverflow.com/questions/21334348/how-to-count-items-in-json-object-using-command-line","title":"How to count items in JSON object using command line?","body":"<p>I'm getting this kind of <code>JSON</code> reply from a <code>curl</code> command:</p>\n\n<pre><code>[\n  {\n    \"cid\": 49,\n    \"pyn\": \"yi4\",\n    \"hans\": \"亿\",\n    \"hant\": \"億\",\n    \"tid\": 68,\n    \"l10n\": \"cent million\",\n    \"pid\": 1,\n    \"pos\": \"num\",\n    \"pos_txt\": \"\"\n  },\n  {\n    \"cid\": 50,\n    \"pyn\": \"yi4\",\n    \"hans\": \"亿\",\n    \"hant\": \"億\",\n    \"tid\": 69,\n    \"l10n\": \"100 millions\",\n    \"pid\": 1,\n    \"pos\": \"num\",\n    \"pos_txt\": \"\"\n  }\n]\n</code></pre>\n\n<p>How can I count the number of items in the array (here <code>2</code>), using <code>Bash</code> or a command line (e.g. <code>underscore</code>) ?</p>\n"},{"tags":["json","macos","command-line","installation","jq"],"answers":[{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":169,"creation_date":1465254832,"answer_id":37668210,"question_id":37668134,"share_link":"https://stackoverflow.com/a/37668210","body_markdown":"On a Mac, the &quot;most efficient&quot; way to install jq would probably be using [homebrew][1], e.g.\r\n\r\n    brew install jq\r\n\r\nIf you want the development version, you could try:\r\n\r\n    brew install --HEAD jq\r\n\r\nbut this has various pre-requisites.  \r\n\r\nDetailed instructions are on the &quot;Installation&quot; page of the jq wiki: https://github.com/jqlang/jq/wiki/Installation\r\n\r\nThe same page also includes details regarding installation from source, and has notes on installing with MacPorts (&quot;ports&quot;), asdf ([tag:asdf-vm]), and 0install (&quot;zero-install&quot;). \r\n\r\n---\r\nFootnote: one can also use `brew` to install the Go implementation of jq:\r\n\r\n    brew install gojq\r\n\r\n\r\n  [1]: https://brew.sh/","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/37668210#37668210","title":"How to install JQ on Mac on the command line?","body":"<p>On a Mac, the &quot;most efficient&quot; way to install jq would probably be using <a href=\"https://brew.sh/\" rel=\"noreferrer\">homebrew</a>, e.g.</p>\n<pre><code>brew install jq\n</code></pre>\n<p>If you want the development version, you could try:</p>\n<pre><code>brew install --HEAD jq\n</code></pre>\n<p>but this has various pre-requisites.</p>\n<p>Detailed instructions are on the &quot;Installation&quot; page of the jq wiki: <a href=\"https://github.com/jqlang/jq/wiki/Installation\" rel=\"noreferrer\">https://github.com/jqlang/jq/wiki/Installation</a></p>\n<p>The same page also includes details regarding installation from source, and has notes on installing with MacPorts (&quot;ports&quot;), asdf (<a href=\"/questions/tagged/asdf-vm\" class=\"post-tag\" title=\"show questions tagged &#39;asdf-vm&#39;\" aria-label=\"show questions tagged &#39;asdf-vm&#39;\" rel=\"tag\" aria-labelledby=\"tag-asdf-vm-tooltip-container\">asdf-vm</a>), and 0install (&quot;zero-install&quot;).</p>\n<hr />\n<p>Footnote: one can also use <code>brew</code> to install the Go implementation of jq:</p>\n<pre><code>brew install gojq\n</code></pre>\n"},{"owner":{"reputation":33,"display_name":"Antoine","link":"https://stackoverflow.com/users/6205485/antoine"},"is_accepted":false,"score":2,"creation_date":1475523870,"answer_id":39839250,"question_id":37668134,"share_link":"https://stackoverflow.com/a/39839250","body_markdown":"For most it is a breeze, however like you I had a difficult time installing jq \r\n\r\nThe best resources I found are: https://stedolan.github.io/jq/download/  and  http://macappstore.org/jq/\r\n\r\nHowever neither worked for me. I run python 2 &amp; 3, and use brew in addition to pip, as well as Jupyter. I was only successful after brew uninstall jq then updating brew and rebooting my system\r\n\r\nWhat worked for me was removing all previous installs then `pip install jq`","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/39839250#39839250","title":"How to install JQ on Mac on the command line?","body":"<p>For most it is a breeze, however like you I had a difficult time installing jq </p>\n\n<p>The best resources I found are: <a href=\"https://stedolan.github.io/jq/download/\" rel=\"nofollow\">https://stedolan.github.io/jq/download/</a>  and  <a href=\"http://macappstore.org/jq/\" rel=\"nofollow\">http://macappstore.org/jq/</a></p>\n\n<p>However neither worked for me. I run python 2 &amp; 3, and use brew in addition to pip, as well as Jupyter. I was only successful after brew uninstall jq then updating brew and rebooting my system</p>\n\n<p>What worked for me was removing all previous installs then <code>pip install jq</code></p>\n"},{"owner":{"reputation":8452,"accept_rate":49,"display_name":"Ajeet Khan","link":"https://stackoverflow.com/users/3026618/ajeet-khan"},"is_accepted":false,"score":342,"creation_date":1520960493,"answer_id":49261843,"question_id":37668134,"share_link":"https://stackoverflow.com/a/49261843","body_markdown":"You can install any application/packages with brew on mac. If you want to know the exact command just search your package on [https://brewinstall.org][1] and you will get the set of commands needed to install that package. \r\n\r\nFirst open terminal and install brew\r\n\r\n    ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; &lt; /dev/null 2&gt; /dev/null\r\n\r\nNow Install jq\r\n\r\n    brew install jq\r\n\r\n\r\n  [1]: https://brewinstall.org","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/49261843#49261843","title":"How to install JQ on Mac on the command line?","body":"<p>You can install any application/packages with brew on mac. If you want to know the exact command just search your package on <a href=\"https://brewinstall.org\" rel=\"noreferrer\">https://brewinstall.org</a> and you will get the set of commands needed to install that package. </p>\n\n<p>First open terminal and install brew</p>\n\n<pre><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" &lt; /dev/null 2&gt; /dev/null\n</code></pre>\n\n<p>Now Install jq</p>\n\n<pre><code>brew install jq\n</code></pre>\n"},{"owner":{"reputation":363,"display_name":"Mohammad Selim Miah","link":"https://stackoverflow.com/users/5444598/mohammad-selim-miah"},"is_accepted":false,"score":2,"creation_date":1567489491,"answer_id":57765667,"question_id":37668134,"share_link":"https://stackoverflow.com/a/57765667","body_markdown":"For CentOS, RHEL, Amazon Linux:\r\nsudo yum install jq","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/57765667#57765667","title":"How to install JQ on Mac on the command line?","body":"<p>For CentOS, RHEL, Amazon Linux:\nsudo yum install jq</p>\n"},{"owner":{"reputation":4275,"accept_rate":100,"display_name":"Stefan Collier","link":"https://stackoverflow.com/users/3396860/stefan-collier"},"is_accepted":false,"score":68,"creation_date":1568739801,"answer_id":57978952,"question_id":37668134,"share_link":"https://stackoverflow.com/a/57978952","body_markdown":"The simplest way to install `jq` and test that it works is through brew and then using the simplest filter that merely formats the JSON\r\n\r\n# Install \r\n`brew` is the easiest way to manage packages on a mac:\r\n```\r\nbrew install jq\r\n```\r\nNeed `brew`? Run the following command:\r\n```\r\n/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\r\n```\r\nFailing that: instructions to install and use are on https://brew.sh/\r\n\r\n# Test\r\nThe `.` filter takes its input and produces it unchanged as output. This is the identity operator. (quote the docs)\r\n```\r\necho &#39;{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:31, &quot;city&quot;:&quot;New York&quot; }&#39; | jq .\r\n```\r\nThe result should appear like so in your terminal:\r\n```\r\n{\r\n  &quot;name&quot;: &quot;John&quot;,\r\n  &quot;age&quot;: 31,\r\n  &quot;city&quot;: &quot;New York&quot;\r\n}\r\n```\r\n","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/57978952#57978952","title":"How to install JQ on Mac on the command line?","body":"<p>The simplest way to install <code>jq</code> and test that it works is through brew and then using the simplest filter that merely formats the JSON</p>\n\n<h1>Install</h1>\n\n<p><code>brew</code> is the easiest way to manage packages on a mac:</p>\n\n<pre><code>brew install jq\n</code></pre>\n\n<p>Need <code>brew</code>? Run the following command:</p>\n\n<pre><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n\n<p>Failing that: instructions to install and use are on <a href=\"https://brew.sh/\" rel=\"noreferrer\">https://brew.sh/</a></p>\n\n<h1>Test</h1>\n\n<p>The <code>.</code> filter takes its input and produces it unchanged as output. This is the identity operator. (quote the docs)</p>\n\n<pre><code>echo '{ \"name\":\"John\", \"age\":31, \"city\":\"New York\" }' | jq .\n</code></pre>\n\n<p>The result should appear like so in your terminal:</p>\n\n<pre><code>{\n  \"name\": \"John\",\n  \"age\": 31,\n  \"city\": \"New York\"\n}\n</code></pre>\n"},{"owner":{"reputation":40059,"accept_rate":40,"display_name":"stevec","link":"https://stackoverflow.com/users/5783745/stevec"},"is_accepted":false,"score":6,"creation_date":1616715380,"answer_id":66809017,"question_id":37668134,"share_link":"https://stackoverflow.com/a/66809017","body_markdown":"To make sure homebrew is installed and install `jq`\r\n\r\n```sh\r\ngit -C &quot;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&quot; fetch --unshallow \r\nbrew update\r\nbrew install jq\r\n```","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/66809017#66809017","title":"How to install JQ on Mac on the command line?","body":"<p>To make sure homebrew is installed and install <code>jq</code></p>\n<pre class=\"lang-sh prettyprint-override\"><code>git -C &quot;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&quot; fetch --unshallow \nbrew update\nbrew install jq\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":2,"creation_date":1624291363,"answer_id":68071170,"question_id":37668134,"share_link":"https://stackoverflow.com/a/68071170","body_markdown":"If you are looking for a good alternative to `homebrew` (whether in a Mac or Linux environment), one such is `0install` (&quot;Zero Install&quot;), which indeed has some advantages.  For example, it&#39;s trivially easy to have multiple versions of jq installed together.\r\n\r\nIf you already have 0install installed, to add jq it would be sufficient to type:\r\n\r\n\r\n    0install add jq https://apps.0install.net/utils/jq.xml\r\n\r\nThis installs a tiny script in ~/bin/jq, which you can use as though it were jq itself.\r\n\r\nTo install a particular version of jq, say jq 1.5, you just have to specify the version number:\r\n\r\n    0install add --version=1.5 jq1.5 https://apps.0install.net/utils/jq.xml\r\n\r\nFurther details about the versions of jq that are available using this &quot;feed&quot; for 0install can be obtained by viewing the above-mentioned URL in a browser.\r\n \r\n## Installing 0install\r\n\r\nOne option for installing 0install itself would of course be:\r\n\r\n     brew install 0install\r\n\r\nCurrently, a better option is to run:\r\n\r\n    curl -O https://get.0install.net/0install.sh &amp;&amp; chmod +x 0install.sh\r\n    ./0install.sh\r\n\r\nand then follow the directions.\r\n\r\nSee 0install.net for further details.\r\n","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/68071170#68071170","title":"How to install JQ on Mac on the command line?","body":"<p>If you are looking for a good alternative to <code>homebrew</code> (whether in a Mac or Linux environment), one such is <code>0install</code> (&quot;Zero Install&quot;), which indeed has some advantages.  For example, it's trivially easy to have multiple versions of jq installed together.</p>\n<p>If you already have 0install installed, to add jq it would be sufficient to type:</p>\n<pre><code>0install add jq https://apps.0install.net/utils/jq.xml\n</code></pre>\n<p>This installs a tiny script in ~/bin/jq, which you can use as though it were jq itself.</p>\n<p>To install a particular version of jq, say jq 1.5, you just have to specify the version number:</p>\n<pre><code>0install add --version=1.5 jq1.5 https://apps.0install.net/utils/jq.xml\n</code></pre>\n<p>Further details about the versions of jq that are available using this &quot;feed&quot; for 0install can be obtained by viewing the above-mentioned URL in a browser.</p>\n<h2>Installing 0install</h2>\n<p>One option for installing 0install itself would of course be:</p>\n<pre><code> brew install 0install\n</code></pre>\n<p>Currently, a better option is to run:</p>\n<pre><code>curl -O https://get.0install.net/0install.sh &amp;&amp; chmod +x 0install.sh\n./0install.sh\n</code></pre>\n<p>and then follow the directions.</p>\n<p>See 0install.net for further details.</p>\n"},{"owner":{"reputation":197,"display_name":"Abhishek Khaiwale","link":"https://stackoverflow.com/users/13293127/abhishek-khaiwale"},"is_accepted":false,"score":15,"creation_date":1650065102,"answer_id":71889817,"question_id":37668134,"share_link":"https://stackoverflow.com/a/71889817","body_markdown":"Check if homebrew is installed    \r\n\r\n    brew install jq\r\n\r\n","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/71889817#71889817","title":"How to install JQ on Mac on the command line?","body":"<p>Check if homebrew is installed</p>\n<pre><code>brew install jq\n</code></pre>\n"},{"owner":{"reputation":10768,"accept_rate":71,"display_name":"JL Peyret","link":"https://stackoverflow.com/users/1394353/jl-peyret"},"is_accepted":false,"score":2,"creation_date":1653765332,"answer_id":72418608,"question_id":37668134,"share_link":"https://stackoverflow.com/a/72418608","body_markdown":"Nothing agaist brew (I use both) but if you want to you can use [macports][1]\r\n\r\n````\r\nsudo port install jq\r\n````\r\n\r\nFWIW, [jc&#39;s][2] an interesting utility that plays very well with jq (its purpose is to json-ize command outputs).  And, yes, `brew install jc` or `sudo port install jc` both work.\r\n\r\n\r\n\r\n\r\n  [1]: https://www.macports.org/\r\n  [2]: https://github.com/kellyjonbrazil/jc","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/72418608#72418608","title":"How to install JQ on Mac on the command line?","body":"<p>Nothing agaist brew (I use both) but if you want to you can use <a href=\"https://www.macports.org/\" rel=\"nofollow noreferrer\">macports</a></p>\n<pre><code>sudo port install jq\n</code></pre>\n<p>FWIW, <a href=\"https://github.com/kellyjonbrazil/jc\" rel=\"nofollow noreferrer\">jc's</a> an interesting utility that plays very well with jq (its purpose is to json-ize command outputs).  And, yes, <code>brew install jc</code> or <code>sudo port install jc</code> both work.</p>\n"},{"owner":{"reputation":497,"display_name":"Boshra Jaber","link":"https://stackoverflow.com/users/14810654/boshra-jaber"},"is_accepted":false,"score":2,"creation_date":1664959184,"answer_id":73957844,"question_id":37668134,"share_link":"https://stackoverflow.com/a/73957844","body_markdown":"install `jq` without brew:\r\n`sudo apt install jq`","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line/73957844#73957844","title":"How to install JQ on Mac on the command line?","body":"<p>install <code>jq</code> without brew:\n<code>sudo apt install jq</code></p>\n"}],"owner":{"reputation":2961,"display_name":"Ross Brannigan","link":"https://stackoverflow.com/users/4360454/ross-brannigan"},"is_answered":true,"view_count":433209,"up_vote_count":286,"answer_count":10,"score":282,"last_activity_date":1685628010,"creation_date":1465254363,"last_edit_date":1624256274,"question_id":37668134,"body_markdown":"I need to know the most efficient way of installing JQ on Mac (El Capitan). The code is downloaded to my Mac but I would like to know how I can install and operate it via the command line.","link":"https://stackoverflow.com/questions/37668134/how-to-install-jq-on-mac-on-the-command-line","title":"How to install JQ on Mac on the command line?","body":"<p>I need to know the most efficient way of installing JQ on Mac (El Capitan). The code is downloaded to my Mac but I would like to know how I can install and operate it via the command line.</p>\n"},{"tags":["json","shell","unix","key","jq"],"answers":[{"owner":{"reputation":758283,"accept_rate":90,"display_name":"anubhava","link":"https://stackoverflow.com/users/548225/anubhava"},"is_accepted":true,"score":355,"creation_date":1397676971,"answer_id":23118607,"question_id":23118341,"share_link":"https://stackoverflow.com/a/23118607","body_markdown":"To get the keys in the order they appear in the original JSON use:\r\n```sh\r\njq &#39;keys_unsorted&#39; file.json\r\n```\r\n\r\nIf you want the keys sorted alphanumerically, you can use:\r\n```sh\r\njq &#39;keys&#39; file.json\r\n```\r\n\r\nComplete example\r\n```sh\r\n$ cat file.json\r\n{ &quot;Created-By&quot; : &quot;Apache Maven&quot;, &quot;Build-Number&quot; : &quot;&quot;, &quot;Archiver-Version&quot; : &quot;Plexus Archiver&quot;, &quot;Build-Id&quot; : &quot;&quot;,  &quot;Build-Tag&quot; : &quot;&quot;, &quot;Built-By&quot; : &quot;cporter&quot;}\r\n\r\n$ jq &#39;keys_unsorted&#39; file.json                                         \r\n[\r\n  &quot;Created-By&quot;,\r\n  &quot;Build-Number&quot;,\r\n  &quot;Archiver-Version&quot;,\r\n  &quot;Build-Id&quot;,\r\n  &quot;Build-Tag&quot;,\r\n  &quot;Built-By&quot;\r\n]\r\n\r\n$ jq &#39;keys&#39; file.json\r\n[\r\n  &quot;Archiver-Version&quot;,\r\n  &quot;Build-Id&quot;,\r\n  &quot;Build-Number&quot;,\r\n  &quot;Build-Tag&quot;,\r\n  &quot;Built-By&quot;,\r\n  &quot;Created-By&quot;\r\n]\r\n```","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/23118607#23118607","title":"How to get key names from JSON using jq","body":"<p>To get the keys in the order they appear in the original JSON use:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>jq 'keys_unsorted' file.json\n</code></pre>\n<p>If you want the keys sorted alphanumerically, you can use:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>jq 'keys' file.json\n</code></pre>\n<p>Complete example</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ cat file.json\n{ &quot;Created-By&quot; : &quot;Apache Maven&quot;, &quot;Build-Number&quot; : &quot;&quot;, &quot;Archiver-Version&quot; : &quot;Plexus Archiver&quot;, &quot;Build-Id&quot; : &quot;&quot;,  &quot;Build-Tag&quot; : &quot;&quot;, &quot;Built-By&quot; : &quot;cporter&quot;}\n\n$ jq 'keys_unsorted' file.json                                         \n[\n  &quot;Created-By&quot;,\n  &quot;Build-Number&quot;,\n  &quot;Archiver-Version&quot;,\n  &quot;Build-Id&quot;,\n  &quot;Build-Tag&quot;,\n  &quot;Built-By&quot;\n]\n\n$ jq 'keys' file.json\n[\n  &quot;Archiver-Version&quot;,\n  &quot;Build-Id&quot;,\n  &quot;Build-Number&quot;,\n  &quot;Build-Tag&quot;,\n  &quot;Built-By&quot;,\n  &quot;Created-By&quot;\n]\n</code></pre>\n"},{"owner":{"reputation":181,"display_name":"Elliot Pahl","link":"https://stackoverflow.com/users/4710453/elliot-pahl"},"is_accepted":false,"score":18,"creation_date":1498632951,"answer_id":44795551,"question_id":23118341,"share_link":"https://stackoverflow.com/a/44795551","body_markdown":"In combination with the above answer, you want to ask jq for raw output, so your last filter should be eg.:\r\n\r\n         cat input.json | jq -r &#39;keys&#39;\r\n\r\nFrom jq help:\r\n\r\n    \t -r\t\toutput raw strings, not JSON texts;\r\n\r\n","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/44795551#44795551","title":"How to get key names from JSON using jq","body":"<p>In combination with the above answer, you want to ask jq for raw output, so your last filter should be eg.:</p>\n\n<pre><code>     cat input.json | jq -r 'keys'\n</code></pre>\n\n<p>From jq help:</p>\n\n<pre><code>     -r     output raw strings, not JSON texts;\n</code></pre>\n"},{"owner":{"reputation":29557,"accept_rate":78,"display_name":"Chris Stryczynski","link":"https://stackoverflow.com/users/1663462/chris-stryczynski"},"is_accepted":false,"score":43,"creation_date":1499365260,"answer_id":44956291,"question_id":23118341,"share_link":"https://stackoverflow.com/a/44956291","body_markdown":"You need to use `jq &#39;keys[]&#39;`. For example:\r\n\r\n    echo &#39;{&quot;example1&quot; : 1, &quot;example2&quot; : 2, &quot;example3&quot; : 3}&#39; | jq &#39;keys[]&#39;\r\n\r\nWill output a line separated list:\r\n    \r\n    &quot;example1&quot;\r\n    &quot;example2&quot;\r\n    &quot;example3&quot;\r\n\r\n","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/44956291#44956291","title":"How to get key names from JSON using jq","body":"<p>You need to use <code>jq 'keys[]'</code>. For example:</p>\n\n<pre><code>echo '{\"example1\" : 1, \"example2\" : 2, \"example3\" : 3}' | jq 'keys[]'\n</code></pre>\n\n<p>Will output a line separated list:</p>\n\n<pre><code>\"example1\"\n\"example2\"\n\"example3\"\n</code></pre>\n"},{"owner":{"reputation":177,"display_name":"hrushikesh","link":"https://stackoverflow.com/users/1492552/hrushikesh"},"is_accepted":false,"score":6,"creation_date":1547235921,"answer_id":54153126,"question_id":23118341,"share_link":"https://stackoverflow.com/a/54153126","body_markdown":"`echo &#39;{&quot;ab&quot;: 1, &quot;cd&quot;: 2}&#39; | jq -r &#39;keys[]&#39;` prints all keys one key per line without quotes.\r\n\r\n    ab\r\n    cd","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/54153126#54153126","title":"How to get key names from JSON using jq","body":"<p><code>echo '{\"ab\": 1, \"cd\": 2}' | jq -r 'keys[]'</code> prints all keys one key per line without quotes.</p>\n\n<pre><code>ab\ncd\n</code></pre>\n"},{"owner":{"reputation":302,"display_name":"nrb","link":"https://stackoverflow.com/users/2777102/nrb"},"is_accepted":false,"score":10,"creation_date":1547337698,"answer_id":54164990,"question_id":23118341,"share_link":"https://stackoverflow.com/a/54164990","body_markdown":"To print keys on one line as csv:\r\n```\r\necho &#39;{&quot;b&quot;:&quot;2&quot;,&quot;a&quot;:&quot;1&quot;}&#39; | jq -r &#39;keys | [ .[] | tostring ] | @csv&#39;\r\n```\r\nOutput:\r\n```\r\n&quot;a&quot;,&quot;b&quot;\r\n```\r\n\r\nFor csv completeness ... to print values on one line as csv:\r\n```\r\necho &#39;{&quot;b&quot;:&quot;2&quot;,&quot;a&quot;:&quot;1&quot;}&#39; | jq -rS . | jq -r &#39;. | [ .[] | tostring ] | @csv&#39;\r\n```\r\nOutput:\r\n```\r\n&quot;1&quot;,&quot;2&quot;\r\n```","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/54164990#54164990","title":"How to get key names from JSON using jq","body":"<p>To print keys on one line as csv:</p>\n\n<pre><code>echo '{\"b\":\"2\",\"a\":\"1\"}' | jq -r 'keys | [ .[] | tostring ] | @csv'\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>\"a\",\"b\"\n</code></pre>\n\n<p>For csv completeness ... to print values on one line as csv:</p>\n\n<pre><code>echo '{\"b\":\"2\",\"a\":\"1\"}' | jq -rS . | jq -r '. | [ .[] | tostring ] | @csv'\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>\"1\",\"2\"\n</code></pre>\n"},{"owner":{"reputation":195,"display_name":"Ron Martinez","link":"https://stackoverflow.com/users/1935675/ron-martinez"},"is_accepted":false,"score":2,"creation_date":1588006098,"answer_id":61464000,"question_id":23118341,"share_link":"https://stackoverflow.com/a/61464000","body_markdown":"Here&#39;s another way of getting a Bash array with the example JSON given by @anubhava in his answer:\r\n\r\n```bash\r\narr=($(jq --raw-output &#39;keys_unsorted | @sh&#39; file.json))\r\n\r\necho ${arr[0]}    # &#39;Archiver-Version&#39;\r\necho ${arr[1]}    # &#39;Build-Id&#39;\r\necho ${arr[2]}    # &#39;Build-Jdk&#39;\r\n```\r\n","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/61464000#61464000","title":"How to get key names from JSON using jq","body":"<p>Here's another way of getting a Bash array with the example JSON given by @anubhava in his answer:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>arr=($(jq --raw-output 'keys_unsorted | @sh' file.json))\n\necho ${arr[0]}    # 'Archiver-Version'\necho ${arr[1]}    # 'Build-Id'\necho ${arr[2]}    # 'Build-Jdk'\n</code></pre>\n"},{"owner":{"reputation":9989,"accept_rate":75,"display_name":"Gianfranco P.","link":"https://stackoverflow.com/users/728287/gianfranco-p"},"is_accepted":false,"score":76,"creation_date":1590071924,"answer_id":61937001,"question_id":23118341,"share_link":"https://stackoverflow.com/a/61937001","body_markdown":"To get the keys on a deeper node in a JSON:\r\n\r\n```\r\necho &#39;{&quot;data&quot;: &quot;1&quot;, &quot;user&quot;: { &quot;name&quot;: 2, &quot;phone&quot;: 3 } }&#39; | jq &#39;.user | keys[]&#39;\r\n&quot;name&quot;\r\n&quot;phone&quot;\r\n```","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/61937001#61937001","title":"How to get key names from JSON using jq","body":"<p>To get the keys on a deeper node in a JSON:</p>\n<pre><code>echo '{&quot;data&quot;: &quot;1&quot;, &quot;user&quot;: { &quot;name&quot;: 2, &quot;phone&quot;: 3 } }' | jq '.user | keys[]'\n&quot;name&quot;\n&quot;phone&quot;\n</code></pre>\n"},{"owner":{"reputation":25538,"accept_rate":61,"display_name":"freedev","link":"https://stackoverflow.com/users/336827/freedev"},"is_accepted":false,"score":13,"creation_date":1619333106,"answer_id":67250524,"question_id":23118341,"share_link":"https://stackoverflow.com/a/67250524","body_markdown":"If your input is an array of objects,\r\n\r\n    [\r\n      { \r\n        &quot;a01&quot; : { &quot;name&quot; : &quot;A&quot;, &quot;user&quot; : &quot;B&quot; }\r\n      },\r\n      { \r\n        &quot;a02&quot; : { &quot;name&quot; : &quot;C&quot;, &quot;user&quot; : &quot;D&quot; }\r\n      }\r\n    ]\r\n\r\ntry with:\r\n\r\n    jq &#39;.[] | keys[]&#39;","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/67250524#67250524","title":"How to get key names from JSON using jq","body":"<p>If your input is an array of objects,</p>\n<pre><code>[\n  { \n    &quot;a01&quot; : { &quot;name&quot; : &quot;A&quot;, &quot;user&quot; : &quot;B&quot; }\n  },\n  { \n    &quot;a02&quot; : { &quot;name&quot; : &quot;C&quot;, &quot;user&quot; : &quot;D&quot; }\n  }\n]\n</code></pre>\n<p>try with:</p>\n<pre><code>jq '.[] | keys[]'\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":8,"creation_date":1619710946,"answer_id":67320733,"question_id":23118341,"share_link":"https://stackoverflow.com/a/67320733","body_markdown":"Oddly enough, the accepted answer doesn’t actually answer the Q exactly, so for reference, here is a solution that does:\r\n\r\n    $ jq -r &#39;keys_unsorted[]&#39; file.json","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/67320733#67320733","title":"How to get key names from JSON using jq","body":"<p>Oddly enough, the accepted answer doesn’t actually answer the Q exactly, so for reference, here is a solution that does:</p>\n<pre><code>$ jq -r 'keys_unsorted[]' file.json\n</code></pre>\n"}],"owner":{"reputation":2808,"accept_rate":62,"display_name":"Ezhilan Mahalingam","link":"https://stackoverflow.com/users/2476906/ezhilan-mahalingam"},"is_answered":true,"view_count":249126,"up_vote_count":246,"accepted_answer_id":23118607,"answer_count":9,"score":245,"last_activity_date":1675797392,"creation_date":1397676083,"last_edit_date":1564316259,"question_id":23118341,"body_markdown":"`curl http://testhost.test.com:8080/application/app/version | jq &#39;.version&#39; | jq &#39;.[]&#39;`\r\n\r\n The above command outputs only the values as below:\r\n\r\n    &quot;madireddy@test.com&quot;\r\n    \r\n    &quot;2323&quot;\r\n    \r\n    &quot;test&quot;\r\n    \r\n    &quot;02-03-2014-13:41&quot;\r\n    \r\n    &quot;application&quot;\r\n    \r\n How can I get the key names instead like the below:\r\n    \r\n    email\r\n    \r\n    versionID\r\n    \r\n    context\r\n    \r\n    date\r\n    \r\n    versionName\r\n\r\n","link":"https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq","title":"How to get key names from JSON using jq","body":"<p><code>curl http://testhost.test.com:8080/application/app/version | jq '.version' | jq '.[]'</code></p>\n\n<p>The above command outputs only the values as below:</p>\n\n<pre><code>\"madireddy@test.com\"\n\n\"2323\"\n\n\"test\"\n\n\"02-03-2014-13:41\"\n\n\"application\"\n</code></pre>\n\n<p>How can I get the key names instead like the below:</p>\n\n<pre><code>email\n\nversionID\n\ncontext\n\ndate\n\nversionName\n</code></pre>\n"},{"tags":["jq","ndjson"],"answers":[{"owner":{"display_name":"user3899165"},"is_accepted":false,"score":320,"creation_date":1453005961,"answer_id":34835208,"question_id":34834519,"share_link":"https://stackoverflow.com/a/34835208","body_markdown":"You can use `jq &#39;.[] | .login, .id&#39;` to obtain each login followed by its id.","link":"https://stackoverflow.com/questions/34834519/how-do-i-select-multiple-fields-in-jq/34835208#34835208","title":"How do I select multiple fields in jq?","body":"<p>You can use <code>jq '.[] | .login, .id'</code> to obtain each login followed by its id.</p>\n"},{"owner":{"reputation":13610,"accept_rate":60,"display_name":"Peter V. M&#248;rch","link":"https://stackoverflow.com/users/345716/peter-v-m%c3%b8rch"},"is_accepted":false,"score":146,"creation_date":1498111957,"answer_id":44691469,"question_id":34834519,"share_link":"https://stackoverflow.com/a/44691469","body_markdown":"This works for me:\r\n\r\n    &gt; echo &#39;{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}&#39; | jq &#39;{a,b}&#39;\r\n    {\r\n      &quot;a&quot;: 1,\r\n      &quot;b&quot;: 2\r\n    }\r\n    {\r\n      &quot;a&quot;: 1,\r\n      &quot;b&quot;: 2\r\n    }","link":"https://stackoverflow.com/questions/34834519/how-do-i-select-multiple-fields-in-jq/44691469#44691469","title":"How do I select multiple fields in jq?","body":"<p>This works for me:</p>\n\n<pre><code>&gt; echo '{\"a\":1,\"b\":2,\"c\":3}{\"a\":1,\"b\":2,\"c\":3}' | jq '{a,b}'\n{\n  \"a\": 1,\n  \"b\": 2\n}\n{\n  \"a\": 1,\n  \"b\": 2\n}\n</code></pre>\n"},{"owner":{"reputation":701,"display_name":"vreyespue","link":"https://stackoverflow.com/users/6261650/vreyespue"},"is_accepted":false,"score":25,"creation_date":1554289922,"answer_id":55493777,"question_id":34834519,"share_link":"https://stackoverflow.com/a/55493777","body_markdown":"In order to select values which are indented to different levels (i.e. both first and second level), you might use the following:\r\n\r\n    echo &#39;[{&quot;a&quot;:{&quot;aa&quot;:1,&quot;ab&quot;:2},&quot;b&quot;:3,&quot;c&quot;:4},{&quot;a&quot;:{&quot;aa&quot;:5,&quot;ab&quot;:6},&quot;b&quot;:7,&quot;c&quot;:8}]&#39; \\\r\n\t     | jq &#39;.[]|[.a.aa,.a.ab,.b]&#39;\r\n    \r\n    [\r\n      1,\r\n      2,\r\n      3\r\n    ]\r\n    [\r\n      5,\r\n      6,\r\n      7\r\n    ]","link":"https://stackoverflow.com/questions/34834519/how-do-i-select-multiple-fields-in-jq/55493777#55493777","title":"How do I select multiple fields in jq?","body":"<p>In order to select values which are indented to different levels (i.e. both first and second level), you might use the following:</p>\n<pre><code>echo '[{&quot;a&quot;:{&quot;aa&quot;:1,&quot;ab&quot;:2},&quot;b&quot;:3,&quot;c&quot;:4},{&quot;a&quot;:{&quot;aa&quot;:5,&quot;ab&quot;:6},&quot;b&quot;:7,&quot;c&quot;:8}]' \\\n     | jq '.[]|[.a.aa,.a.ab,.b]'\n\n[\n  1,\n  2,\n  3\n]\n[\n  5,\n  6,\n  7\n]\n</code></pre>\n"},{"owner":{"reputation":599,"display_name":"WYC","link":"https://stackoverflow.com/users/12876112/wyc"},"is_accepted":false,"score":48,"creation_date":1603161373,"answer_id":64437671,"question_id":34834519,"share_link":"https://stackoverflow.com/a/64437671","body_markdown":"Just provide one more example here (jq-1.6):\r\n\r\nWalk through an array and select a field of an object element and a field of object in that object\r\n```\r\necho &#39;[{&quot;id&quot;:1, &quot;private_info&quot;: {&quot;name&quot;: &quot;Ivy&quot;, &quot;age&quot;: 18}}, {&quot;id&quot;:2, &quot;private_info&quot;: {&quot;name&quot;: &quot;Tommy&quot;, &quot;aga&quot;: 18}}]&#39; | jq &quot;.[] | {id: .id, name: .private_info.name}&quot; -\r\n\r\n{\r\n  &quot;id&quot;: 1,\r\n  &quot;name&quot;: &quot;Ivy&quot;\r\n}\r\n{\r\n  &quot;id&quot;: 2,\r\n  &quot;name&quot;: &quot;Tommy&quot;\r\n}\r\n```\r\n\r\nWithout the example data:  \r\n```\r\njq &quot;.[] | {id, name: .private_info.name}&quot; -\r\n```\r\n\r\n`.[]`: walk through an array\r\n\r\n`{id, name: .private_info.name}`: take .id and .private_info.name and wrap it into an object with field name &quot;id&quot; and &quot;name&quot; respectively\r\n","link":"https://stackoverflow.com/questions/34834519/how-do-i-select-multiple-fields-in-jq/64437671#64437671","title":"How do I select multiple fields in jq?","body":"<p>Just provide one more example here (jq-1.6):</p>\n<p>Walk through an array and select a field of an object element and a field of object in that object</p>\n<pre><code>echo '[{&quot;id&quot;:1, &quot;private_info&quot;: {&quot;name&quot;: &quot;Ivy&quot;, &quot;age&quot;: 18}}, {&quot;id&quot;:2, &quot;private_info&quot;: {&quot;name&quot;: &quot;Tommy&quot;, &quot;aga&quot;: 18}}]' | jq &quot;.[] | {id: .id, name: .private_info.name}&quot; -\n\n{\n  &quot;id&quot;: 1,\n  &quot;name&quot;: &quot;Ivy&quot;\n}\n{\n  &quot;id&quot;: 2,\n  &quot;name&quot;: &quot;Tommy&quot;\n}\n</code></pre>\n<p>Without the example data:</p>\n<pre><code>jq &quot;.[] | {id, name: .private_info.name}&quot; -\n</code></pre>\n<p><code>.[]</code>: walk through an array</p>\n<p><code>{id, name: .private_info.name}</code>: take .id and .private_info.name and wrap it into an object with field name &quot;id&quot; and &quot;name&quot; respectively</p>\n"}],"owner":{"reputation":2487,"accept_rate":0,"display_name":"J. Groesser","link":"https://stackoverflow.com/users/5790543/j-groesser"},"is_answered":true,"view_count":230604,"up_vote_count":243,"answer_count":4,"score":242,"last_activity_date":1678813531,"creation_date":1452998304,"last_edit_date":1678813531,"question_id":34834519,"body_markdown":"My input file is newline delimited JSON (`ndjson`) looking something like this:\r\n\r\n    {\r\n      &quot;login&quot;: &quot;dmaxfield&quot;,\r\n      &quot;id&quot;: 7449977,\r\n      ...\r\n    }\r\n    {\r\n      &quot;login&quot;: &quot;dmaxfield&quot;,\r\n      &quot;id&quot;: 7449977,\r\n      ...\r\n    }\r\n\r\nI can get all the `login` names with this : `cat members | jq &#39;.[].login&#39;` but I have not been able to crack the syntax to get both the `login` _and_ `id`?","link":"https://stackoverflow.com/questions/34834519/how-do-i-select-multiple-fields-in-jq","title":"How do I select multiple fields in jq?","body":"<p>My input file is newline delimited JSON (<code>ndjson</code>) looking something like this:</p>\n<pre><code>{\n  &quot;login&quot;: &quot;dmaxfield&quot;,\n  &quot;id&quot;: 7449977,\n  ...\n}\n{\n  &quot;login&quot;: &quot;dmaxfield&quot;,\n  &quot;id&quot;: 7449977,\n  ...\n}\n</code></pre>\n<p>I can get all the <code>login</code> names with this : <code>cat members | jq '.[].login'</code> but I have not been able to crack the syntax to get both the <code>login</code> <em>and</em> <code>id</code>?</p>\n"},{"tags":["shell","pipe","jq"],"answers":[{"owner":{"reputation":494548,"display_name":"chepner","link":"https://stackoverflow.com/users/1126841/chepner"},"is_accepted":true,"score":391,"creation_date":1445377103,"answer_id":33247259,"question_id":33247228,"share_link":"https://stackoverflow.com/a/33247259","body_markdown":"You need to supply a filter as an argument. To pass the JSON through unmodified other than the pretty printing `jq` provides by default, use the identity filter `.`:\r\n\r\n    curl -s https://api.github.com/users/octocat/repos | jq &#39;.&#39; | cat","link":"https://stackoverflow.com/questions/33247228/how-to-use-jq-in-a-shell-pipeline/33247259#33247259","title":"How to use `jq` in a shell pipeline?","body":"<p>You need to supply a filter as an argument. To pass the JSON through unmodified other than the pretty printing <code>jq</code> provides by default, use the identity filter <code>.</code>:</p>\n\n<pre><code>curl -s https://api.github.com/users/octocat/repos | jq '.' | cat\n</code></pre>\n"},{"owner":{"reputation":43601,"accept_rate":84,"display_name":"mkobit","link":"https://stackoverflow.com/users/627727/mkobit"},"is_accepted":false,"score":18,"creation_date":1491337544,"answer_id":43217051,"question_id":33247228,"share_link":"https://stackoverflow.com/a/43217051","body_markdown":"One use case I have found myself doing frequently as well is *&quot;How do I construct JSON data to supply into other shell commands, for example `curl`?&quot;* The way I do this is by using the `--null-input/-n` option:\r\n\r\n&gt; Don’t read any input at all! Instead, the filter is run once using `null` as the input. This is useful when using `jq` as a simple calculator or to construct JSON data from scratch.\r\n\r\nAnd an example passing it into `curl`:\r\n\r\n    jq -n &#39;{key: &quot;value&quot;}&#39; | curl -d @- \\\r\n      --url &#39;https://some.url.com&#39; \\\r\n      -H &#39;Content-Type: application/json&#39; \\\r\n      -H &#39;Accept: application/json&#39;\r\n","link":"https://stackoverflow.com/questions/33247228/how-to-use-jq-in-a-shell-pipeline/43217051#43217051","title":"How to use `jq` in a shell pipeline?","body":"<p>One use case I have found myself doing frequently as well is <em>\"How do I construct JSON data to supply into other shell commands, for example <code>curl</code>?\"</em> The way I do this is by using the <code>--null-input/-n</code> option:</p>\n\n<blockquote>\n  <p>Don’t read any input at all! Instead, the filter is run once using <code>null</code> as the input. This is useful when using <code>jq</code> as a simple calculator or to construct JSON data from scratch.</p>\n</blockquote>\n\n<p>And an example passing it into <code>curl</code>:</p>\n\n<pre><code>jq -n '{key: \"value\"}' | curl -d @- \\\n  --url 'https://some.url.com' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n</code></pre>\n"}],"owner":{"reputation":15531,"accept_rate":88,"display_name":"mgalgs","link":"https://stackoverflow.com/users/209050/mgalgs"},"is_answered":true,"view_count":123482,"up_vote_count":237,"accepted_answer_id":33247259,"answer_count":2,"score":237,"last_activity_date":1621620685,"creation_date":1445376951,"last_edit_date":1621620685,"question_id":33247228,"body_markdown":"I can&#39;t seem to get `jq` to behave &quot;normally&quot; in a shell pipeline.  For example:\r\n\r\n    $ curl -s https://api.github.com/users/octocat/repos | jq | cat\r\n\r\nresults in `jq` simply printing out its help text*.  The same thing happens if I try to redirect `jq`&#39;s output to a file:\r\n\r\n    $ curl -s https://api.github.com/users/octocat/repos | jq &gt; /tmp/stuff.json\r\n\r\nIs `jq` deliberately bailing out if it determines that it&#39;s not being run from a tty?  How can I prevent this behavior so that I can use `jq` in a pipeline?\r\n\r\nEdit: it looks like this is no longer an issue in recent versions of `jq`. I have `jq-1.6` now and the examples above work as expected.\r\n\r\n---\r\n\r\n\\* &lt;sub&gt;(I realize this example contains a [useless use of cat](http://porkmail.org/era/unix/award.html); it&#39;s for illustration purposes only)&lt;/sub&gt;","link":"https://stackoverflow.com/questions/33247228/how-to-use-jq-in-a-shell-pipeline","title":"How to use `jq` in a shell pipeline?","body":"<p>I can't seem to get <code>jq</code> to behave &quot;normally&quot; in a shell pipeline.  For example:</p>\n<pre><code>$ curl -s https://api.github.com/users/octocat/repos | jq | cat\n</code></pre>\n<p>results in <code>jq</code> simply printing out its help text*.  The same thing happens if I try to redirect <code>jq</code>'s output to a file:</p>\n<pre><code>$ curl -s https://api.github.com/users/octocat/repos | jq &gt; /tmp/stuff.json\n</code></pre>\n<p>Is <code>jq</code> deliberately bailing out if it determines that it's not being run from a tty?  How can I prevent this behavior so that I can use <code>jq</code> in a pipeline?</p>\n<p>Edit: it looks like this is no longer an issue in recent versions of <code>jq</code>. I have <code>jq-1.6</code> now and the examples above work as expected.</p>\n<hr />\n<p>* <sub>(I realize this example contains a <a href=\"http://porkmail.org/era/unix/award.html\" rel=\"noreferrer\">useless use of cat</a>; it's for illustration purposes only)</sub></p>\n"},{"tags":["json","bash","environment-variables","jq"],"answers":[{"owner":{"reputation":172465,"accept_rate":77,"display_name":"Gilles Qu&#233;not","link":"https://stackoverflow.com/users/465183/gilles-qu%c3%a9not"},"is_accepted":false,"score":18,"creation_date":1476379850,"answer_id":40027427,"question_id":40027395,"share_link":"https://stackoverflow.com/a/40027427","body_markdown":"It&#39;s a quote issue, you need :\r\n\r\n    projectID=$(\r\n      cat file.json | jq -r &quot;.resource[] | select(.username==\\&quot;$EMAILID\\&quot;) | .id&quot;\r\n    )\r\n\r\nIf you put _single quotes_ to delimit the main string, the shell takes `$EMAILID` literally.\r\n\r\n&quot;Double quote&quot; every literal that contains spaces/metacharacters and _every_ expansion: `&quot;$var&quot;`, `&quot;$(command &quot;$var&quot;)&quot;`, `&quot;${array[@]}&quot;`, `&quot;a &amp; b&quot;`. Use `&#39;single quotes&#39;` for code or literal `$&#39;s: &#39;Costs $5 US&#39;`, `ssh host &#39;echo &quot;$HOSTNAME&quot;&#39;`. See    \r\n&lt;http://mywiki.wooledge.org/Quotes&gt;    \r\n&lt;http://mywiki.wooledge.org/Arguments&gt;    \r\n&lt;http://wiki.bash-hackers.org/syntax/words&gt;    \r\n\r\n","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/40027427#40027427","title":"Passing bash variable to jq","body":"<p>It's a quote issue, you need :</p>\n<pre><code>projectID=$(\n  cat file.json | jq -r &quot;.resource[] | select(.username==\\&quot;$EMAILID\\&quot;) | .id&quot;\n)\n</code></pre>\n<p>If you put <em>single quotes</em> to delimit the main string, the shell takes <code>$EMAILID</code> literally.</p>\n<p>&quot;Double quote&quot; every literal that contains spaces/metacharacters and <em>every</em> expansion: <code>&quot;$var&quot;</code>, <code>&quot;$(command &quot;$var&quot;)&quot;</code>, <code>&quot;${array[@]}&quot;</code>, <code>&quot;a &amp; b&quot;</code>. Use <code>'single quotes'</code> for code or literal <code>$'s: 'Costs $5 US'</code>, <code>ssh host 'echo &quot;$HOSTNAME&quot;'</code>. See<br />\n<a href=\"http://mywiki.wooledge.org/Quotes\" rel=\"nofollow noreferrer\">http://mywiki.wooledge.org/Quotes</a><br />\n<a href=\"http://mywiki.wooledge.org/Arguments\" rel=\"nofollow noreferrer\">http://mywiki.wooledge.org/Arguments</a><br />\n<a href=\"http://wiki.bash-hackers.org/syntax/words\" rel=\"nofollow noreferrer\">http://wiki.bash-hackers.org/syntax/words</a></p>\n"},{"owner":{"reputation":2901,"display_name":"asidd","link":"https://stackoverflow.com/users/7015163/asidd"},"is_accepted":false,"score":53,"creation_date":1476380481,"answer_id":40027614,"question_id":40027395,"share_link":"https://stackoverflow.com/a/40027614","body_markdown":"I resolved this issue by escaping the inner double quotes\r\n\r\n    projectID=$(cat file.json | jq -r &quot;.resource[] | select(.username==\\&quot;$EMAILID\\&quot;) | .id&quot;)","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/40027614#40027614","title":"Passing bash variable to jq","body":"<p>I resolved this issue by escaping the inner double quotes</p>\n\n<pre><code>projectID=$(cat file.json | jq -r \".resource[] | select(.username==\\\"$EMAILID\\\") | .id\")\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":true,"score":359,"creation_date":1476380560,"answer_id":40027637,"question_id":40027395,"share_link":"https://stackoverflow.com/a/40027637","body_markdown":"Consider also passing in the shell variable (EMAILID) as a jq variable (here also EMAILID, for the sake of illustration):\r\n\r\n       projectID=$(jq -r --arg EMAILID &quot;$EMAILID&quot; &#39;\r\n            .resource[]\r\n            | select(.username==$EMAILID) \r\n            | .id&#39; file.json)\r\n\r\n\r\n\r\n### Postscript\r\n\r\nFor the record, another possibility would be to use jq&#39;s `env` function for accessing environment variables.  For example, consider this sequence of bash commands:\r\n\r\n    EMAILID=foo@bar.com  # not exported\r\n    EMAILID=&quot;$EMAILID&quot; jq -n &#39;env.EMAILID&#39;\r\n\r\nThe output is a JSON string:\r\n\r\n    &quot;foo@bar.com&quot;\r\n\r\n\r\n### shell arrays\r\nUnfortunately, shell arrays are a different kettle of fish.\r\nHere are two SO resources regarding the ingestion of such arrays:\r\n\r\nhttps://stackoverflow.com/questions/61588841/jq-create-json-array-using-bash-array-with-space\r\n\r\nhttps://stackoverflow.com/questions/49184557/convert-bash-array-to-json-array-and-insert-to-file-using-jq","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/40027637#40027637","title":"Passing bash variable to jq","body":"<p>Consider also passing in the shell variable (EMAILID) as a jq variable (here also EMAILID, for the sake of illustration):</p>\n<pre><code>   projectID=$(jq -r --arg EMAILID &quot;$EMAILID&quot; '\n        .resource[]\n        | select(.username==$EMAILID) \n        | .id' file.json)\n</code></pre>\n<h3>Postscript</h3>\n<p>For the record, another possibility would be to use jq's <code>env</code> function for accessing environment variables.  For example, consider this sequence of bash commands:</p>\n<pre><code>EMAILID=foo@bar.com  # not exported\nEMAILID=&quot;$EMAILID&quot; jq -n 'env.EMAILID'\n</code></pre>\n<p>The output is a JSON string:</p>\n<pre><code>&quot;foo@bar.com&quot;\n</code></pre>\n<h3>shell arrays</h3>\n<p>Unfortunately, shell arrays are a different kettle of fish.\nHere are two SO resources regarding the ingestion of such arrays:</p>\n<p><a href=\"https://stackoverflow.com/questions/61588841/jq-create-json-array-using-bash-array-with-space\">JQ - create JSON array using bash array with space</a></p>\n<p><a href=\"https://stackoverflow.com/questions/49184557/convert-bash-array-to-json-array-and-insert-to-file-using-jq\">Convert bash array to json array and insert to file using jq</a></p>\n"},{"owner":{"reputation":164,"display_name":"Andrew Lockhart","link":"https://stackoverflow.com/users/4010076/andrew-lockhart"},"is_accepted":false,"score":7,"creation_date":1511308429,"answer_id":47424688,"question_id":40027395,"share_link":"https://stackoverflow.com/a/47424688","body_markdown":"Another way to accomplish this is with the jq &quot;--arg&quot; flag. \r\nUsing the original example: \r\n\r\n    #!/bin/sh\r\n\r\n    #this works ***\r\n    projectID=$(cat file.json | jq -r &#39;.resource[] | \r\n    select(.username==&quot;myemail@hotmail.com&quot;) | .id&#39;)\r\n    echo &quot;$projectID&quot;\r\n\r\n    EMAILID=myemail@hotmail.com\r\n\r\n    # Use --arg to pass the variable to jq. This should work:\r\n    projectID=$(cat file.json | jq --arg EMAILID $EMAILID -r &#39;.resource[] \r\n    | select(.username==&quot;$EMAILID&quot;) | .id&#39;)\r\n    echo &quot;$projectID&quot;\r\n \r\nSee here, which is where I found this solution: \r\nhttps://github.com/stedolan/jq/issues/626\r\n\r\n","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/47424688#47424688","title":"Passing bash variable to jq","body":"<p>Another way to accomplish this is with the jq \"--arg\" flag. \nUsing the original example: </p>\n\n<pre><code>#!/bin/sh\n\n#this works ***\nprojectID=$(cat file.json | jq -r '.resource[] | \nselect(.username==\"myemail@hotmail.com\") | .id')\necho \"$projectID\"\n\nEMAILID=myemail@hotmail.com\n\n# Use --arg to pass the variable to jq. This should work:\nprojectID=$(cat file.json | jq --arg EMAILID $EMAILID -r '.resource[] \n| select(.username==\"$EMAILID\") | .id')\necho \"$projectID\"\n</code></pre>\n\n<p>See here, which is where I found this solution: \n<a href=\"https://github.com/stedolan/jq/issues/626\" rel=\"noreferrer\">https://github.com/stedolan/jq/issues/626</a></p>\n"},{"owner":{"reputation":419,"accept_rate":57,"display_name":"Rodrigo Andrade","link":"https://stackoverflow.com/users/2679748/rodrigo-andrade"},"is_accepted":false,"score":3,"creation_date":1563541339,"answer_id":57113096,"question_id":40027395,"share_link":"https://stackoverflow.com/a/57113096","body_markdown":"I know is a bit later to reply, sorry. But that works for me.\r\n\r\n    export K8S_public_load_balancer_url=&quot;$(kubectl get services -n ${TENANT}-production -o wide | grep &quot;ingress-nginx-internal$&quot; | awk &#39;{print $4}&#39;)&quot;\r\n\r\nAnd now I am able to fetch and pass the content of the variable to jq\r\n\r\n    export TF_VAR_public_load_balancer_url=&quot;$(aws elbv2 describe-load-balancers --region eu-west-1 | jq -r &#39;.LoadBalancers[] | select (.DNSName == &quot;&#39;$K8S_public_load_balancer_url&#39;&quot;) | .LoadBalancerArn&#39;)&quot;\r\n\r\nIn my case I needed to use double quote and quote to access the variable value. \r\n\r\nCheers.","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/57113096#57113096","title":"Passing bash variable to jq","body":"<p>I know is a bit later to reply, sorry. But that works for me.</p>\n\n<pre><code>export K8S_public_load_balancer_url=\"$(kubectl get services -n ${TENANT}-production -o wide | grep \"ingress-nginx-internal$\" | awk '{print $4}')\"\n</code></pre>\n\n<p>And now I am able to fetch and pass the content of the variable to jq</p>\n\n<pre><code>export TF_VAR_public_load_balancer_url=\"$(aws elbv2 describe-load-balancers --region eu-west-1 | jq -r '.LoadBalancers[] | select (.DNSName == \"'$K8S_public_load_balancer_url'\") | .LoadBalancerArn')\"\n</code></pre>\n\n<p>In my case I needed to use double quote and quote to access the variable value. </p>\n\n<p>Cheers.</p>\n"},{"owner":{"reputation":678,"display_name":"Zaid","link":"https://stackoverflow.com/users/3036672/zaid"},"is_accepted":false,"score":28,"creation_date":1573124454,"answer_id":58747326,"question_id":40027395,"share_link":"https://stackoverflow.com/a/58747326","body_markdown":"Posting it here as it might help others. In string it might be necessary to pass the quotes to jq. To do the following with jq:\r\n\r\n    .items[] | select(.name==&quot;string&quot;)\r\n\r\nin bash you could do\r\n\r\n    EMAILID=$1\r\n    projectID=$(cat file.json | jq -r &#39;.resource[] | select(.username==&#39;\\&quot;$EMAILID\\&quot;&#39;) | .id&#39;)\r\n\r\nessentially escaping the quotes and passing it on to jq\r\n","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/58747326#58747326","title":"Passing bash variable to jq","body":"<p>Posting it here as it might help others. In string it might be necessary to pass the quotes to jq. To do the following with jq:</p>\n\n<pre><code>.items[] | select(.name==\"string\")\n</code></pre>\n\n<p>in bash you could do</p>\n\n<pre><code>EMAILID=$1\nprojectID=$(cat file.json | jq -r '.resource[] | select(.username=='\\\"$EMAILID\\\"') | .id')\n</code></pre>\n\n<p>essentially escaping the quotes and passing it on to jq</p>\n"},{"owner":{"reputation":356,"display_name":"DukeLion","link":"https://stackoverflow.com/users/436593/dukelion"},"is_accepted":false,"score":12,"creation_date":1585735262,"answer_id":60968286,"question_id":40027395,"share_link":"https://stackoverflow.com/a/60968286","body_markdown":"Jq now have better way to access environment variables, you can use `env.EMAILID`:\r\n\r\n    projectID=$(cat file.json | jq -r &quot;.resource[] | select(.username==env.EMAILID) | .id&quot;)","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/60968286#60968286","title":"Passing bash variable to jq","body":"<p>Jq now have better way to access environment variables, you can use <code>env.EMAILID</code>:</p>\n<pre><code>projectID=$(cat file.json | jq -r &quot;.resource[] | select(.username==env.EMAILID) | .id&quot;)\n</code></pre>\n"},{"owner":{"reputation":5868,"accept_rate":100,"display_name":"markroxor","link":"https://stackoverflow.com/users/4982729/markroxor"},"is_accepted":false,"score":36,"creation_date":1589528828,"answer_id":61814269,"question_id":40027395,"share_link":"https://stackoverflow.com/a/61814269","body_markdown":"Little unrelated but I will still put it here,\r\nFor other practical purposes shell variables can be used as - \r\n```shell\r\nvalue=10\r\njq  &#39;.&quot;key&quot; = &quot;&#39;&quot;$value&quot;&#39;&quot;&#39; file.json\r\n```","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/61814269#61814269","title":"Passing bash variable to jq","body":"<p>Little unrelated but I will still put it here,\nFor other practical purposes shell variables can be used as - </p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>value=10\njq  '.\"key\" = \"'\"$value\"'\"' file.json\n</code></pre>\n"},{"owner":{"reputation":3457,"display_name":"Junaid","link":"https://stackoverflow.com/users/3623224/junaid"},"is_accepted":false,"score":0,"creation_date":1634336462,"answer_id":69591175,"question_id":40027395,"share_link":"https://stackoverflow.com/a/69591175","body_markdown":"In case where we want to append some string to the variable value and we are using the escaped double quotes, for example appending `.crt` to a variable `CERT_TYPE`; the following should work:\r\n\r\n```shell\r\n$ CERT_TYPE=client.reader\r\n$ cat certs.json | jq -r &quot;.\\&quot;${CERT_TYPE}\\&quot;.crt&quot; #### This will *not* work #####\r\n$ cat certs.json | jq -r &quot;.\\&quot;${CERT_TYPE}.crt\\&quot;&quot;\r\n```","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/69591175#69591175","title":"Passing bash variable to jq","body":"<p>In case where we want to append some string to the variable value and we are using the escaped double quotes, for example appending <code>.crt</code> to a variable <code>CERT_TYPE</code>; the following should work:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ CERT_TYPE=client.reader\n$ cat certs.json | jq -r &quot;.\\&quot;${CERT_TYPE}\\&quot;.crt&quot; #### This will *not* work #####\n$ cat certs.json | jq -r &quot;.\\&quot;${CERT_TYPE}.crt\\&quot;&quot;\n</code></pre>\n"},{"owner":{"reputation":564,"display_name":"Ashish Sharma","link":"https://stackoverflow.com/users/7503961/ashish-sharma"},"is_accepted":false,"score":1,"creation_date":1640862209,"answer_id":70530727,"question_id":40027395,"share_link":"https://stackoverflow.com/a/70530727","body_markdown":"I also faced same issue of variable substitution with jq. I found that `--arg` is the option which must be used with square bracket `[]` otherwise it won&#39;t work.. I am giving you sample example below:\r\n\r\n\r\n    RUNNER_TOKEN=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID | jq &#39;.SecretString|fromjson&#39; | jq --arg kt $SECRET_KEY -r &#39;.[$kt]&#39; | tr -d &#39;&quot;&#39;)","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq/70530727#70530727","title":"Passing bash variable to jq","body":"<p>I also faced same issue of variable substitution with jq. I found that <code>--arg</code> is the option which must be used with square bracket <code>[]</code> otherwise it won't work.. I am giving you sample example below:</p>\n<pre><code>RUNNER_TOKEN=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID | jq '.SecretString|fromjson' | jq --arg kt $SECRET_KEY -r '.[$kt]' | tr -d '&quot;')\n</code></pre>\n"}],"owner":{"reputation":2901,"display_name":"asidd","link":"https://stackoverflow.com/users/7015163/asidd"},"is_answered":true,"view_count":237972,"up_vote_count":236,"accepted_answer_id":40027637,"answer_count":10,"score":236,"last_activity_date":1681914708,"creation_date":1476379735,"last_edit_date":1598014943,"question_id":40027395,"body_markdown":"I have written a script to retrieve certain value from `file.json`. It works if I provide the value to jq `select`, but the variable doesn&#39;t seem to work (or I don&#39;t know how to use it).\r\n\r\n    #!/bin/sh\r\n\r\n    #this works ***\r\n    projectID=$(cat file.json | jq -r &#39;.resource[] | select(.username==&quot;myemail@hotmail.com&quot;) | .id&#39;)\r\n    echo &quot;$projectID&quot;\r\n\r\n    EMAILID=myemail@hotmail.com\r\n\r\n    #this does not work *** no value is printed\r\n    projectID=$(cat file.json | jq -r &#39;.resource[] | select(.username==&quot;$EMAILID&quot;) | .id&#39;)\r\n    echo &quot;$projectID&quot;","link":"https://stackoverflow.com/questions/40027395/passing-bash-variable-to-jq","title":"Passing bash variable to jq","body":"<p>I have written a script to retrieve certain value from <code>file.json</code>. It works if I provide the value to jq <code>select</code>, but the variable doesn't seem to work (or I don't know how to use it).</p>\n\n<pre><code>#!/bin/sh\n\n#this works ***\nprojectID=$(cat file.json | jq -r '.resource[] | select(.username==\"myemail@hotmail.com\") | .id')\necho \"$projectID\"\n\nEMAILID=myemail@hotmail.com\n\n#this does not work *** no value is printed\nprojectID=$(cat file.json | jq -r '.resource[] | select(.username==\"$EMAILID\") | .id')\necho \"$projectID\"\n</code></pre>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":50076,"display_name":"Hans Z.","link":"https://stackoverflow.com/users/3748349/hans-z"},"is_accepted":false,"score":460,"creation_date":1444511608,"answer_id":33059058,"question_id":33057420,"share_link":"https://stackoverflow.com/a/33059058","body_markdown":"`jq` supports the normal Boolean operators and/or/not, so it would look like:\r\n\r\n    .[] | select((.processedBarsVolume &lt;= 5) and .processedBars &gt; 0)\r\n\r\n","link":"https://stackoverflow.com/questions/33057420/jq-select-multiple-conditions/33059058#33059058","title":"JQ: Select multiple conditions","body":"<p><code>jq</code> supports the normal Boolean operators and/or/not, so it would look like:</p>\n\n<pre><code>.[] | select((.processedBarsVolume &lt;= 5) and .processedBars &gt; 0)\n</code></pre>\n"},{"owner":{"reputation":2827,"display_name":"siyb","link":"https://stackoverflow.com/users/775241/siyb"},"is_accepted":false,"score":3,"creation_date":1656056251,"answer_id":72740529,"question_id":33057420,"share_link":"https://stackoverflow.com/a/72740529","body_markdown":"I had to wrap the piping to `startswith` with parentheses in order to make this work.\r\n\r\n    jq -n &#39;env | with_entries(select ((.key|startswith(&quot;CI_&quot;)) or .key == &quot;DOCKER_CONTAINER_VERSION_TAG&quot;))&#39;","link":"https://stackoverflow.com/questions/33057420/jq-select-multiple-conditions/72740529#72740529","title":"JQ: Select multiple conditions","body":"<p>I had to wrap the piping to <code>startswith</code> with parentheses in order to make this work.</p>\n<pre><code>jq -n 'env | with_entries(select ((.key|startswith(&quot;CI_&quot;)) or .key == &quot;DOCKER_CONTAINER_VERSION_TAG&quot;))'\n</code></pre>\n"}],"owner":{"reputation":2462,"display_name":"Andrei Colta","link":"https://stackoverflow.com/users/5431642/andrei-colta"},"is_answered":true,"view_count":167484,"up_vote_count":237,"answer_count":2,"score":234,"last_activity_date":1656056251,"creation_date":1444501092,"last_edit_date":1504595459,"question_id":33057420,"body_markdown":"I have a json and at the moment using select to get only the data which match one condition, I need to filter based on more conditions.\r\n\r\nFor e.g:\r\n\r\n\r\n\r\n    .[] | select((.processedBarsVolume &lt;= 5) &amp;&amp; .processedBars &gt; 0)\r\n\r\nHow I can do this ?\r\n","link":"https://stackoverflow.com/questions/33057420/jq-select-multiple-conditions","title":"JQ: Select multiple conditions","body":"<p>I have a json and at the moment using select to get only the data which match one condition, I need to filter based on more conditions.</p>\n\n<p>For e.g:</p>\n\n<pre><code>.[] | select((.processedBarsVolume &lt;= 5) &amp;&amp; .processedBars &gt; 0)\n</code></pre>\n\n<p>How I can do this ?</p>\n"},{"tags":["json","shell","command-line","jq"],"answers":[{"owner":{"reputation":928,"accept_rate":89,"display_name":"Filippo Valsorda","link":"https://stackoverflow.com/users/749014/filippo-valsorda"},"is_accepted":false,"score":46,"creation_date":1393712507,"answer_id":22121168,"question_id":19529688,"share_link":"https://stackoverflow.com/a/22121168","body_markdown":"Who knows if you still need it, but here is the solution.\r\n\r\nOnce you get to the `--slurp` option, it&#39;s easy!\r\n\r\n    --slurp/-s:\r\n        Instead of running the filter for each JSON object in the input,\r\n        read the entire input stream into a large array and run the filter just once.\r\n\r\nThen the `+` operator will do what you want:\r\n\r\n    jq -s &#39;.[0] + .[1]&#39; config.json config-user.json\r\n\r\n(Note: if you want to merge inner objects instead of just overwriting the left file ones with the right file ones, you will need to do it manually)","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/22121168#22121168","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>Who knows if you still need it, but here is the solution.</p>\n\n<p>Once you get to the <code>--slurp</code> option, it's easy!</p>\n\n<pre><code>--slurp/-s:\n    Instead of running the filter for each JSON object in the input,\n    read the entire input stream into a large array and run the filter just once.\n</code></pre>\n\n<p>Then the <code>+</code> operator will do what you want:</p>\n\n<pre><code>jq -s '.[0] + .[1]' config.json config-user.json\n</code></pre>\n\n<p>(Note: if you want to merge inner objects instead of just overwriting the left file ones with the right file ones, you will need to do it manually)</p>\n"},{"owner":{"reputation":2219,"display_name":"user2259432","link":"https://stackoverflow.com/users/2259432/user2259432"},"is_accepted":false,"score":116,"creation_date":1403159384,"answer_id":24300110,"question_id":19529688,"share_link":"https://stackoverflow.com/a/24300110","body_markdown":"Use `jq -s add`:\r\n\r\n    $ echo &#39;{&quot;a&quot;:&quot;foo&quot;,&quot;b&quot;:&quot;bar&quot;} {&quot;c&quot;:&quot;baz&quot;,&quot;a&quot;:0}&#39; | jq -s add\r\n    {\r\n      &quot;a&quot;: 0,\r\n      &quot;b&quot;: &quot;bar&quot;,\r\n      &quot;c&quot;: &quot;baz&quot;\r\n    }\r\n\r\nThis reads all JSON texts from stdin into an array (`jq -s` does that) then it &quot;reduces&quot; them.\r\n\r\n(`add` is defined as `def add: reduce .[] as $x (null; . + $x);`, which iterates over the input array&#39;s/object&#39;s values and adds them.  Object addition == merge.)","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/24300110#24300110","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>Use <code>jq -s add</code>:</p>\n\n<pre><code>$ echo '{\"a\":\"foo\",\"b\":\"bar\"} {\"c\":\"baz\",\"a\":0}' | jq -s add\n{\n  \"a\": 0,\n  \"b\": \"bar\",\n  \"c\": \"baz\"\n}\n</code></pre>\n\n<p>This reads all JSON texts from stdin into an array (<code>jq -s</code> does that) then it \"reduces\" them.</p>\n\n<p>(<code>add</code> is defined as <code>def add: reduce .[] as $x (null; . + $x);</code>, which iterates over the input array's/object's values and adds them.  Object addition == merge.)</p>\n"},{"owner":{"reputation":5427,"display_name":"Simo Kinnunen","link":"https://stackoverflow.com/users/1540573/simo-kinnunen"},"is_accepted":true,"score":279,"creation_date":1406100433,"answer_id":24904276,"question_id":19529688,"share_link":"https://stackoverflow.com/a/24904276","body_markdown":"Since 1.4 this is now possible with the `*` operator. When given two objects, it will merge them recursively. For example,\r\n\r\n    jq -s &#39;.[0] * .[1]&#39; file1 file2\r\n\r\n**Important: Note the `-s (--slurp)` flag, which puts files in the same array.**\r\n\r\nWould get you:\r\n\r\n    {\r\n      &quot;value1&quot;: 200,\r\n      &quot;timestamp&quot;: 1382461861,\r\n      &quot;value&quot;: {\r\n        &quot;aaa&quot;: {\r\n          &quot;value1&quot;: &quot;v1&quot;,\r\n          &quot;value2&quot;: &quot;v2&quot;,\r\n          &quot;value3&quot;: &quot;v3&quot;,\r\n          &quot;value4&quot;: 4\r\n        },\r\n        &quot;bbb&quot;: {\r\n          &quot;value1&quot;: &quot;v1&quot;,\r\n          &quot;value2&quot;: &quot;v2&quot;,\r\n          &quot;value3&quot;: &quot;v3&quot;\r\n        },\r\n        &quot;ccc&quot;: {\r\n          &quot;value1&quot;: &quot;v1&quot;,\r\n          &quot;value2&quot;: &quot;v2&quot;\r\n        },\r\n        &quot;ddd&quot;: {\r\n          &quot;value3&quot;: &quot;v3&quot;,\r\n          &quot;value4&quot;: 4\r\n        }\r\n      },\r\n      &quot;status&quot;: 200\r\n    }\r\n\r\nIf you also want to get rid of the other keys (like your expected result), one way to do it is this:\r\n\r\n    jq -s &#39;.[0] * .[1] | {value: .value}&#39; file1 file2\r\n\r\nOr the presumably somewhat more efficient (because it doesn&#39;t merge any other values):\r\n\r\n    jq -s &#39;.[0].value * .[1].value | {value: .}&#39; file1 file2","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/24904276#24904276","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>Since 1.4 this is now possible with the <code>*</code> operator. When given two objects, it will merge them recursively. For example,</p>\n\n<pre><code>jq -s '.[0] * .[1]' file1 file2\n</code></pre>\n\n<p><strong>Important: Note the <code>-s (--slurp)</code> flag, which puts files in the same array.</strong></p>\n\n<p>Would get you:</p>\n\n<pre><code>{\n  \"value1\": 200,\n  \"timestamp\": 1382461861,\n  \"value\": {\n    \"aaa\": {\n      \"value1\": \"v1\",\n      \"value2\": \"v2\",\n      \"value3\": \"v3\",\n      \"value4\": 4\n    },\n    \"bbb\": {\n      \"value1\": \"v1\",\n      \"value2\": \"v2\",\n      \"value3\": \"v3\"\n    },\n    \"ccc\": {\n      \"value1\": \"v1\",\n      \"value2\": \"v2\"\n    },\n    \"ddd\": {\n      \"value3\": \"v3\",\n      \"value4\": 4\n    }\n  },\n  \"status\": 200\n}\n</code></pre>\n\n<p>If you also want to get rid of the other keys (like your expected result), one way to do it is this:</p>\n\n<pre><code>jq -s '.[0] * .[1] | {value: .value}' file1 file2\n</code></pre>\n\n<p>Or the presumably somewhat more efficient (because it doesn't merge any other values):</p>\n\n<pre><code>jq -s '.[0].value * .[1].value | {value: .}' file1 file2\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":8,"creation_date":1439181795,"answer_id":31911767,"question_id":19529688,"share_link":"https://stackoverflow.com/a/31911767","body_markdown":"First, {&quot;value&quot;: .value} can be abbreviated to just {value}.\r\n\r\nSecond, the --argfile option (available in jq 1.4 and jq 1.5) may be of interest as it avoids having to use the --slurp option.\r\n\r\nPutting these together, the two objects in the two files can be combined in the specified way as follows:\r\n\r\n    $ jq -n --argfile o1 file1 --argfile o2 file2 &#39;$o1 * $o2 | {value}&#39;\r\n\r\nThe &#39;-n&#39; flag tells jq not to read from stdin, since inputs are coming from the --argfile options here.\r\n\r\n## Note on --argfile\r\nThe jq manual deprecates `--argfile` because its semantics are non-trivial: if the specified input file contains exactly one JSON entity, then that entity is read as is; otherwise, the items in the stream are wrapped in an array.  \r\n\r\nIf you are uncomfortable using --argfile, there are several alternatives you may wish to consider.  In doing so, be assured that using `--slurpfile` does not incur the inefficiencies of the `-s` command-line option when the latter is used with multiple files.","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/31911767#31911767","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>First, {&quot;value&quot;: .value} can be abbreviated to just {value}.</p>\n<p>Second, the --argfile option (available in jq 1.4 and jq 1.5) may be of interest as it avoids having to use the --slurp option.</p>\n<p>Putting these together, the two objects in the two files can be combined in the specified way as follows:</p>\n<pre><code>$ jq -n --argfile o1 file1 --argfile o2 file2 '$o1 * $o2 | {value}'\n</code></pre>\n<p>The '-n' flag tells jq not to read from stdin, since inputs are coming from the --argfile options here.</p>\n<h2>Note on --argfile</h2>\n<p>The jq manual deprecates <code>--argfile</code> because its semantics are non-trivial: if the specified input file contains exactly one JSON entity, then that entity is read as is; otherwise, the items in the stream are wrapped in an array.</p>\n<p>If you are uncomfortable using --argfile, there are several alternatives you may wish to consider.  In doing so, be assured that using <code>--slurpfile</code> does not incur the inefficiencies of the <code>-s</code> command-line option when the latter is used with multiple files.</p>\n"},{"owner":{"reputation":651,"display_name":"jrib","link":"https://stackoverflow.com/users/1306286/jrib"},"is_accepted":false,"score":55,"creation_date":1458901046,"answer_id":36218044,"question_id":19529688,"share_link":"https://stackoverflow.com/a/36218044","body_markdown":"Here&#39;s  a version that works recursively (using `*`) on an arbitrary number of objects:\r\n\r\n```lang-bash\r\necho &#39;{&quot;A&quot;: {&quot;a&quot;: 1}}&#39; &#39;{&quot;A&quot;: {&quot;b&quot;: 2}}&#39; &#39;{&quot;B&quot;: 3}&#39; |\\\r\n  jq --slurp &#39;reduce .[] as $item ({}; . * $item)&#39;\r\n\r\n{\r\n  &quot;A&quot;: {\r\n    &quot;a&quot;: 1,\r\n    &quot;b&quot;: 2\r\n  },\r\n  &quot;B&quot;: 3\r\n}\r\n```\r\n\r\n","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/36218044#36218044","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>Here's  a version that works recursively (using <code>*</code>) on an arbitrary number of objects:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>echo '{&quot;A&quot;: {&quot;a&quot;: 1}}' '{&quot;A&quot;: {&quot;b&quot;: 2}}' '{&quot;B&quot;: 3}' |\\\n  jq --slurp 'reduce .[] as $item ({}; . * $item)'\n\n{\n  &quot;A&quot;: {\n    &quot;a&quot;: 1,\n    &quot;b&quot;: 2\n  },\n  &quot;B&quot;: 3\n}\n</code></pre>\n"},{"owner":{"reputation":81,"display_name":"dngray","link":"https://stackoverflow.com/users/12296057/dngray"},"is_accepted":false,"score":8,"creation_date":1572425466,"answer_id":58621547,"question_id":19529688,"share_link":"https://stackoverflow.com/a/58621547","body_markdown":"This can be used to merge any number of files specified on the command:\r\n\r\n`jq -rs &#39;reduce .[] as $item ({}; . * $item)&#39; file1.json file2.json file3.json ... file10.json`\r\n\r\nor this for any number of files\r\n\r\n`jq -rs &#39;reduce .[] as $item ({}; . * $item)&#39; ./*.json`\r\n\r\n","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/58621547#58621547","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>This can be used to merge any number of files specified on the command:</p>\n\n<p><code>jq -rs 'reduce .[] as $item ({}; . * $item)' file1.json file2.json file3.json ... file10.json</code></p>\n\n<p>or this for any number of files</p>\n\n<p><code>jq -rs 'reduce .[] as $item ({}; . * $item)' ./*.json</code></p>\n"},{"owner":{"reputation":23028,"display_name":"pmf","link":"https://stackoverflow.com/users/2158479/pmf"},"is_accepted":false,"score":17,"creation_date":1646860271,"answer_id":71416016,"question_id":19529688,"share_link":"https://stackoverflow.com/a/71416016","body_markdown":"No solution or comment given so far considers using `input` to access the second file. Employing it would render unnecessary the buildup of an additional structure to extract from, such as the all-embracing array when  using the `--slurp` (or `-s`) option, which features in almost all of the other approaches.\r\n\r\nTo merge two files on top level, simply add the second file from `input` to the first in `.` using `+`:\r\n~~~sh\r\njq &#39;. + input&#39; file1.json file2.json\r\n~~~\r\n\r\nTo merge two files recursively on all levels, do the same using `*` as operator instead:\r\n~~~sh\r\njq &#39;. * input&#39; file1.json file2.json\r\n~~~\r\n\r\nThat said, to recursively merge your two files, with both objects reduced to their `value` field, filter them first using `{value}`:\r\n~~~sh\r\njq &#39;{value} * (input | {value})&#39; file1.json file2.json\r\n~~~\r\n~~~json\r\n{\r\n  &quot;value&quot;: {\r\n    &quot;aaa&quot;: {\r\n      &quot;value1&quot;: &quot;v1&quot;,\r\n      &quot;value2&quot;: &quot;v2&quot;,\r\n      &quot;value3&quot;: &quot;v3&quot;,\r\n      &quot;value4&quot;: 4\r\n    },\r\n    &quot;bbb&quot;: {\r\n      &quot;value1&quot;: &quot;v1&quot;,\r\n      &quot;value2&quot;: &quot;v2&quot;,\r\n      &quot;value3&quot;: &quot;v3&quot;\r\n    },\r\n    &quot;ccc&quot;: {\r\n      &quot;value1&quot;: &quot;v1&quot;,\r\n      &quot;value2&quot;: &quot;v2&quot;\r\n    },\r\n    &quot;ddd&quot;: {\r\n      &quot;value3&quot;: &quot;v3&quot;,\r\n      &quot;value4&quot;: 4\r\n    }\r\n  }\r\n}\r\n~~~\r\n[Demo](https://jqplay.org/s/74uEFcXXL-)\r\n\r\nNote that a solution which reduces only _after_ the merge, like `. * input | {value}` would, is shorter in code but resurrects the &quot;buildup of an additional structure to extract from&quot; futility again, which may produce a lot of overhead if the parts eventually cut off get big.\r\n\r\nIn order to operate on more than two files, either accordingly use `input` multiple times, or programmatically iterate over all of them using `inputs` instead, as in\r\n~~~sh\r\njq &#39;reduce inputs as $i (.; . * $i)&#39; file*.json\r\n~~~\r\nNote that in either case the first file is always accessed via the input context `.` while `input(s)` only addresses the _remaining_ files, i.e. starting from the second (unless, of course, the `--null-input` or `-n` option is given).\r\n\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/71416016#71416016","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>No solution or comment given so far considers using <code>input</code> to access the second file. Employing it would render unnecessary the buildup of an additional structure to extract from, such as the all-embracing array when  using the <code>--slurp</code> (or <code>-s</code>) option, which features in almost all of the other approaches.</p>\n<p>To merge two files on top level, simply add the second file from <code>input</code> to the first in <code>.</code> using <code>+</code>:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jq '. + input' file1.json file2.json\n</code></pre>\n<p>To merge two files recursively on all levels, do the same using <code>*</code> as operator instead:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jq '. * input' file1.json file2.json\n</code></pre>\n<p>That said, to recursively merge your two files, with both objects reduced to their <code>value</code> field, filter them first using <code>{value}</code>:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jq '{value} * (input | {value})' file1.json file2.json\n</code></pre>\n<pre class=\"lang-json prettyprint-override\"><code>{\n  &quot;value&quot;: {\n    &quot;aaa&quot;: {\n      &quot;value1&quot;: &quot;v1&quot;,\n      &quot;value2&quot;: &quot;v2&quot;,\n      &quot;value3&quot;: &quot;v3&quot;,\n      &quot;value4&quot;: 4\n    },\n    &quot;bbb&quot;: {\n      &quot;value1&quot;: &quot;v1&quot;,\n      &quot;value2&quot;: &quot;v2&quot;,\n      &quot;value3&quot;: &quot;v3&quot;\n    },\n    &quot;ccc&quot;: {\n      &quot;value1&quot;: &quot;v1&quot;,\n      &quot;value2&quot;: &quot;v2&quot;\n    },\n    &quot;ddd&quot;: {\n      &quot;value3&quot;: &quot;v3&quot;,\n      &quot;value4&quot;: 4\n    }\n  }\n}\n</code></pre>\n<p><a href=\"https://jqplay.org/s/74uEFcXXL-\" rel=\"noreferrer\">Demo</a></p>\n<p>Note that a solution which reduces only <em>after</em> the merge, like <code>. * input | {value}</code> would, is shorter in code but resurrects the &quot;buildup of an additional structure to extract from&quot; futility again, which may produce a lot of overhead if the parts eventually cut off get big.</p>\n<p>In order to operate on more than two files, either accordingly use <code>input</code> multiple times, or programmatically iterate over all of them using <code>inputs</code> instead, as in</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jq 'reduce inputs as $i (.; . * $i)' file*.json\n</code></pre>\n<p>Note that in either case the first file is always accessed via the input context <code>.</code> while <code>input(s)</code> only addresses the <em>remaining</em> files, i.e. starting from the second (unless, of course, the <code>--null-input</code> or <code>-n</code> option is given).</p>\n"},{"owner":{"reputation":1775,"accept_rate":100,"display_name":"Jon","link":"https://stackoverflow.com/users/1779702/jon"},"is_accepted":false,"score":2,"creation_date":1659642474,"answer_id":73241522,"question_id":19529688,"share_link":"https://stackoverflow.com/a/73241522","body_markdown":"I didn&#39;t want to discard previous non-unique key in my objects\r\n\r\n```\r\njq -n &#39;{a:1, c:2}, {b:3, d:4}, {a:5,d:6}&#39; |\r\njq -s &#39;map(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)|add})|add&#39;\r\n{\r\n  &quot;a&quot;: 6,\r\n  &quot;b&quot;: 3,\r\n  &quot;c&quot;: 2,\r\n  &quot;d&quot;: 10\r\n}\r\n```\r\n\r\nor alternatively if you wanted to just keep an array of the values, remove the add after the extraction of the value `map(.value)|̶a̶d̶d̶`\r\n```\r\njq -n &#39;{a:1, c:2}, {b:3, d:4}, {a:5,d:6}&#39; |\r\njq -s &#39;map(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})|add&#39;\r\n{\r\n  &quot;a&quot;: [1, 5],\r\n  &quot;b&quot;: [3],\r\n  &quot;c&quot;: [2],\r\n  &quot;d&quot;: [4, 6]\r\n}\r\n```\r\n\r\nTry removing each part of the command and see how each step modifies the array of objects... aka run these steps and see how the output changes\r\n\r\n```\r\nmap(to_entries)\r\nmap(to_entries)|flatten\r\nmap(to_entries)|flatten|group_by(.key)\r\nmap(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})\r\nmap(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})|add\r\n```","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq/73241522#73241522","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>I didn't want to discard previous non-unique key in my objects</p>\n<pre><code>jq -n '{a:1, c:2}, {b:3, d:4}, {a:5,d:6}' |\njq -s 'map(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)|add})|add'\n{\n  &quot;a&quot;: 6,\n  &quot;b&quot;: 3,\n  &quot;c&quot;: 2,\n  &quot;d&quot;: 10\n}\n</code></pre>\n<p>or alternatively if you wanted to just keep an array of the values, remove the add after the extraction of the value <code>map(.value)|̶a̶d̶d̶</code></p>\n<pre><code>jq -n '{a:1, c:2}, {b:3, d:4}, {a:5,d:6}' |\njq -s 'map(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})|add'\n{\n  &quot;a&quot;: [1, 5],\n  &quot;b&quot;: [3],\n  &quot;c&quot;: [2],\n  &quot;d&quot;: [4, 6]\n}\n</code></pre>\n<p>Try removing each part of the command and see how each step modifies the array of objects... aka run these steps and see how the output changes</p>\n<pre><code>map(to_entries)\nmap(to_entries)|flatten\nmap(to_entries)|flatten|group_by(.key)\nmap(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})\nmap(to_entries)|flatten|group_by(.key)|map({(.[0].key):map(.value)})|add\n</code></pre>\n"}],"owner":{"reputation":2396,"display_name":"Janfy","link":"https://stackoverflow.com/users/420458/janfy"},"is_answered":true,"view_count":187759,"up_vote_count":222,"accepted_answer_id":24904276,"answer_count":8,"score":222,"last_activity_date":1659643010,"creation_date":1382481827,"last_edit_date":1604492339,"question_id":19529688,"body_markdown":"I&#39;m using the [jq][1] tools (jq-json-processor) in shell script to parse json.\r\n\r\nI&#39;ve got 2 json files and **want to merge them into one unique file**\r\n\r\nHere the content of files:\r\n\r\n**file1**\r\n\r\n    {\r\n        &quot;value1&quot;: 200,\r\n        &quot;timestamp&quot;: 1382461861,\r\n        &quot;value&quot;: {\r\n            &quot;aaa&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;\r\n            },\r\n            &quot;bbb&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;\r\n            },\r\n            &quot;ccc&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;\r\n            }\r\n        }\r\n    }\r\n\r\n**file2**\r\n\r\n    {\r\n        &quot;status&quot;: 200,\r\n        &quot;timestamp&quot;: 1382461861,\r\n        &quot;value&quot;: {\r\n            &quot;aaa&quot;: {\r\n                &quot;value3&quot;: &quot;v3&quot;,\r\n                &quot;value4&quot;: 4\r\n            },\r\n            &quot;bbb&quot;: {\r\n                &quot;value3&quot;: &quot;v3&quot;\r\n            },      \r\n            &quot;ddd&quot;: {\r\n                &quot;value3&quot;: &quot;v3&quot;,\r\n                &quot;value4&quot;: 4\r\n            }\r\n        }\r\n    }\r\n\r\n**expected result**\r\n\r\n    {\r\n        &quot;value&quot;: {\r\n            &quot;aaa&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;,\r\n                &quot;value3&quot;: &quot;v3&quot;,\r\n                &quot;value4&quot;: 4\r\n            },\r\n            &quot;bbb&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;,\r\n                &quot;value3&quot;: &quot;v3&quot;\r\n            },\r\n            &quot;ccc&quot;: {\r\n                &quot;value1&quot;: &quot;v1&quot;,\r\n                &quot;value2&quot;: &quot;v2&quot;\r\n            },\r\n            &quot;ddd&quot;: {\r\n                &quot;value3&quot;: &quot;v3&quot;,\r\n                &quot;value4&quot;: 4\r\n            }\r\n        }\r\n    }\r\n\r\nI try a lot of combinations but the only result i get is the following, which is not the expected result:\r\n\r\n    {\r\n      &quot;ccc&quot;: {\r\n        &quot;value2&quot;: &quot;v2&quot;,\r\n        &quot;value1&quot;: &quot;v1&quot;\r\n      },\r\n      &quot;bbb&quot;: {\r\n        &quot;value2&quot;: &quot;v2&quot;,\r\n        &quot;value1&quot;: &quot;v1&quot;\r\n      },\r\n      &quot;aaa&quot;: {\r\n        &quot;value2&quot;: &quot;v2&quot;,\r\n        &quot;value1&quot;: &quot;v1&quot;\r\n      }\r\n    }\r\n    {\r\n      &quot;ddd&quot;: {\r\n        &quot;value4&quot;: 4,\r\n        &quot;value3&quot;: &quot;v3&quot;\r\n      },\r\n      &quot;bbb&quot;: {\r\n        &quot;value3&quot;: &quot;v3&quot;\r\n      },\r\n      &quot;aaa&quot;: {\r\n        &quot;value4&quot;: 4,\r\n        &quot;value3&quot;: &quot;v3&quot;\r\n      }\r\n    }\r\n\r\n\r\nUsing this command:\r\n\r\n    jq -s &#39;.[].value&#39; file1 file2\r\n\r\n  [1]: https://github.com/stedolan/jq","link":"https://stackoverflow.com/questions/19529688/how-to-merge-2-json-objects-from-2-files-using-jq","title":"How to merge 2 JSON objects from 2 files using jq?","body":"<p>I'm using the <a href=\"https://github.com/stedolan/jq\" rel=\"noreferrer\">jq</a> tools (jq-json-processor) in shell script to parse json.</p>\n<p>I've got 2 json files and <strong>want to merge them into one unique file</strong></p>\n<p>Here the content of files:</p>\n<p><strong>file1</strong></p>\n<pre><code>{\n    &quot;value1&quot;: 200,\n    &quot;timestamp&quot;: 1382461861,\n    &quot;value&quot;: {\n        &quot;aaa&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;\n        },\n        &quot;bbb&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;\n        },\n        &quot;ccc&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;\n        }\n    }\n}\n</code></pre>\n<p><strong>file2</strong></p>\n<pre><code>{\n    &quot;status&quot;: 200,\n    &quot;timestamp&quot;: 1382461861,\n    &quot;value&quot;: {\n        &quot;aaa&quot;: {\n            &quot;value3&quot;: &quot;v3&quot;,\n            &quot;value4&quot;: 4\n        },\n        &quot;bbb&quot;: {\n            &quot;value3&quot;: &quot;v3&quot;\n        },      \n        &quot;ddd&quot;: {\n            &quot;value3&quot;: &quot;v3&quot;,\n            &quot;value4&quot;: 4\n        }\n    }\n}\n</code></pre>\n<p><strong>expected result</strong></p>\n<pre><code>{\n    &quot;value&quot;: {\n        &quot;aaa&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;,\n            &quot;value3&quot;: &quot;v3&quot;,\n            &quot;value4&quot;: 4\n        },\n        &quot;bbb&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;,\n            &quot;value3&quot;: &quot;v3&quot;\n        },\n        &quot;ccc&quot;: {\n            &quot;value1&quot;: &quot;v1&quot;,\n            &quot;value2&quot;: &quot;v2&quot;\n        },\n        &quot;ddd&quot;: {\n            &quot;value3&quot;: &quot;v3&quot;,\n            &quot;value4&quot;: 4\n        }\n    }\n}\n</code></pre>\n<p>I try a lot of combinations but the only result i get is the following, which is not the expected result:</p>\n<pre><code>{\n  &quot;ccc&quot;: {\n    &quot;value2&quot;: &quot;v2&quot;,\n    &quot;value1&quot;: &quot;v1&quot;\n  },\n  &quot;bbb&quot;: {\n    &quot;value2&quot;: &quot;v2&quot;,\n    &quot;value1&quot;: &quot;v1&quot;\n  },\n  &quot;aaa&quot;: {\n    &quot;value2&quot;: &quot;v2&quot;,\n    &quot;value1&quot;: &quot;v1&quot;\n  }\n}\n{\n  &quot;ddd&quot;: {\n    &quot;value4&quot;: 4,\n    &quot;value3&quot;: &quot;v3&quot;\n  },\n  &quot;bbb&quot;: {\n    &quot;value3&quot;: &quot;v3&quot;\n  },\n  &quot;aaa&quot;: {\n    &quot;value4&quot;: 4,\n    &quot;value3&quot;: &quot;v3&quot;\n  }\n}\n</code></pre>\n<p>Using this command:</p>\n<pre><code>jq -s '.[].value' file1 file2\n</code></pre>\n"},{"tags":["json","csv","jq"],"answers":[{"owner":{"display_name":"user3899165"},"is_accepted":false,"score":278,"creation_date":1444120318,"answer_id":32965227,"question_id":32960857,"share_link":"https://stackoverflow.com/a/32965227","body_markdown":"First, obtain an array containing all the different object property names in your object array input. Those will be the columns of your CSV:\r\n\r\n    (map(keys) | add | unique) as $cols\r\n\r\nThen, for each object in the object array input, map the column names you obtained to the corresponding properties in the object. Those will be the rows of your CSV.\r\n\r\n    map(. as $row | $cols | map($row[.])) as $rows\r\n\r\nFinally, put the column names before the rows, as a header for the CSV, and pass the resulting row stream to the `@csv` filter.\r\n\r\n    $cols, $rows[] | @csv\r\n\r\nAll together now. Remember to use the `-r` flag to get the result as a raw string:\r\n\r\n    jq -r &#39;(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv&#39;","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/32965227#32965227","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>First, obtain an array containing all the different object property names in your object array input. Those will be the columns of your CSV:</p>\n\n<pre><code>(map(keys) | add | unique) as $cols\n</code></pre>\n\n<p>Then, for each object in the object array input, map the column names you obtained to the corresponding properties in the object. Those will be the rows of your CSV.</p>\n\n<pre><code>map(. as $row | $cols | map($row[.])) as $rows\n</code></pre>\n\n<p>Finally, put the column names before the rows, as a header for the CSV, and pass the resulting row stream to the <code>@csv</code> filter.</p>\n\n<pre><code>$cols, $rows[] | @csv\n</code></pre>\n\n<p>All together now. Remember to use the <code>-r</code> flag to get the result as a raw string:</p>\n\n<pre><code>jq -r '(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv'\n</code></pre>\n"},{"owner":{"reputation":75476,"accept_rate":85,"display_name":"outis","link":"https://stackoverflow.com/users/90527/outis"},"is_accepted":false,"score":165,"creation_date":1444126589,"answer_id":32967407,"question_id":32960857,"share_link":"https://stackoverflow.com/a/32967407","body_markdown":"## The Skinny\r\n\r\n    jq -r &#39;(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv&#39;\r\n\r\nor:\r\n\r\n    jq -r &#39;(.[0] | keys_unsorted) as $keys | ([$keys] + map([.[ $keys[] ]])) [] | @csv&#39;\r\n\r\n\r\n## The Details\r\n\r\n### Aside\r\n\r\nDescribing the details is tricky because jq is stream-oriented, meaning it operates on a sequence of JSON data, rather than a single value. The input JSON stream gets converted to some internal type which is passed through the filters, then encoded in an output stream at program&#39;s end. The internal type isn&#39;t modeled by JSON, and doesn&#39;t exist as a named type. It&#39;s most easily demonstrated by examining the output of a bare index (`.[]`) or the comma operator (examining it directly could be done with a debugger, but that would be in terms of jq&#39;s internal data types, rather than the conceptual data types behind JSON).\r\n\r\n&lt;blockquote&gt;&lt;pre&gt;\r\n$ jq -c &#39;.[]&#39; &amp;lt;&amp;lt;&amp;lt;&#39;[&quot;a&quot;, &quot;b&quot;]&#39;\r\n&quot;a&quot;\r\n&quot;b&quot;\r\n$ jq -cn &#39;&quot;a&quot;, &quot;b&quot;&#39;\r\n&quot;a&quot;\r\n&quot;b&quot;\r\n&lt;/pre&gt;&lt;/blockquote&gt;\r\n\r\nNote that the output isn&#39;t an array (which would be `[&quot;a&quot;, &quot;b&quot;]`). Compact output (the `-c` option) shows that each array element (or argument to the `,` filter) becomes a separate object in the output (each is on a separate line).\r\n\r\nA stream is like a [JSON-seq][1], but uses newlines rather than [RS][2] as an output separator when encoded. Consequently, this internal type is referred to by the generic term &quot;sequence&quot; in this answer, with &quot;stream&quot; being reserved for the encoded input and output.\r\n\r\n### Constructing the Filter\r\n\r\nThe first object&#39;s keys can be extracted with:\r\n\r\n    .[0] | keys_unsorted\r\n\r\nKeys will generally be kept in their original order, but preserving the exact order isn&#39;t guaranteed. Consequently, they will need to be used to index the objects to get the values in the same order. This will also prevent values being in the wrong columns if some objects have a different key order.\r\n\r\nTo both output the keys as the first row and make them available for indexing, they&#39;re stored in a variable. The next stage of the pipeline then references this variable and uses the comma operator to prepend the header to the output stream.\r\n\r\n    (.[0] | keys_unsorted) as $keys | $keys, ...\r\n\r\nThe expression after the comma is a little involved. The index operator on an object can take a sequence of strings (e.g. `&quot;name&quot;, &quot;value&quot;`), returning a sequence of property values for those strings. `$keys` is an array, not a sequence, so `[]` is applied to convert it to a sequence,\r\n\r\n    $keys[]\r\n\r\nwhich can then be passed to `.[]`\r\n\r\n    .[ $keys[] ]\r\n\r\nThis, too, produces a sequence, so the array constructor is used to convert it to an array.\r\n\r\n    [.[ $keys[] ]]\r\n\r\nThis expression is to be applied to a single object. `map()` is used to apply it to all objects in the outer array:\r\n\r\n    map([.[ $keys[] ]])\r\n\r\nLastly for this stage, this is converted to a sequence so each item becomes a separate row in the output.\r\n\r\n    map([.[ $keys[] ]])[]\r\n\r\nWhy bundle the sequence into an array within the `map` only to unbundle it outside? `map` produces an array; `.[ $keys[] ]` produces a sequence. Applying `map` to the sequence from `.[ $keys[] ]` would produce an array of sequences of values, but since sequences aren&#39;t a JSON type, so you instead get a flattened array containing all the values.\r\n\r\n    [&quot;NSW&quot;,&quot;AU&quot;,&quot;state&quot;,&quot;New South Wales&quot;,&quot;AB&quot;,&quot;CA&quot;,&quot;province&quot;,&quot;Alberta&quot;,&quot;ABD&quot;,&quot;GB&quot;,&quot;council area&quot;,&quot;Aberdeenshire&quot;,&quot;AK&quot;,&quot;US&quot;,&quot;state&quot;,&quot;Alaska&quot;]\r\n\r\nThe values from each object need to be kept separate, so that they become separate rows in the final output.\r\n\r\nFinally, the sequence is passed through `@csv` formatter.\r\n\r\n### Alternate\r\n\r\nThe items can be separated late, rather than early. Instead of using the comma operator to get a sequence (passing a sequence as the right operand), the header sequence (`$keys`) can be wrapped in an array, and `+` used to append the array of values. This still needs to be converted to a sequence before being passed to `@csv`.\r\n\r\n\r\n  [1]: https://www.rfc-editor.org/rfc/rfc7464\r\n  [2]: https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Field_separators","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/32967407#32967407","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<h2>The Skinny</h2>\n<pre><code>jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv'\n</code></pre>\n<p>or:</p>\n<pre><code>jq -r '(.[0] | keys_unsorted) as $keys | ([$keys] + map([.[ $keys[] ]])) [] | @csv'\n</code></pre>\n<h2>The Details</h2>\n<h3>Aside</h3>\n<p>Describing the details is tricky because jq is stream-oriented, meaning it operates on a sequence of JSON data, rather than a single value. The input JSON stream gets converted to some internal type which is passed through the filters, then encoded in an output stream at program's end. The internal type isn't modeled by JSON, and doesn't exist as a named type. It's most easily demonstrated by examining the output of a bare index (<code>.[]</code>) or the comma operator (examining it directly could be done with a debugger, but that would be in terms of jq's internal data types, rather than the conceptual data types behind JSON).</p>\n<blockquote><pre>\n$ jq -c '.[]' &lt;&lt;&lt;'[\"a\", \"b\"]'\n\"a\"\n\"b\"\n$ jq -cn '\"a\", \"b\"'\n\"a\"\n\"b\"\n</pre></blockquote>\n<p>Note that the output isn't an array (which would be <code>[&quot;a&quot;, &quot;b&quot;]</code>). Compact output (the <code>-c</code> option) shows that each array element (or argument to the <code>,</code> filter) becomes a separate object in the output (each is on a separate line).</p>\n<p>A stream is like a <a href=\"https://www.rfc-editor.org/rfc/rfc7464\" rel=\"noreferrer\">JSON-seq</a>, but uses newlines rather than <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Field_separators\" rel=\"noreferrer\">RS</a> as an output separator when encoded. Consequently, this internal type is referred to by the generic term &quot;sequence&quot; in this answer, with &quot;stream&quot; being reserved for the encoded input and output.</p>\n<h3>Constructing the Filter</h3>\n<p>The first object's keys can be extracted with:</p>\n<pre><code>.[0] | keys_unsorted\n</code></pre>\n<p>Keys will generally be kept in their original order, but preserving the exact order isn't guaranteed. Consequently, they will need to be used to index the objects to get the values in the same order. This will also prevent values being in the wrong columns if some objects have a different key order.</p>\n<p>To both output the keys as the first row and make them available for indexing, they're stored in a variable. The next stage of the pipeline then references this variable and uses the comma operator to prepend the header to the output stream.</p>\n<pre><code>(.[0] | keys_unsorted) as $keys | $keys, ...\n</code></pre>\n<p>The expression after the comma is a little involved. The index operator on an object can take a sequence of strings (e.g. <code>&quot;name&quot;, &quot;value&quot;</code>), returning a sequence of property values for those strings. <code>$keys</code> is an array, not a sequence, so <code>[]</code> is applied to convert it to a sequence,</p>\n<pre><code>$keys[]\n</code></pre>\n<p>which can then be passed to <code>.[]</code></p>\n<pre><code>.[ $keys[] ]\n</code></pre>\n<p>This, too, produces a sequence, so the array constructor is used to convert it to an array.</p>\n<pre><code>[.[ $keys[] ]]\n</code></pre>\n<p>This expression is to be applied to a single object. <code>map()</code> is used to apply it to all objects in the outer array:</p>\n<pre><code>map([.[ $keys[] ]])\n</code></pre>\n<p>Lastly for this stage, this is converted to a sequence so each item becomes a separate row in the output.</p>\n<pre><code>map([.[ $keys[] ]])[]\n</code></pre>\n<p>Why bundle the sequence into an array within the <code>map</code> only to unbundle it outside? <code>map</code> produces an array; <code>.[ $keys[] ]</code> produces a sequence. Applying <code>map</code> to the sequence from <code>.[ $keys[] ]</code> would produce an array of sequences of values, but since sequences aren't a JSON type, so you instead get a flattened array containing all the values.</p>\n<pre><code>[&quot;NSW&quot;,&quot;AU&quot;,&quot;state&quot;,&quot;New South Wales&quot;,&quot;AB&quot;,&quot;CA&quot;,&quot;province&quot;,&quot;Alberta&quot;,&quot;ABD&quot;,&quot;GB&quot;,&quot;council area&quot;,&quot;Aberdeenshire&quot;,&quot;AK&quot;,&quot;US&quot;,&quot;state&quot;,&quot;Alaska&quot;]\n</code></pre>\n<p>The values from each object need to be kept separate, so that they become separate rows in the final output.</p>\n<p>Finally, the sequence is passed through <code>@csv</code> formatter.</p>\n<h3>Alternate</h3>\n<p>The items can be separated late, rather than early. Instead of using the comma operator to get a sequence (passing a sequence as the right operand), the header sequence (<code>$keys</code>) can be wrapped in an array, and <code>+</code> used to append the array of values. This still needs to be converted to a sequence before being passed to <code>@csv</code>.</p>\n"},{"owner":{"reputation":128831,"accept_rate":86,"display_name":"Jeff Mercado","link":"https://stackoverflow.com/users/390278/jeff-mercado"},"is_accepted":false,"score":9,"creation_date":1444153697,"answer_id":32976330,"question_id":32960857,"share_link":"https://stackoverflow.com/a/32976330","body_markdown":"I created a function that outputs an array of objects or arrays to csv with headers.  The columns would be in the order of the headers.\r\n\r\n    def to_csv($headers):\r\n        def _object_to_csv:\r\n            ($headers | @csv),\r\n            (.[] | [.[$headers[]]] | @csv);\r\n        def _array_to_csv:\r\n            ($headers | @csv),\r\n            (.[][:$headers|length] | @csv);\r\n        if .[0]|type == &quot;object&quot;\r\n            then _object_to_csv\r\n            else _array_to_csv\r\n        end;\r\n\r\nSo you could use it like so:\r\n\r\n    to_csv([ &quot;code&quot;, &quot;name&quot;, &quot;level&quot;, &quot;country&quot; ])","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/32976330#32976330","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>I created a function that outputs an array of objects or arrays to csv with headers.  The columns would be in the order of the headers.</p>\n\n<pre><code>def to_csv($headers):\n    def _object_to_csv:\n        ($headers | @csv),\n        (.[] | [.[$headers[]]] | @csv);\n    def _array_to_csv:\n        ($headers | @csv),\n        (.[][:$headers|length] | @csv);\n    if .[0]|type == \"object\"\n        then _object_to_csv\n        else _array_to_csv\n    end;\n</code></pre>\n\n<p>So you could use it like so:</p>\n\n<pre><code>to_csv([ \"code\", \"name\", \"level\", \"country\" ])\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":4,"creation_date":1450161658,"answer_id":34282594,"question_id":32960857,"share_link":"https://stackoverflow.com/a/34282594","body_markdown":"This variant of Santiago&#39;s program is also safe but ensures that the key names in\r\nthe first object are used as the first column headers, in the same order as they\r\nappear in that object:\r\n\r\n    def tocsv:\r\n      if length == 0 then empty\r\n      else\r\n        (.[0] | keys_unsorted) as $firstkeys\r\n        | (map(keys) | add | unique) as $allkeys\r\n        | ($firstkeys + ($allkeys - $firstkeys)) as $cols\r\n        | ($cols, (.[] as $row | $cols | map($row[.])))\r\n        | @csv\r\n      end ;\r\n    \r\n    tocsv\r\n    ","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/34282594#34282594","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>This variant of Santiago's program is also safe but ensures that the key names in\nthe first object are used as the first column headers, in the same order as they\nappear in that object:</p>\n<pre><code>def tocsv:\n  if length == 0 then empty\n  else\n    (.[0] | keys_unsorted) as $firstkeys\n    | (map(keys) | add | unique) as $allkeys\n    | ($firstkeys + ($allkeys - $firstkeys)) as $cols\n    | ($cols, (.[] as $row | $cols | map($row[.])))\n    | @csv\n  end ;\n\ntocsv\n</code></pre>\n"},{"owner":{"reputation":3607,"accept_rate":91,"display_name":"TJR","link":"https://stackoverflow.com/users/728/tjr"},"is_accepted":false,"score":16,"creation_date":1494972147,"answer_id":44012345,"question_id":32960857,"share_link":"https://stackoverflow.com/a/44012345","body_markdown":"The following filter is slightly different in that it will ensure every value is converted to a string. (jq 1.5+)\r\n\r\n```shell\r\n# For an array of many objects\r\njq -f filter.jq [file]\r\n\r\n# For many objects (not within array)\r\njq -s -f filter.jq [file]\r\n```\r\n\r\n**Filter: `filter.jq`**\r\n\r\n    def tocsv:\r\n        (map(keys)\r\n            |add\r\n            |unique\r\n            |sort\r\n        ) as $cols\r\n        |map(. as $row\r\n            |$cols\r\n            |map($row[.]|tostring)\r\n        ) as $rows\r\n        |$cols,$rows[]\r\n        | @csv;\r\n    \r\n    tocsv\r\n","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/44012345#44012345","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>The following filter is slightly different in that it will ensure every value is converted to a string. (jq 1.5+)</p>\n<pre class=\"lang-sh prettyprint-override\"><code># For an array of many objects\njq -f filter.jq [file]\n\n# For many objects (not within array)\njq -s -f filter.jq [file]\n</code></pre>\n<p><strong>Filter: <code>filter.jq</code></strong></p>\n<pre><code>def tocsv:\n    (map(keys)\n        |add\n        |unique\n        |sort\n    ) as $cols\n    |map(. as $row\n        |$cols\n        |map($row[.]|tostring)\n    ) as $rows\n    |$cols,$rows[]\n    | @csv;\n\ntocsv\n</code></pre>\n"},{"owner":{"reputation":35,"display_name":"Nick Codignotto","link":"https://stackoverflow.com/users/630310/nick-codignotto"},"is_accepted":false,"score":-1,"creation_date":1661190192,"answer_id":73449085,"question_id":32960857,"share_link":"https://stackoverflow.com/a/73449085","body_markdown":"A simple way is to just use string concatenation. If your input is a proper array:\r\n\r\n```\r\n# filename.txt\r\n[\r\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;},\r\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;},\r\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\r\n]\r\n```\r\n\r\nthen index with `.[]`:\r\n\r\n```\r\ncat filename.txt | jq -r &#39;.[] | .field1 + &quot;, &quot; + .field2&#39;\r\n```\r\n\r\nor if it&#39;s just line by line objects:\r\n\r\n```\r\n# filename.txt\r\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\r\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\r\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\r\n```\r\n\r\njust do this:\r\n\r\n```\r\ncat filename.txt | jq -r &#39;.field1 + &quot;, &quot; + .field2&#39;\r\n```\r\n","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/73449085#73449085","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>A simple way is to just use string concatenation. If your input is a proper array:</p>\n<pre><code># filename.txt\n[\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;},\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;},\n  {&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n]\n</code></pre>\n<p>then index with <code>.[]</code>:</p>\n<pre><code>cat filename.txt | jq -r '.[] | .field1 + &quot;, &quot; + .field2'\n</code></pre>\n<p>or if it's just line by line objects:</p>\n<pre><code># filename.txt\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n</code></pre>\n<p>just do this:</p>\n<pre><code>cat filename.txt | jq -r '.field1 + &quot;, &quot; + .field2'\n</code></pre>\n"},{"owner":{"reputation":211,"display_name":"Logan Palanisamy","link":"https://stackoverflow.com/users/5420725/logan-palanisamy"},"is_accepted":false,"score":18,"creation_date":1662959513,"answer_id":73684729,"question_id":32960857,"share_link":"https://stackoverflow.com/a/73684729","body_markdown":"    $cat test.json\r\n    [\r\n        {&quot;code&quot;: &quot;NSW&quot;, &quot;name&quot;: &quot;New South Wales&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;AU&quot;},\r\n        {&quot;code&quot;: &quot;AB&quot;, &quot;name&quot;: &quot;Alberta&quot;, &quot;level&quot;:&quot;province&quot;, &quot;country&quot;: &quot;CA&quot;},\r\n        {&quot;code&quot;: &quot;ABD&quot;, &quot;name&quot;: &quot;Aberdeenshire&quot;, &quot;level&quot;:&quot;council area&quot;, &quot;country&quot;: &quot;GB&quot;},\r\n        {&quot;code&quot;: &quot;AK&quot;, &quot;name&quot;: &quot;Alaska&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;US&quot;}\r\n    ]\r\n\r\n\r\n    $ jq -r &#39;[&quot;Code&quot;, &quot;Name&quot;, &quot;Level&quot;, &quot;Country&quot;], (.[] | [.code, .name, .level, .country]) | @tsv &#39; test.json\r\n    Code\tName\tLevel\tCountry\r\n    NSW\tNew South Wales\tstate\tAU\r\n    AB\tAlberta\tprovince\tCA\r\n    ABD\tAberdeenshire\tcouncil area\tGB\r\n    AK\tAlaska\tstate\tUS\r\n\r\n\r\n    $ jq -r &#39;[&quot;Code&quot;, &quot;Name&quot;, &quot;Level&quot;, &quot;Country&quot;], (.[] | [.code, .name, .level, .country]) | @csv &#39; test.json\r\n    &quot;Code&quot;,&quot;Name&quot;,&quot;Level&quot;,&quot;Country&quot;\r\n    &quot;NSW&quot;,&quot;New South Wales&quot;,&quot;state&quot;,&quot;AU&quot;\r\n    &quot;AB&quot;,&quot;Alberta&quot;,&quot;province&quot;,&quot;CA&quot;\r\n    &quot;ABD&quot;,&quot;Aberdeenshire&quot;,&quot;council area&quot;,&quot;GB&quot;\r\n    &quot;AK&quot;,&quot;Alaska&quot;,&quot;state&quot;,&quot;US&quot;","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/73684729#73684729","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<pre><code>$cat test.json\n[\n    {&quot;code&quot;: &quot;NSW&quot;, &quot;name&quot;: &quot;New South Wales&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;AU&quot;},\n    {&quot;code&quot;: &quot;AB&quot;, &quot;name&quot;: &quot;Alberta&quot;, &quot;level&quot;:&quot;province&quot;, &quot;country&quot;: &quot;CA&quot;},\n    {&quot;code&quot;: &quot;ABD&quot;, &quot;name&quot;: &quot;Aberdeenshire&quot;, &quot;level&quot;:&quot;council area&quot;, &quot;country&quot;: &quot;GB&quot;},\n    {&quot;code&quot;: &quot;AK&quot;, &quot;name&quot;: &quot;Alaska&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;US&quot;}\n]\n\n\n$ jq -r '[&quot;Code&quot;, &quot;Name&quot;, &quot;Level&quot;, &quot;Country&quot;], (.[] | [.code, .name, .level, .country]) | @tsv ' test.json\nCode    Name    Level   Country\nNSW New South Wales state   AU\nAB  Alberta province    CA\nABD Aberdeenshire   council area    GB\nAK  Alaska  state   US\n\n\n$ jq -r '[&quot;Code&quot;, &quot;Name&quot;, &quot;Level&quot;, &quot;Country&quot;], (.[] | [.code, .name, .level, .country]) | @csv ' test.json\n&quot;Code&quot;,&quot;Name&quot;,&quot;Level&quot;,&quot;Country&quot;\n&quot;NSW&quot;,&quot;New South Wales&quot;,&quot;state&quot;,&quot;AU&quot;\n&quot;AB&quot;,&quot;Alberta&quot;,&quot;province&quot;,&quot;CA&quot;\n&quot;ABD&quot;,&quot;Aberdeenshire&quot;,&quot;council area&quot;,&quot;GB&quot;\n&quot;AK&quot;,&quot;Alaska&quot;,&quot;state&quot;,&quot;US&quot;\n</code></pre>\n"},{"owner":{"reputation":6907,"accept_rate":71,"display_name":"jtpereyda","link":"https://stackoverflow.com/users/461834/jtpereyda"},"is_accepted":false,"score":2,"creation_date":1672969748,"answer_id":75026152,"question_id":32960857,"share_link":"https://stackoverflow.com/a/75026152","body_markdown":"If you&#39;re open to using other Unix tools, [`csvkit`](https://csvkit.readthedocs.io/en/latest/) has an `in2csv` tool:\r\n\r\n```bash\r\nin2csv example.json\r\n```\r\n\r\nUsing your sample data:\r\n\r\n```bash\r\n&gt; in2csv example.json\r\ncode,name,level,country\r\nNSW,New South Wales,state,AU\r\nAB,Alberta,province,CA\r\nABD,Aberdeenshire,council area,GB\r\nAK,Alaska,state,US \r\n```\r\n\r\nI like the pipe approach for piping directly from `jq`:\r\n\r\n```bash\r\ncat example.json | in2csv -f json -\r\n```","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq/75026152#75026152","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>If you're open to using other Unix tools, <a href=\"https://csvkit.readthedocs.io/en/latest/\" rel=\"nofollow noreferrer\"><code>csvkit</code></a> has an <code>in2csv</code> tool:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>in2csv example.json\n</code></pre>\n<p>Using your sample data:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>&gt; in2csv example.json\ncode,name,level,country\nNSW,New South Wales,state,AU\nAB,Alberta,province,CA\nABD,Aberdeenshire,council area,GB\nAK,Alaska,state,US \n</code></pre>\n<p>I like the pipe approach for piping directly from <code>jq</code>:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>cat example.json | in2csv -f json -\n</code></pre>\n"}],"owner":{"reputation":75476,"accept_rate":85,"display_name":"outis","link":"https://stackoverflow.com/users/90527/outis"},"is_answered":true,"view_count":186232,"up_vote_count":208,"answer_count":8,"score":208,"last_activity_date":1672969748,"creation_date":1444099072,"last_edit_date":1547855920,"question_id":32960857,"body_markdown":"Using [jq][1], how can arbitrary JSON encoding an array of shallow objects be converted to CSV?\r\n\r\nThere are plenty of Q&amp;As on this site that cover specific data models which hard-code the fields, but answers to this question should work given any JSON, with the only restriction that it&#39;s an array of objects with scalar properties (no deep/complex/sub-objects, as flattening these is another question). The result should contain a header row giving the field names. Preference will be given to answers that preserve the field order of the first object, but it&#39;s not a requirement. Results may enclose all cells with double-quotes, or only enclose those that require quoting (e.g. &#39;a,b&#39;).\r\n\r\n## Examples\r\n\r\n1. Input:\r\n\r\n        [\r\n            {&quot;code&quot;: &quot;NSW&quot;, &quot;name&quot;: &quot;New South Wales&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;AU&quot;},\r\n            {&quot;code&quot;: &quot;AB&quot;, &quot;name&quot;: &quot;Alberta&quot;, &quot;level&quot;:&quot;province&quot;, &quot;country&quot;: &quot;CA&quot;},\r\n            {&quot;code&quot;: &quot;ABD&quot;, &quot;name&quot;: &quot;Aberdeenshire&quot;, &quot;level&quot;:&quot;council area&quot;, &quot;country&quot;: &quot;GB&quot;},\r\n            {&quot;code&quot;: &quot;AK&quot;, &quot;name&quot;: &quot;Alaska&quot;, &quot;level&quot;:&quot;state&quot;, &quot;country&quot;: &quot;US&quot;}\r\n        ]\r\n\r\n    Possible output:\r\n\r\n        code,name,level,country\r\n        NSW,New South Wales,state,AU\r\n        AB,Alberta,province,CA\r\n        ABD,Aberdeenshire,council area,GB\r\n        AK,Alaska,state,US\r\n\r\n    Possible output:\r\n\r\n        &quot;code&quot;,&quot;name&quot;,&quot;level&quot;,&quot;country&quot;\r\n        &quot;NSW&quot;,&quot;New South Wales&quot;,&quot;state&quot;,&quot;AU&quot;\r\n        &quot;AB&quot;,&quot;Alberta&quot;,&quot;province&quot;,&quot;CA&quot;\r\n        &quot;ABD&quot;,&quot;Aberdeenshire&quot;,&quot;council area&quot;,&quot;GB&quot;\r\n        &quot;AK&quot;,&quot;Alaska&quot;,&quot;state&quot;,&quot;US&quot;\r\n\r\n2. Input:\r\n\r\n        [\r\n            {&quot;name&quot;: &quot;bang&quot;, &quot;value&quot;: &quot;!&quot;, &quot;level&quot;: 0},\r\n            {&quot;name&quot;: &quot;letters&quot;, &quot;value&quot;: &quot;a,b,c&quot;, &quot;level&quot;: 0},\r\n            {&quot;name&quot;: &quot;letters&quot;, &quot;value&quot;: &quot;x,y,z&quot;, &quot;level&quot;: 1},\r\n            {&quot;name&quot;: &quot;bang&quot;, &quot;value&quot;: &quot;\\&quot;!\\&quot;&quot;, &quot;level&quot;: 1}\r\n        ]\r\n\r\n    Possible output:\r\n\r\n        name,value,level\r\n        bang,!,0\r\n        letters,&quot;a,b,c&quot;,0\r\n        letters,&quot;x,y,z&quot;,1\r\n        bang,&quot;&quot;&quot;!&quot;&quot;&quot;,0\r\n\r\n    Possible output:\r\n\r\n        &quot;name&quot;,&quot;value&quot;,&quot;level&quot;\r\n        &quot;bang&quot;,&quot;!&quot;,&quot;0&quot;\r\n        &quot;letters&quot;,&quot;a,b,c&quot;,&quot;0&quot;\r\n        &quot;letters&quot;,&quot;x,y,z&quot;,&quot;1&quot;\r\n        &quot;bang&quot;,&quot;&quot;&quot;!&quot;&quot;&quot;,&quot;1&quot;\r\n\r\n\r\n  [1]: https://stedolan.github.io/jq/","link":"https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq","title":"How to convert arbitrary simple JSON to CSV using jq?","body":"<p>Using <a href=\"https://stedolan.github.io/jq/\">jq</a>, how can arbitrary JSON encoding an array of shallow objects be converted to CSV?</p>\n\n<p>There are plenty of Q&amp;As on this site that cover specific data models which hard-code the fields, but answers to this question should work given any JSON, with the only restriction that it's an array of objects with scalar properties (no deep/complex/sub-objects, as flattening these is another question). The result should contain a header row giving the field names. Preference will be given to answers that preserve the field order of the first object, but it's not a requirement. Results may enclose all cells with double-quotes, or only enclose those that require quoting (e.g. 'a,b').</p>\n\n<h2>Examples</h2>\n\n<ol>\n<li><p>Input:</p>\n\n<pre><code>[\n    {\"code\": \"NSW\", \"name\": \"New South Wales\", \"level\":\"state\", \"country\": \"AU\"},\n    {\"code\": \"AB\", \"name\": \"Alberta\", \"level\":\"province\", \"country\": \"CA\"},\n    {\"code\": \"ABD\", \"name\": \"Aberdeenshire\", \"level\":\"council area\", \"country\": \"GB\"},\n    {\"code\": \"AK\", \"name\": \"Alaska\", \"level\":\"state\", \"country\": \"US\"}\n]\n</code></pre>\n\n<p>Possible output:</p>\n\n<pre><code>code,name,level,country\nNSW,New South Wales,state,AU\nAB,Alberta,province,CA\nABD,Aberdeenshire,council area,GB\nAK,Alaska,state,US\n</code></pre>\n\n<p>Possible output:</p>\n\n<pre><code>\"code\",\"name\",\"level\",\"country\"\n\"NSW\",\"New South Wales\",\"state\",\"AU\"\n\"AB\",\"Alberta\",\"province\",\"CA\"\n\"ABD\",\"Aberdeenshire\",\"council area\",\"GB\"\n\"AK\",\"Alaska\",\"state\",\"US\"\n</code></pre></li>\n<li><p>Input:</p>\n\n<pre><code>[\n    {\"name\": \"bang\", \"value\": \"!\", \"level\": 0},\n    {\"name\": \"letters\", \"value\": \"a,b,c\", \"level\": 0},\n    {\"name\": \"letters\", \"value\": \"x,y,z\", \"level\": 1},\n    {\"name\": \"bang\", \"value\": \"\\\"!\\\"\", \"level\": 1}\n]\n</code></pre>\n\n<p>Possible output:</p>\n\n<pre><code>name,value,level\nbang,!,0\nletters,\"a,b,c\",0\nletters,\"x,y,z\",1\nbang,\"\"\"!\"\"\",0\n</code></pre>\n\n<p>Possible output:</p>\n\n<pre><code>\"name\",\"value\",\"level\"\n\"bang\",\"!\",\"0\"\n\"letters\",\"a,b,c\",\"0\"\n\"letters\",\"x,y,z\",\"1\"\n\"bang\",\"\"\"!\"\"\",\"1\"\n</code></pre></li>\n</ol>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":128831,"accept_rate":86,"display_name":"Jeff Mercado","link":"https://stackoverflow.com/users/390278/jeff-mercado"},"is_accepted":true,"score":196,"creation_date":1435182241,"answer_id":31037640,"question_id":31034746,"share_link":"https://stackoverflow.com/a/31037640","body_markdown":"You set values of an object using the `=` operator.  `|=` on the other hand is used to update a value.  It&#39;s a subtle but important difference.  The context of the filters changes.\r\n\r\nSince you are setting a property to a constant value, use the `=` operator.\r\n\r\n    .shipping.local = false\r\n\r\nJust note that when setting a value to a property, it doesn&#39;t necessarily have to exist.  You can add new values easily this way.\r\n\r\n    .shipping.local = false | .shipping.canada = false | .shipping.mexico = true","link":"https://stackoverflow.com/questions/31034746/how-do-i-update-a-single-value-in-a-json-document-using-jq/31037640#31037640","title":"How do I update a single value in a json document using jq?","body":"<p>You set values of an object using the <code>=</code> operator.  <code>|=</code> on the other hand is used to update a value.  It's a subtle but important difference.  The context of the filters changes.</p>\n\n<p>Since you are setting a property to a constant value, use the <code>=</code> operator.</p>\n\n<pre><code>.shipping.local = false\n</code></pre>\n\n<p>Just note that when setting a value to a property, it doesn't necessarily have to exist.  You can add new values easily this way.</p>\n\n<pre><code>.shipping.local = false | .shipping.canada = false | .shipping.mexico = true\n</code></pre>\n"},{"owner":{"reputation":716,"accept_rate":100,"display_name":"Thiago Conrado","link":"https://stackoverflow.com/users/6497071/thiago-conrado"},"is_accepted":false,"score":12,"creation_date":1576065689,"answer_id":59285390,"question_id":31034746,"share_link":"https://stackoverflow.com/a/59285390","body_markdown":"a similar function to the operator |= is map.\r\nmap will be suitable to avoid the requirement of a previous filter for the array...\r\n\r\nimagine that your data is an array (very common for this example)\r\n\r\n    [\r\n      {\r\n        &quot;shipping&quot;: {\r\n          &quot;local&quot;: true,\r\n          &quot;us&quot;: true,\r\n          &quot;us_rate&quot;: {\r\n            &quot;amount&quot;: &quot;1.00&quot;,\r\n            &quot;currency&quot;: &quot;USD&quot;,\r\n            &quot;symbol&quot;: &quot;$&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;shipping&quot;: {\r\n          &quot;local&quot;: true,\r\n          &quot;us&quot;: true,\r\n          &quot;us_rate&quot;: {\r\n            &quot;amount&quot;: &quot;1.00&quot;,\r\n            &quot;currency&quot;: &quot;USD&quot;,\r\n            &quot;symbol&quot;: &quot;$&quot;\r\n          }\r\n        }\r\n      }\r\n    ]\r\n\r\nhence it is necessary to consider the array in the code as:\r\n\r\n    http://example.com/shipping.json | jq &#39;.[] | .shipping.local = &quot;new place&quot;&#39; | curl -X PUT http://example.com/shipping.json\r\n\r\nor to use the map function that is crafted to work in every array element as\r\n\r\n    http://example.com/shipping.json | jq &#39;map(.shipping.local = &quot;new place&quot;)&#39; | curl -X PUT http://example.com/shipping.json\r\n\r\n**Observation**\r\n\r\nFor the sake of those that are learning, you also did some mistakes in the jq usage, just consider that it does &quot;read&quot; the 1st parameter as the program, hence all the desired commands shall be included in the very first string after calling the program.","link":"https://stackoverflow.com/questions/31034746/how-do-i-update-a-single-value-in-a-json-document-using-jq/59285390#59285390","title":"How do I update a single value in a json document using jq?","body":"<p>a similar function to the operator |= is map.\nmap will be suitable to avoid the requirement of a previous filter for the array...</p>\n\n<p>imagine that your data is an array (very common for this example)</p>\n\n<pre><code>[\n  {\n    \"shipping\": {\n      \"local\": true,\n      \"us\": true,\n      \"us_rate\": {\n        \"amount\": \"1.00\",\n        \"currency\": \"USD\",\n        \"symbol\": \"$\"\n      }\n    }\n  },\n  {\n    \"shipping\": {\n      \"local\": true,\n      \"us\": true,\n      \"us_rate\": {\n        \"amount\": \"1.00\",\n        \"currency\": \"USD\",\n        \"symbol\": \"$\"\n      }\n    }\n  }\n]\n</code></pre>\n\n<p>hence it is necessary to consider the array in the code as:</p>\n\n<pre><code>http://example.com/shipping.json | jq '.[] | .shipping.local = \"new place\"' | curl -X PUT http://example.com/shipping.json\n</code></pre>\n\n<p>or to use the map function that is crafted to work in every array element as</p>\n\n<pre><code>http://example.com/shipping.json | jq 'map(.shipping.local = \"new place\")' | curl -X PUT http://example.com/shipping.json\n</code></pre>\n\n<p><strong>Observation</strong></p>\n\n<p>For the sake of those that are learning, you also did some mistakes in the jq usage, just consider that it does \"read\" the 1st parameter as the program, hence all the desired commands shall be included in the very first string after calling the program.</p>\n"},{"owner":{"reputation":2616,"accept_rate":57,"display_name":"Paul Chris Jones","link":"https://stackoverflow.com/users/2395096/paul-chris-jones"},"is_accepted":false,"score":109,"creation_date":1581933777,"answer_id":60259978,"question_id":31034746,"share_link":"https://stackoverflow.com/a/60259978","body_markdown":"Update a value (sets .foo.bar to &quot;new value&quot;):\r\n\r\n    jq &#39;.foo.bar = &quot;new value&quot;&#39; file.json\r\n\r\nUpdate a value using a variable (sets .foo.bar to &quot;hello&quot;):\r\n\r\n    variable=&quot;hello&quot;; jq --arg variable &quot;$variable&quot; &#39;.foo.bar = $variable&#39; file.json","link":"https://stackoverflow.com/questions/31034746/how-do-i-update-a-single-value-in-a-json-document-using-jq/60259978#60259978","title":"How do I update a single value in a json document using jq?","body":"<p>Update a value (sets .foo.bar to \"new value\"):</p>\n\n<pre><code>jq '.foo.bar = \"new value\"' file.json\n</code></pre>\n\n<p>Update a value using a variable (sets .foo.bar to \"hello\"):</p>\n\n<pre><code>variable=\"hello\"; jq --arg variable \"$variable\" '.foo.bar = $variable' file.json\n</code></pre>\n"}],"owner":{"reputation":44787,"accept_rate":80,"display_name":"STW","link":"https://stackoverflow.com/users/60724/stw"},"is_answered":true,"view_count":154262,"up_vote_count":196,"accepted_answer_id":31037640,"answer_count":3,"score":196,"last_activity_date":1581934563,"creation_date":1435172192,"question_id":31034746,"body_markdown":"Appologies if I&#39;ve overlooked something very obvious; I&#39;ve just found `jq` and am trying to use it to update one JSON value without affecting the surrounding data.\r\n\r\n\r\nI&#39;d like to pipe a `curl` result into `jq`, update a value, and pipe the updated JSON to a `curl -X PUT`.  Something like \r\n\r\n    curl http://example.com/shipping.json | jq &#39;.&#39; field: value | curl -X PUT http://example.com/shipping.json\r\n\r\nSo far I&#39;ve hacked it together using `sed`, but after looking at a few examples of the `|=` operator in `jq` I&#39;m sure that I don&#39;t need these.\r\n\r\nHere&#39;s a JSON sample--how would I use `jq` to set `&quot;local&quot;: false`, while preserving the rest of the JSON?\r\n\r\n    {\r\n      &quot;shipping&quot;: {\r\n        &quot;local&quot;: true,\r\n        &quot;us&quot;: true,\r\n        &quot;us_rate&quot;: {\r\n          &quot;amount&quot;: &quot;0.00&quot;,\r\n          &quot;currency&quot;: &quot;USD&quot;,\r\n          &quot;symbol&quot;: &quot;$&quot;\r\n        }\r\n      }\r\n    }\r\n\r\n","link":"https://stackoverflow.com/questions/31034746/how-do-i-update-a-single-value-in-a-json-document-using-jq","title":"How do I update a single value in a json document using jq?","body":"<p>Appologies if I've overlooked something very obvious; I've just found <code>jq</code> and am trying to use it to update one JSON value without affecting the surrounding data.</p>\n\n<p>I'd like to pipe a <code>curl</code> result into <code>jq</code>, update a value, and pipe the updated JSON to a <code>curl -X PUT</code>.  Something like </p>\n\n<pre><code>curl http://example.com/shipping.json | jq '.' field: value | curl -X PUT http://example.com/shipping.json\n</code></pre>\n\n<p>So far I've hacked it together using <code>sed</code>, but after looking at a few examples of the <code>|=</code> operator in <code>jq</code> I'm sure that I don't need these.</p>\n\n<p>Here's a JSON sample--how would I use <code>jq</code> to set <code>\"local\": false</code>, while preserving the rest of the JSON?</p>\n\n<pre><code>{\n  \"shipping\": {\n    \"local\": true,\n    \"us\": true,\n    \"us_rate\": {\n      \"amount\": \"0.00\",\n      \"currency\": \"USD\",\n      \"symbol\": \"$\"\n    }\n  }\n}\n</code></pre>\n"},{"tags":["json","diff","jq"],"answers":[{"owner":{"display_name":"user3899165"},"is_accepted":true,"score":47,"creation_date":1439267304,"answer_id":31933234,"question_id":31930041,"share_link":"https://stackoverflow.com/a/31933234","body_markdown":"Since jq&#39;s comparison already compares objects without taking into account key ordering, all that&#39;s left is to sort all lists inside the object before comparing them. Assuming your two files are named `a.json` and `b.json`, on the latest jq nightly:\r\n\r\n    jq --argfile a a.json --argfile b b.json -n &#39;($a | (.. | arrays) |= sort) as $a | ($b | (.. | arrays) |= sort) as $b | $a == $b&#39;\r\n\r\nThis program should return &quot;true&quot; or &quot;false&quot; depending on whether or not the objects are equal using the definition of equality you ask for.\r\n\r\nEDIT: The `(.. | arrays) |= sort` construct doesn&#39;t actually work as expected on some edge cases. [This GitHub issue](https://github.com/stedolan/jq/issues/893) explains why and provides some alternatives, such as:\r\n\r\n    def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (post_recurse | arrays) |= sort\r\n\r\nApplied to the jq invocation above:\r\n\r\n    jq --argfile a a.json --argfile b b.json -n &#39;def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); ($a | (post_recurse | arrays) |= sort) as $a | ($b | (post_recurse | arrays) |= sort) as $b | $a == $b&#39;","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/31933234#31933234","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Since jq's comparison already compares objects without taking into account key ordering, all that's left is to sort all lists inside the object before comparing them. Assuming your two files are named <code>a.json</code> and <code>b.json</code>, on the latest jq nightly:</p>\n\n<pre><code>jq --argfile a a.json --argfile b b.json -n '($a | (.. | arrays) |= sort) as $a | ($b | (.. | arrays) |= sort) as $b | $a == $b'\n</code></pre>\n\n<p>This program should return \"true\" or \"false\" depending on whether or not the objects are equal using the definition of equality you ask for.</p>\n\n<p>EDIT: The <code>(.. | arrays) |= sort</code> construct doesn't actually work as expected on some edge cases. <a href=\"https://github.com/stedolan/jq/issues/893\" rel=\"noreferrer\">This GitHub issue</a> explains why and provides some alternatives, such as:</p>\n\n<pre><code>def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (post_recurse | arrays) |= sort\n</code></pre>\n\n<p>Applied to the jq invocation above:</p>\n\n<pre><code>jq --argfile a a.json --argfile b b.json -n 'def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); ($a | (post_recurse | arrays) |= sort) as $a | ($b | (post_recurse | arrays) |= sort) as $b | $a == $b'\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":8,"creation_date":1439276946,"answer_id":31935351,"question_id":31930041,"share_link":"https://stackoverflow.com/a/31935351","body_markdown":"Here is a solution using the generic function *walk/1*: \r\n\r\n    # Apply f to composite entities recursively, and to atoms\r\n    def walk(f):\r\n      . as $in\r\n      | if type == &quot;object&quot; then\r\n          reduce keys[] as $key\r\n            ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\r\n      elif type == &quot;array&quot; then map( walk(f) ) | f\r\n      else f\r\n      end;\r\n\r\n    def normalize: walk(if type == &quot;array&quot; then sort else . end);\r\n\r\n    # Test whether the input and argument are equivalent\r\n    # in the sense that ordering within lists is immaterial:\r\n    def equiv(x): normalize == (x | normalize);\r\n\r\n\r\nExample:\r\n\r\n    {&quot;a&quot;:[1,2,[3,4]]} | equiv( {&quot;a&quot;: [[4,3], 2,1]} )\r\n\r\nproduces:\r\n\r\n    true\r\n\r\nAnd wrapped up as a bash script:\r\n\r\n    #!/bin/bash\r\n    \r\n    JQ=/usr/local/bin/jq\r\n    BN=$(basename $0)\r\n    \r\n    function help {\r\n      cat &lt;&lt;EOF\r\n    \r\n    Syntax: $0 file1 file2\r\n    \r\n    The two files are assumed each to contain one JSON entity.  This\r\n    script reports whether the two entities are equivalent in the sense\r\n    that their normalized values are equal, where normalization of all\r\n    component arrays is achieved by recursively sorting them, innermost first.\r\n    \r\n    This script assumes that the jq of interest is $JQ if it exists and\r\n    otherwise that it is on the PATH.\r\n    \r\n    EOF\r\n      exit\r\n    }\r\n    \r\n    if [ ! -x &quot;$JQ&quot; ] ; then JQ=jq ; fi\r\n    \r\n    function die     { echo &quot;$BN: $@&quot; &gt;&amp;2 ; exit 1 ; }\r\n    \r\n    if [ $# != 2 -o &quot;$1&quot; = -h  -o &quot;$1&quot; = --help ] ; then help ; exit ; fi\r\n    \r\n    test -f &quot;$1&quot; || die &quot;unable to find $1&quot;\r\n    test -f &quot;$2&quot; || die &quot;unable to find $2&quot;\r\n    \r\n    $JQ -r -n --argfile A &quot;$1&quot; --argfile B &quot;$2&quot; -f &lt;(cat&lt;&lt;&quot;EOF&quot;\r\n    # Apply f to composite entities recursively, and to atoms\r\n    def walk(f):\r\n      . as $in\r\n      | if type == &quot;object&quot; then\r\n          reduce keys[] as $key\r\n            ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\r\n      elif type == &quot;array&quot; then map( walk(f) ) | f\r\n      else f\r\n      end;\r\n    \r\n    def normalize: walk(if type == &quot;array&quot; then sort else . end);\r\n    \r\n    # Test whether the input and argument are equivalent\r\n    # in the sense that ordering within lists is immaterial:\r\n    def equiv(x): normalize == (x | normalize);\r\n    \r\n    if $A | equiv($B) then empty else &quot;\\($A) is not equivalent to \\($B)&quot; end\r\n    \r\n    EOF\r\n    )\r\n\r\nPOSTSCRIPT: walk/1 is a built-in in versions of jq &gt; 1.5, and can therefore be omitted if your jq includes it, but there is no harm in including it redundantly in a jq script.\r\n\r\nPOST-POSTSCRIPT: The builtin version of `walk` has recently been changed so that it no longer sorts the keys within an object. Specifically, it uses `keys_unsorted`. For the task at hand, the version using `keys` should be used.\r\n","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/31935351#31935351","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Here is a solution using the generic function <em>walk/1</em>: </p>\n\n<pre><code># Apply f to composite entities recursively, and to atoms\ndef walk(f):\n  . as $in\n  | if type == \"object\" then\n      reduce keys[] as $key\n        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\n  elif type == \"array\" then map( walk(f) ) | f\n  else f\n  end;\n\ndef normalize: walk(if type == \"array\" then sort else . end);\n\n# Test whether the input and argument are equivalent\n# in the sense that ordering within lists is immaterial:\ndef equiv(x): normalize == (x | normalize);\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>{\"a\":[1,2,[3,4]]} | equiv( {\"a\": [[4,3], 2,1]} )\n</code></pre>\n\n<p>produces:</p>\n\n<pre><code>true\n</code></pre>\n\n<p>And wrapped up as a bash script:</p>\n\n<pre><code>#!/bin/bash\n\nJQ=/usr/local/bin/jq\nBN=$(basename $0)\n\nfunction help {\n  cat &lt;&lt;EOF\n\nSyntax: $0 file1 file2\n\nThe two files are assumed each to contain one JSON entity.  This\nscript reports whether the two entities are equivalent in the sense\nthat their normalized values are equal, where normalization of all\ncomponent arrays is achieved by recursively sorting them, innermost first.\n\nThis script assumes that the jq of interest is $JQ if it exists and\notherwise that it is on the PATH.\n\nEOF\n  exit\n}\n\nif [ ! -x \"$JQ\" ] ; then JQ=jq ; fi\n\nfunction die     { echo \"$BN: $@\" &gt;&amp;2 ; exit 1 ; }\n\nif [ $# != 2 -o \"$1\" = -h  -o \"$1\" = --help ] ; then help ; exit ; fi\n\ntest -f \"$1\" || die \"unable to find $1\"\ntest -f \"$2\" || die \"unable to find $2\"\n\n$JQ -r -n --argfile A \"$1\" --argfile B \"$2\" -f &lt;(cat&lt;&lt;\"EOF\"\n# Apply f to composite entities recursively, and to atoms\ndef walk(f):\n  . as $in\n  | if type == \"object\" then\n      reduce keys[] as $key\n        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\n  elif type == \"array\" then map( walk(f) ) | f\n  else f\n  end;\n\ndef normalize: walk(if type == \"array\" then sort else . end);\n\n# Test whether the input and argument are equivalent\n# in the sense that ordering within lists is immaterial:\ndef equiv(x): normalize == (x | normalize);\n\nif $A | equiv($B) then empty else \"\\($A) is not equivalent to \\($B)\" end\n\nEOF\n)\n</code></pre>\n\n<p>POSTSCRIPT: walk/1 is a built-in in versions of jq > 1.5, and can therefore be omitted if your jq includes it, but there is no harm in including it redundantly in a jq script.</p>\n\n<p>POST-POSTSCRIPT: The builtin version of <code>walk</code> has recently been changed so that it no longer sorts the keys within an object. Specifically, it uses <code>keys_unsorted</code>. For the task at hand, the version using <code>keys</code> should be used.</p>\n"},{"owner":{"reputation":6370,"accept_rate":82,"display_name":"Erik","link":"https://stackoverflow.com/users/832218/erik"},"is_accepted":false,"score":222,"creation_date":1463014337,"answer_id":37175540,"question_id":31930041,"share_link":"https://stackoverflow.com/a/37175540","body_markdown":"If your shell supports process substitution (Bash-style follows, see [docs][1]):\r\n\r\n    diff &lt;(jq --sort-keys . A.json) &lt;(jq --sort-keys . B.json)\r\n\r\nObjects key order will be ignored, but array order will still matter. It is possible to work-around that, if desired, by sorting array values in some other way, or making them set-like (e.g. `[&quot;foo&quot;, &quot;bar&quot;]` → `{&quot;foo&quot;: null, &quot;bar&quot;: null}`; this will also remove duplicates).\r\n\r\nAlternatively, substitute `diff` for some other comparator, e.g. `cmp`, `colordiff`, or `vimdiff`, depending on your needs. If all you want is a yes or no answer, consider using `cmp` and passing `--compact-output` to `jq` to not format the output for a potential small performance increase.\r\n\r\n  [1]: https://www.gnu.org/software/bash/manual/bash.html#Process-Substitution","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/37175540#37175540","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>If your shell supports process substitution (Bash-style follows, see <a href=\"https://www.gnu.org/software/bash/manual/bash.html#Process-Substitution\" rel=\"noreferrer\">docs</a>):</p>\n<pre><code>diff &lt;(jq --sort-keys . A.json) &lt;(jq --sort-keys . B.json)\n</code></pre>\n<p>Objects key order will be ignored, but array order will still matter. It is possible to work-around that, if desired, by sorting array values in some other way, or making them set-like (e.g. <code>[&quot;foo&quot;, &quot;bar&quot;]</code> → <code>{&quot;foo&quot;: null, &quot;bar&quot;: null}</code>; this will also remove duplicates).</p>\n<p>Alternatively, substitute <code>diff</code> for some other comparator, e.g. <code>cmp</code>, <code>colordiff</code>, or <code>vimdiff</code>, depending on your needs. If all you want is a yes or no answer, consider using <code>cmp</code> and passing <code>--compact-output</code> to <code>jq</code> to not format the output for a potential small performance increase.</p>\n"},{"owner":{"reputation":65959,"accept_rate":88,"display_name":"tokland","link":"https://stackoverflow.com/users/188031/tokland"},"is_accepted":false,"score":0,"creation_date":1476788218,"answer_id":40106366,"question_id":31930041,"share_link":"https://stackoverflow.com/a/40106366","body_markdown":"If you also want to see the differences, using @Erik&#39;s answer as inspiration and [js-beautify][1]:\r\n\r\n    $ echo &#39;[{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 56}, {&quot;name&quot;: &quot;Mary&quot;, &quot;age&quot;: 67}]&#39; &gt; file1.json\r\n    $ echo &#39;[{&quot;age&quot;: 56, &quot;name&quot;: &quot;John&quot;}, {&quot;name&quot;: &quot;Mary&quot;, &quot;age&quot;: 61}]&#39; &gt; file2.json\r\n\r\n    $ diff -u --color \\\r\n            &lt;(jq -cS . file1.json | js-beautify -f -) \\\r\n            &lt;(jq -cS . file2.json | js-beautify -f -)\r\n    --- /dev/fd/63\t2016-10-18 13:03:59.397451598 +0200\r\n    +++ /dev/fd/62\t2016-10-18 13:03:59.397451598 +0200\r\n    @@ -2,6 +2,6 @@\r\n         &quot;age&quot;: 56,\r\n         &quot;name&quot;: &quot;John Smith&quot;\r\n     }, {\r\n    -    &quot;age&quot;: 67,\r\n    +    &quot;age&quot;: 61,\r\n         &quot;name&quot;: &quot;Mary Stuart&quot;\r\n     }]\r\n\r\n  [1]: https://github.com/beautify-web/js-beautify\r\n\r\n","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/40106366#40106366","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>If you also want to see the differences, using @Erik's answer as inspiration and <a href=\"https://github.com/beautify-web/js-beautify\" rel=\"nofollow\">js-beautify</a>:</p>\n\n<pre><code>$ echo '[{\"name\": \"John\", \"age\": 56}, {\"name\": \"Mary\", \"age\": 67}]' &gt; file1.json\n$ echo '[{\"age\": 56, \"name\": \"John\"}, {\"name\": \"Mary\", \"age\": 61}]' &gt; file2.json\n\n$ diff -u --color \\\n        &lt;(jq -cS . file1.json | js-beautify -f -) \\\n        &lt;(jq -cS . file2.json | js-beautify -f -)\n--- /dev/fd/63  2016-10-18 13:03:59.397451598 +0200\n+++ /dev/fd/62  2016-10-18 13:03:59.397451598 +0200\n@@ -2,6 +2,6 @@\n     \"age\": 56,\n     \"name\": \"John Smith\"\n }, {\n-    \"age\": 67,\n+    \"age\": 61,\n     \"name\": \"Mary Stuart\"\n }]\n</code></pre>\n"},{"owner":{"reputation":1049,"display_name":"Joe Burnett","link":"https://stackoverflow.com/users/5368675/joe-burnett"},"is_accepted":false,"score":90,"creation_date":1480972695,"answer_id":40983522,"question_id":31930041,"share_link":"https://stackoverflow.com/a/40983522","body_markdown":"Use [`jd`](https://github.com/josephburnett/jd#command-line-usage) with the `-set` option:\r\n\r\nNo output means no difference.\r\n\r\n    $ jd -set A.json B.json\r\n\r\nDifferences are shown as an @ path and + or -.\r\n\r\n    $ jd -set A.json C.json\r\n    \r\n    @ [&quot;People&quot;,{}]\r\n    + &quot;Carla&quot;\r\n\r\nThe output diffs can also be used as patch files with the `-p` option.\r\n\r\n    $ jd -set -o patch A.json C.json; jd -set -p patch B.json\r\n    \r\n    {&quot;City&quot;:&quot;Boston&quot;,&quot;People&quot;:[&quot;John&quot;,&quot;Carla&quot;,&quot;Bryan&quot;],&quot;State&quot;:&quot;MA&quot;}\r\n\r\nhttps://github.com/josephburnett/jd#command-line-usage","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/40983522#40983522","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Use <a href=\"https://github.com/josephburnett/jd#command-line-usage\" rel=\"noreferrer\"><code>jd</code></a> with the <code>-set</code> option:</p>\n\n<p>No output means no difference.</p>\n\n<pre><code>$ jd -set A.json B.json\n</code></pre>\n\n<p>Differences are shown as an @ path and + or -.</p>\n\n<pre><code>$ jd -set A.json C.json\n\n@ [\"People\",{}]\n+ \"Carla\"\n</code></pre>\n\n<p>The output diffs can also be used as patch files with the <code>-p</code> option.</p>\n\n<pre><code>$ jd -set -o patch A.json C.json; jd -set -p patch B.json\n\n{\"City\":\"Boston\",\"People\":[\"John\",\"Carla\",\"Bryan\"],\"State\":\"MA\"}\n</code></pre>\n\n<p><a href=\"https://github.com/josephburnett/jd#command-line-usage\" rel=\"noreferrer\">https://github.com/josephburnett/jd#command-line-usage</a></p>\n"},{"owner":{"reputation":21,"display_name":"Shivraj","link":"https://stackoverflow.com/users/2588307/shivraj"},"is_accepted":false,"score":1,"creation_date":1538807698,"answer_id":52676356,"question_id":31930041,"share_link":"https://stackoverflow.com/a/52676356","body_markdown":"Perhaps you could use this sort and diff tool: http://novicelab.org/jsonsortdiff/ which first sorts the objects semantically and then compares it. It is based on https://www.npmjs.com/package/jsonabc","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/52676356#52676356","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Perhaps you could use this sort and diff tool: <a href=\"http://novicelab.org/jsonsortdiff/\" rel=\"nofollow noreferrer\">http://novicelab.org/jsonsortdiff/</a> which first sorts the objects semantically and then compares it. It is based on <a href=\"https://www.npmjs.com/package/jsonabc\" rel=\"nofollow noreferrer\">https://www.npmjs.com/package/jsonabc</a></p>\n"},{"owner":{"reputation":1028,"accept_rate":100,"display_name":"Andrew","link":"https://stackoverflow.com/users/538507/andrew"},"is_accepted":false,"score":12,"creation_date":1567632000,"answer_id":57795761,"question_id":31930041,"share_link":"https://stackoverflow.com/a/57795761","body_markdown":"Pulling in the best from the top two answers to get a `jq` based json diff:\r\n\r\n```\r\ndiff \\\r\n  &lt;(jq -S &#39;def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (. | (post_recurse | arrays) |= sort)&#39; &quot;$original_json&quot;) \\\r\n  &lt;(jq -S &#39;def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (. | (post_recurse | arrays) |= sort)&#39; &quot;$changed_json&quot;)\r\n```\r\n\r\nThis takes the elegant array sorting solution from https://stackoverflow.com/a/31933234/538507 (which allows us to treat arrays as sets) and the clean bash redirection into `diff` from https://stackoverflow.com/a/37175540/538507 This addresses the case where you want a diff of two json files and the order of the array contents is not relevant.","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/57795761#57795761","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Pulling in the best from the top two answers to get a <code>jq</code> based json diff:</p>\n\n<pre><code>diff \\\n  &lt;(jq -S 'def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (. | (post_recurse | arrays) |= sort)' \"$original_json\") \\\n  &lt;(jq -S 'def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); (. | (post_recurse | arrays) |= sort)' \"$changed_json\")\n</code></pre>\n\n<p>This takes the elegant array sorting solution from <a href=\"https://stackoverflow.com/a/31933234/538507\">https://stackoverflow.com/a/31933234/538507</a> (which allows us to treat arrays as sets) and the clean bash redirection into <code>diff</code> from <a href=\"https://stackoverflow.com/a/37175540/538507\">https://stackoverflow.com/a/37175540/538507</a> This addresses the case where you want a diff of two json files and the order of the array contents is not relevant.</p>\n"},{"owner":{"reputation":1382,"accept_rate":89,"display_name":"Maikon","link":"https://stackoverflow.com/users/3029403/maikon"},"is_accepted":false,"score":6,"creation_date":1572867477,"answer_id":58692653,"question_id":31930041,"share_link":"https://stackoverflow.com/a/58692653","body_markdown":"There&#39;s an answer for this [here](https://stackoverflow.com/a/17194704/3029403) that would be useful. \r\n\r\nEssentially you can use the Git `diff` functionality (even for non-Git tracked files) which also includes colour in the output:\r\n\r\n`git diff --no-index payload_1.json payload_2.json`","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/58692653#58692653","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>There's an answer for this <a href=\"https://stackoverflow.com/a/17194704/3029403\">here</a> that would be useful. </p>\n\n<p>Essentially you can use the Git <code>diff</code> functionality (even for non-Git tracked files) which also includes colour in the output:</p>\n\n<p><code>git diff --no-index payload_1.json payload_2.json</code></p>\n"},{"owner":{"reputation":3343,"accept_rate":80,"display_name":"Acapulco","link":"https://stackoverflow.com/users/767676/acapulco"},"is_accepted":false,"score":2,"creation_date":1575999492,"answer_id":59272710,"question_id":31930041,"share_link":"https://stackoverflow.com/a/59272710","body_markdown":"One more tool for those to which the previous answers are not a good fit, you can try [jdd][1].\r\n\r\nIt&#39;s HTML based so you can either use it online at [www.jsondiff.com][2] or, if you prefer running it locally, just download the project and open the index.html.\r\n\r\n\r\n\r\n\r\n  [1]: https://github.com/zgrossbart/jdd\r\n  [2]: http://www.jsondiff.com/","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/59272710#59272710","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>One more tool for those to which the previous answers are not a good fit, you can try <a href=\"https://github.com/zgrossbart/jdd\" rel=\"nofollow noreferrer\">jdd</a>.</p>\n\n<p>It's HTML based so you can either use it online at <a href=\"http://www.jsondiff.com/\" rel=\"nofollow noreferrer\">www.jsondiff.com</a> or, if you prefer running it locally, just download the project and open the index.html.</p>\n"},{"owner":{"reputation":6971,"display_name":"Ghislain Fourny","link":"https://stackoverflow.com/users/284285/ghislain-fourny"},"is_accepted":false,"score":0,"creation_date":1630688292,"answer_id":69048391,"question_id":31930041,"share_link":"https://stackoverflow.com/a/69048391","body_markdown":"In [JSONiq][1], you can simply use the deep-equal function:\r\n\r\n    deep-equal(\r\n      {\r\n        &quot;People&quot;: [&quot;John&quot;, &quot;Bryan&quot;, &quot;Carla&quot;],\r\n        &quot;City&quot;: &quot;Boston&quot;,\r\n        &quot;State&quot;: &quot;MA&quot;\r\n      },\r\n      {\r\n        &quot;People&quot;: [&quot;Bryan&quot;, &quot;John&quot;],\r\n        &quot;State&quot;: &quot;MA&quot;,\r\n        &quot;City&quot;: &quot;Boston&quot;\r\n      }\r\n    )\r\n\r\nwhich returns\r\n\r\n    false\r\n    \r\nYou can also read from files (locally or an HTTP URL also works) like so:\r\n\r\n    deep-equal(\r\n      json-doc(&quot;path to doc A.json&quot;),\r\n      json-doc(&quot;path to doc B.json&quot;)\r\n    )\r\n\r\nA possible implementation is [RumbleDB][2].\r\n\r\nHowever, you need to be aware that it is not quite correct that the first two documents are the same: [JSON][4] defines arrays as ordered lists of values.\r\n\r\n    [&quot;Bryan&quot;, &quot;John&quot;]\r\n\r\nis not the same as:\r\n\r\n    [&quot;John&quot;, &quot;Bryan&quot;]\r\n\r\n  [1]: https://jsoniq.org\r\n  [2]: https://rumbledb.org/\r\n  [3]: https://zorba.io\r\n  [4]: https://json.org","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files/69048391#69048391","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>In <a href=\"https://jsoniq.org\" rel=\"nofollow noreferrer\">JSONiq</a>, you can simply use the deep-equal function:</p>\n<pre><code>deep-equal(\n  {\n    &quot;People&quot;: [&quot;John&quot;, &quot;Bryan&quot;, &quot;Carla&quot;],\n    &quot;City&quot;: &quot;Boston&quot;,\n    &quot;State&quot;: &quot;MA&quot;\n  },\n  {\n    &quot;People&quot;: [&quot;Bryan&quot;, &quot;John&quot;],\n    &quot;State&quot;: &quot;MA&quot;,\n    &quot;City&quot;: &quot;Boston&quot;\n  }\n)\n</code></pre>\n<p>which returns</p>\n<pre><code>false\n</code></pre>\n<p>You can also read from files (locally or an HTTP URL also works) like so:</p>\n<pre><code>deep-equal(\n  json-doc(&quot;path to doc A.json&quot;),\n  json-doc(&quot;path to doc B.json&quot;)\n)\n</code></pre>\n<p>A possible implementation is <a href=\"https://rumbledb.org/\" rel=\"nofollow noreferrer\">RumbleDB</a>.</p>\n<p>However, you need to be aware that it is not quite correct that the first two documents are the same: <a href=\"https://json.org\" rel=\"nofollow noreferrer\">JSON</a> defines arrays as ordered lists of values.</p>\n<pre><code>[&quot;Bryan&quot;, &quot;John&quot;]\n</code></pre>\n<p>is not the same as:</p>\n<pre><code>[&quot;John&quot;, &quot;Bryan&quot;]\n</code></pre>\n"}],"owner":{"reputation":90866,"accept_rate":77,"display_name":"Amelio Vazquez-Reina","link":"https://stackoverflow.com/users/283296/amelio-vazquez-reina"},"is_answered":true,"view_count":117811,"up_vote_count":167,"accepted_answer_id":31933234,"answer_count":10,"score":167,"last_activity_date":1630688292,"creation_date":1439244684,"last_edit_date":1556484711,"question_id":31930041,"body_markdown":"Are there any command line utilities that can be used to find if two JSON files are identical with invariance to within-dictionary-key and within-list-element ordering?\r\n\r\nCould this be done with [`jq`][1] or some other equivalent tool?\r\n\r\n## Examples:\r\n\r\nThese two JSON files are identical\r\n\r\n`A`:\r\n\r\n    {\r\n      &quot;People&quot;: [&quot;John&quot;, &quot;Bryan&quot;],\r\n      &quot;City&quot;: &quot;Boston&quot;,\r\n      &quot;State&quot;: &quot;MA&quot;\r\n    }\r\n`B`:\r\n\r\n    {\r\n      &quot;People&quot;: [&quot;Bryan&quot;, &quot;John&quot;],\r\n      &quot;State&quot;: &quot;MA&quot;,\r\n      &quot;City&quot;: &quot;Boston&quot;\r\n    }\r\n\r\nbut these two JSON files are different:\r\n\r\n`A`:\r\n\r\n    {\r\n      &quot;People&quot;: [&quot;John&quot;, &quot;Bryan&quot;, &quot;Carla&quot;],\r\n      &quot;City&quot;: &quot;Boston&quot;,\r\n      &quot;State&quot;: &quot;MA&quot;\r\n    }\r\n`C`:\r\n\r\n    {\r\n      &quot;People&quot;: [&quot;Bryan&quot;, &quot;John&quot;],\r\n      &quot;State&quot;: &quot;MA&quot;,\r\n      &quot;City&quot;: &quot;Boston&quot;\r\n    }\r\n\r\nThat would be:\r\n\r\n    $ some_diff_command A.json B.json\r\n\r\n    $ some_diff_command A.json C.json\r\n    The files are not structurally identical\r\n\r\n\r\n  [1]: http://stedolan.github.io/jq/","link":"https://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-compare-json-files","title":"Using jq or alternative command line tools to compare JSON files","body":"<p>Are there any command line utilities that can be used to find if two JSON files are identical with invariance to within-dictionary-key and within-list-element ordering?</p>\n\n<p>Could this be done with <a href=\"http://stedolan.github.io/jq/\" rel=\"noreferrer\"><code>jq</code></a> or some other equivalent tool?</p>\n\n<h2>Examples:</h2>\n\n<p>These two JSON files are identical</p>\n\n<p><code>A</code>:</p>\n\n<pre><code>{\n  \"People\": [\"John\", \"Bryan\"],\n  \"City\": \"Boston\",\n  \"State\": \"MA\"\n}\n</code></pre>\n\n<p><code>B</code>:</p>\n\n<pre><code>{\n  \"People\": [\"Bryan\", \"John\"],\n  \"State\": \"MA\",\n  \"City\": \"Boston\"\n}\n</code></pre>\n\n<p>but these two JSON files are different:</p>\n\n<p><code>A</code>:</p>\n\n<pre><code>{\n  \"People\": [\"John\", \"Bryan\", \"Carla\"],\n  \"City\": \"Boston\",\n  \"State\": \"MA\"\n}\n</code></pre>\n\n<p><code>C</code>:</p>\n\n<pre><code>{\n  \"People\": [\"Bryan\", \"John\"],\n  \"State\": \"MA\",\n  \"City\": \"Boston\"\n}\n</code></pre>\n\n<p>That would be:</p>\n\n<pre><code>$ some_diff_command A.json B.json\n\n$ some_diff_command A.json C.json\nThe files are not structurally identical\n</code></pre>\n"},{"tags":["json","string","sed","escaping","jq"],"answers":[{"owner":{"reputation":54320,"display_name":"jwodder","link":"https://stackoverflow.com/users/744178/jwodder"},"is_accepted":true,"score":292,"creation_date":1454420905,"answer_id":35155249,"question_id":35154684,"share_link":"https://stackoverflow.com/a/35155249","body_markdown":"jq has the [`fromjson`](https://stedolan.github.io/jq/manual/v1.5/#Convertto/fromJSON) builtin for this:\r\n\r\n    jq &#39;.c | fromjson | .id&#39; myFile.json\r\n\r\n`fromjson` was added in version 1.4.","link":"https://stackoverflow.com/questions/35154684/how-to-parse-a-json-string-with-jq-or-other-alternatives/35155249#35155249","title":"how to parse a JSON String with jq (or other alternatives)?","body":"<p>jq has the <a href=\"https://stedolan.github.io/jq/manual/v1.5/#Convertto/fromJSON\" rel=\"noreferrer\"><code>fromjson</code></a> builtin for this:</p>\n\n<pre><code>jq '.c | fromjson | .id' myFile.json\n</code></pre>\n\n<p><code>fromjson</code> was added in version 1.4.</p>\n"},{"owner":{"reputation":87785,"display_name":"Casimir et Hippolyte","link":"https://stackoverflow.com/users/2255089/casimir-et-hippolyte"},"is_accepted":false,"score":71,"creation_date":1454421021,"answer_id":35155290,"question_id":35154684,"share_link":"https://stackoverflow.com/a/35155290","body_markdown":"You can use the raw output (-r) that will unescape characters:\r\n\r\n    jq -r .c myfile.json | jq .id\r\n\r\nADDENDUM: This has the advantage that it works in jq 1.3 and up; indeed, it should work in every version of jq that has the -r option.","link":"https://stackoverflow.com/questions/35154684/how-to-parse-a-json-string-with-jq-or-other-alternatives/35155290#35155290","title":"how to parse a JSON String with jq (or other alternatives)?","body":"<p>You can use the raw output (-r) that will unescape characters:</p>\n\n<pre><code>jq -r .c myfile.json | jq .id\n</code></pre>\n\n<p>ADDENDUM: This has the advantage that it works in jq 1.3 and up; indeed, it should work in every version of jq that has the -r option.</p>\n"},{"owner":{"reputation":11847,"display_name":"avivamg","link":"https://stackoverflow.com/users/4692049/avivamg"},"is_accepted":false,"score":1,"creation_date":1620114683,"answer_id":67380760,"question_id":35154684,"share_link":"https://stackoverflow.com/a/67380760","body_markdown":"**Motivation**: you want to parse JSON string -  you want to escape a JSON object that&#39;s wrapped with quotes and represented as a String buffer, and convert it to a valid JSON object. For example:\r\n\r\nsome **JSON unescaped string** :\r\n\r\n    &quot;{\\&quot;name\\&quot;:\\&quot;John Doe\\&quot;,\\&quot;position\\&quot;:\\&quot;developer\\&quot;}&quot;\r\n\r\nthe **expected result** ( a JSON object ):\r\n\r\n    {&quot;name&quot;:&quot;John Doe&quot;,&quot;position&quot;:&quot;developer&quot;}\r\n\r\n**Solution**: In order to escape a JSON string and convert it into a valid JSON object use the `sed` tool in command line and use regex expressions to remove/replace specific characters:\r\n\r\n    cat current_json.txt | sed -e &#39;s/\\\\\\&quot;/\\&quot;/g&#39; -e &#39;s/^.//g&#39; -e &#39;s/.$//g&#39;\r\n\r\n\r\n `s/\\\\\\&quot;/\\&quot;/g` replacing all backslashes and quotes ( `\\&quot;` ) into quotes only (`&quot;`)\r\n\r\n  `s/^.//g` replacing the first character in the stream to none character\r\n\r\n  `s/.$//g` replacing the last character in the stream to none character","link":"https://stackoverflow.com/questions/35154684/how-to-parse-a-json-string-with-jq-or-other-alternatives/67380760#67380760","title":"how to parse a JSON String with jq (or other alternatives)?","body":"<p><strong>Motivation</strong>: you want to parse JSON string -  you want to escape a JSON object that's wrapped with quotes and represented as a String buffer, and convert it to a valid JSON object. For example:</p>\n<p>some <strong>JSON unescaped string</strong> :</p>\n<pre><code>&quot;{\\&quot;name\\&quot;:\\&quot;John Doe\\&quot;,\\&quot;position\\&quot;:\\&quot;developer\\&quot;}&quot;\n</code></pre>\n<p>the <strong>expected result</strong> ( a JSON object ):</p>\n<pre><code>{&quot;name&quot;:&quot;John Doe&quot;,&quot;position&quot;:&quot;developer&quot;}\n</code></pre>\n<p><strong>Solution</strong>: In order to escape a JSON string and convert it into a valid JSON object use the <code>sed</code> tool in command line and use regex expressions to remove/replace specific characters:</p>\n<pre><code>cat current_json.txt | sed -e 's/\\\\\\&quot;/\\&quot;/g' -e 's/^.//g' -e 's/.$//g'\n</code></pre>\n<p><code>s/\\\\\\&quot;/\\&quot;/g</code> replacing all backslashes and quotes ( <code>\\&quot;</code> ) into quotes only (<code>&quot;</code>)</p>\n<p><code>s/^.//g</code> replacing the first character in the stream to none character</p>\n<p><code>s/.$//g</code> replacing the last character in the stream to none character</p>\n"}],"owner":{"reputation":2392,"display_name":"Colin Grogan","link":"https://stackoverflow.com/users/4449789/colin-grogan"},"is_answered":true,"view_count":78889,"up_vote_count":164,"accepted_answer_id":35155249,"answer_count":3,"score":164,"last_activity_date":1620207798,"creation_date":1454419294,"last_edit_date":1620207798,"question_id":35154684,"body_markdown":"I&#39;m trying to get `jq` to parse a JSON structure like:\r\n  \r\n    {\r\n      &quot;a&quot; : 1,\r\n      &quot;b&quot; : 2,\r\n      &quot;c&quot; : &quot;{\\&quot;id\\&quot;:\\&quot;9ee ...\\&quot;,\\&quot;parent\\&quot;:\\&quot;abc...\\&quot;}\\n&quot;\r\n    }\r\n\r\nThat is, an element in the JSON is a string with escaped json.\r\n\r\nSo, I have something along the lines of\r\n`$ jq [.c] myFile.json | jq [.id]`\r\n\r\nBut that crashes with `jq: error: Cannot index string with string`\r\n\r\nThis is because the output of .c is a string, not more JSON.\r\nHow do I get jq to parse this string?\r\n\r\nMy initial solution is to use sed to replace all the escape chars (`\\&quot;:\\&quot;`, `\\&quot;,\\&quot;` and `\\&quot;`) but that&#39;s messy, I assume there&#39;s a way built into `jq` to do this?\r\n\r\nThanks!\r\n\r\nedit:\r\nAlso, the jq version available here is:\r\n    \r\n    $ jq --version\r\n    jq version 1.3\r\n\r\nI guess I could update it if required.","link":"https://stackoverflow.com/questions/35154684/how-to-parse-a-json-string-with-jq-or-other-alternatives","title":"how to parse a JSON String with jq (or other alternatives)?","body":"<p>I'm trying to get <code>jq</code> to parse a JSON structure like:</p>\n\n<pre><code>{\n  \"a\" : 1,\n  \"b\" : 2,\n  \"c\" : \"{\\\"id\\\":\\\"9ee ...\\\",\\\"parent\\\":\\\"abc...\\\"}\\n\"\n}\n</code></pre>\n\n<p>That is, an element in the JSON is a string with escaped json.</p>\n\n<p>So, I have something along the lines of\n<code>$ jq [.c] myFile.json | jq [.id]</code></p>\n\n<p>But that crashes with <code>jq: error: Cannot index string with string</code></p>\n\n<p>This is because the output of .c is a string, not more JSON.\nHow do I get jq to parse this string?</p>\n\n<p>My initial solution is to use sed to replace all the escape chars (<code>\\\":\\\"</code>, <code>\\\",\\\"</code> and <code>\\\"</code>) but that's messy, I assume there's a way built into <code>jq</code> to do this?</p>\n\n<p>Thanks!</p>\n\n<p>edit:\nAlso, the jq version available here is:</p>\n\n<pre><code>$ jq --version\njq version 1.3\n</code></pre>\n\n<p>I guess I could update it if required.</p>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":true,"score":243,"creation_date":1449849532,"answer_id":34227629,"question_id":34226370,"share_link":"https://stackoverflow.com/a/34227629","body_markdown":"To get the top-level keys as a stream, you can use the [built-in function][1] `keys[]`.  So one solution to your particular problem would be:\r\n\r\n    jq -r &#39;keys[] as $k | &quot;\\($k), \\(.[$k] | .ip)&quot;&#39; \r\n\r\n`keys` produces the key names in sorted order; if you want them in the original order, use `keys_unsorted`.\r\n\r\nAnother alternative, which produces keys in the original order, is: \r\n\r\n    jq -r &#39;to_entries[] | &quot;\\(.key), \\(.value | .ip)&quot;&#39;\r\n\r\n### CSV and TSV output\r\n\r\nThe @csv and @tsv filters might also be worth considering here, e.g.\r\n\r\n    jq -r &#39;to_entries[] | [.key, .value.ip] | @tsv&#39;\r\n\r\nproduces:\r\n\r\n    host1\t10.1.2.3\r\n    host2\t10.1.2.2\r\n    host3\t10.1.18.1\r\n\r\n### Embedded objects\r\nIf the keys of interest are embedded as in the following example, the jq filter would have to be modified along the lines shown.\r\n\r\nInput:\r\n\r\n```json\r\n{\r\n  &quot;myhosts&quot;: {\r\n    &quot;host1&quot;: { &quot;ip&quot;: &quot;10.1.2.3&quot; },\r\n    &quot;host2&quot;: { &quot;ip&quot;: &quot;10.1.2.2&quot; },\r\n    &quot;host3&quot;: { &quot;ip&quot;: &quot;10.1.18.1&quot; }\r\n  }\r\n}\r\n```\r\n\r\nModification:\r\n\r\n```\r\njq -r &#39;.myhosts | keys[] as $k | &quot;\\($k), \\(.[$k] | .ip)&quot;&#39;\r\n```\r\n\r\n  [1]: https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions","link":"https://stackoverflow.com/questions/34226370/jq-print-key-and-value-for-each-entry-in-an-object/34227629#34227629","title":"jq: print key and value for each entry in an object","body":"<p>To get the top-level keys as a stream, you can use the <a href=\"https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions\" rel=\"noreferrer\">built-in function</a> <code>keys[]</code>.  So one solution to your particular problem would be:</p>\n\n<pre><code>jq -r 'keys[] as $k | \"\\($k), \\(.[$k] | .ip)\"' \n</code></pre>\n\n<p><code>keys</code> produces the key names in sorted order; if you want them in the original order, use <code>keys_unsorted</code>.</p>\n\n<p>Another alternative, which produces keys in the original order, is: </p>\n\n<pre><code>jq -r 'to_entries[] | \"\\(.key), \\(.value | .ip)\"'\n</code></pre>\n\n<h3>CSV and TSV output</h3>\n\n<p>The @csv and @tsv filters might also be worth considering here, e.g.</p>\n\n<pre><code>jq -r 'to_entries[] | [.key, .value.ip] | @tsv'\n</code></pre>\n\n<p>produces:</p>\n\n<pre><code>host1   10.1.2.3\nhost2   10.1.2.2\nhost3   10.1.18.1\n</code></pre>\n\n<h3>Embedded objects</h3>\n\n<p>If the keys of interest are embedded as in the following example, the jq filter would have to be modified along the lines shown.</p>\n\n<p>Input:</p>\n\n<pre><code>{\n  \"myhosts\": {\n    \"host1\": { \"ip\": \"10.1.2.3\" },\n    \"host2\": { \"ip\": \"10.1.2.2\" },\n    \"host3\": { \"ip\": \"10.1.18.1\" }\n  }\n}\n</code></pre>\n\n<p>Modification:</p>\n\n<pre><code>jq -r '.myhosts | keys[] as $k | \"\\($k), \\(.[$k] | .ip)\"'\n</code></pre>\n"},{"owner":{"reputation":1325,"display_name":"Viacheslav","link":"https://stackoverflow.com/users/7747308/viacheslav"},"is_accepted":false,"score":98,"creation_date":1521104347,"answer_id":49295083,"question_id":34226370,"share_link":"https://stackoverflow.com/a/49295083","body_markdown":"Came across very elegant solution\r\n    \r\n    jq &#39;with_entries(.value |= .ip)&#39;\r\n\r\nWhich ouputs\r\n\r\n    {\r\n      &quot;host1&quot;: &quot;10.1.2.3&quot;,\r\n      &quot;host2&quot;: &quot;10.1.2.2&quot;,\r\n      &quot;host3&quot;: &quot;10.1.18.1&quot;\r\n    }\r\n\r\nHere is the jqplay snippet to play with: https://jqplay.org/s/Jb_fnBveMQ\r\n\r\nThe function `with_entries` converts each object in the list of objects to Key/Value-pair, thus we can access `.key` or `.value` respectively, we&#39;re updating (overwriting) every KV-item `.value` with the field `.ip` by using update `|=` operator","link":"https://stackoverflow.com/questions/34226370/jq-print-key-and-value-for-each-entry-in-an-object/49295083#49295083","title":"jq: print key and value for each entry in an object","body":"<p>Came across very elegant solution</p>\n\n<pre><code>jq 'with_entries(.value |= .ip)'\n</code></pre>\n\n<p>Which ouputs</p>\n\n<pre><code>{\n  \"host1\": \"10.1.2.3\",\n  \"host2\": \"10.1.2.2\",\n  \"host3\": \"10.1.18.1\"\n}\n</code></pre>\n\n<p>Here is the jqplay snippet to play with: <a href=\"https://jqplay.org/s/Jb_fnBveMQ\" rel=\"noreferrer\">https://jqplay.org/s/Jb_fnBveMQ</a></p>\n\n<p>The function <code>with_entries</code> converts each object in the list of objects to Key/Value-pair, thus we can access <code>.key</code> or <code>.value</code> respectively, we're updating (overwriting) every KV-item <code>.value</code> with the field <code>.ip</code> by using update <code>|=</code> operator</p>\n"}],"owner":{"reputation":1703,"display_name":"Jeff Tang","link":"https://stackoverflow.com/users/5669275/jeff-tang"},"is_answered":true,"view_count":153221,"up_vote_count":149,"accepted_answer_id":34227629,"answer_count":2,"score":149,"last_activity_date":1687499892,"creation_date":1449845890,"last_edit_date":1687499892,"question_id":34226370,"body_markdown":"How do I get **jq** to take json like this:\r\n\r\n    {\r\n      &quot;host1&quot;: { &quot;ip&quot;: &quot;10.1.2.3&quot; },\r\n      &quot;host2&quot;: { &quot;ip&quot;: &quot;10.1.2.2&quot; },\r\n      &quot;host3&quot;: { &quot;ip&quot;: &quot;10.1.18.1&quot; }\r\n    }\r\n\r\nand generate this output:\r\n\r\n    host1, 10.1.2.3\r\n    host2, 10.1.2.2\r\n    host3, 10.1.18.1\r\n\r\nI&#39;m not interested in the formatting, I just can&#39;t figure out how to access the key name and value.","link":"https://stackoverflow.com/questions/34226370/jq-print-key-and-value-for-each-entry-in-an-object","title":"jq: print key and value for each entry in an object","body":"<p>How do I get <strong>jq</strong> to take json like this:</p>\n\n<pre><code>{\n  \"host1\": { \"ip\": \"10.1.2.3\" },\n  \"host2\": { \"ip\": \"10.1.2.2\" },\n  \"host3\": { \"ip\": \"10.1.18.1\" }\n}\n</code></pre>\n\n<p>and generate this output:</p>\n\n<pre><code>host1, 10.1.2.3\nhost2, 10.1.2.2\nhost3, 10.1.18.1\n</code></pre>\n\n<p>I'm not interested in the formatting, I just can't figure out how to access the key name and value.</p>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":5502,"accept_rate":83,"display_name":"hmedia1","link":"https://stackoverflow.com/users/3544399/hmedia1"},"is_accepted":true,"score":244,"creation_date":1478160584,"answer_id":40396556,"question_id":40396445,"share_link":"https://stackoverflow.com/a/40396556","body_markdown":"**`-c`** is what you likely need\r\n\r\nUsing the output you posted above, you can process it further:\r\n\r\n &lt;pre&gt;\r\njq **-c** . input\r\n&lt;/pre&gt;\r\n\r\nTo Give;\r\n\r\n\r\n    {&quot;key&quot;:&quot;SEA-739&quot;,&quot;status&quot;:&quot;Open&quot;,&quot;assignee&quot;:null}\r\n    {&quot;key&quot;:&quot;SEA-738&quot;,&quot;status&quot;:&quot;Resolved&quot;,&quot;assignee&quot;:&quot;user2@mycompany.com&quot;}\r\n\r\nOr you can just change your original command\r\n&lt;/pre&gt;\r\n\r\n  &lt;/pre&gt;\r\n\r\n**FROM**\r\n\r\n &lt;pre&gt;\r\njq **-r** &#39;(.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})&#39;\r\n&lt;/pre&gt;\r\n\r\n&lt;/pre&gt; \r\n**TO**\r\n\r\n &lt;pre&gt;jq **-c** &#39;(.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})&#39;\r\n&lt;/pre&gt;\r\n","link":"https://stackoverflow.com/questions/40396445/get-outputs-from-jq-on-a-single-line/40396556#40396556","title":"Get outputs from jq on a single line","body":"<p><strong><code>-c</code></strong> is what you likely need</p>\n\n<p>Using the output you posted above, you can process it further:</p>\n\n<p><pre>\njq <strong>-c</strong> . input\n</pre></p>\n\n<p>To Give;</p>\n\n<pre><code>{\"key\":\"SEA-739\",\"status\":\"Open\",\"assignee\":null}\n{\"key\":\"SEA-738\",\"status\":\"Resolved\",\"assignee\":\"user2@mycompany.com\"}\n</code></pre>\n\n<p>Or you can just change your original command\n</p>\n\n<p></p>\n\n<p><strong>FROM</strong></p>\n\n<p><pre>\njq <strong>-r</strong> '(.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})'\n</pre></p>\n\n<p> \n<strong>TO</strong></p>\n\n<p><pre>jq <strong>-c</strong> '(.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})'\n</pre></p>\n"},{"owner":{"reputation":3797,"accept_rate":90,"display_name":"bschlueter","link":"https://stackoverflow.com/users/1054423/bschlueter"},"is_accepted":false,"score":41,"creation_date":1572546966,"answer_id":58649439,"question_id":40396445,"share_link":"https://stackoverflow.com/a/58649439","body_markdown":"Not precisely an answer to the long version of the question, but for people who Googled this looking for other single line output formats from jq:\r\n\r\n```\r\n$ jq -r &#39;[.key, .status, .assignee]|@tsv&#39; &lt;&lt;&lt;&#39;\r\n {\r\n   &quot;key&quot;: &quot;SEA-739&quot;,\r\n   &quot;status&quot;: &quot;Open&quot;,\r\n   &quot;assignee&quot;: null\r\n }\r\n {\r\n   &quot;key&quot;: &quot;SEA-738&quot;,\r\n   &quot;status&quot;: &quot;Resolved&quot;,\r\n   &quot;assignee&quot;: &quot;user2@mycompany.com&quot;\r\n }&#39;\r\n```\r\noutputs:\r\n```\r\nSEA-739 Open\r\nSEA-738 Resolved        user2@mycompany.com\r\n```\r\n\r\n`@sh` rather than `@tsv` returns:\r\n\r\n```\r\n&#39;SEA-739&#39; &#39;Open&#39; null\r\n&#39;SEA-738&#39; &#39;Resolved&#39; &#39;user2@mycompany.com&#39;\r\n```\r\n\r\nAdditionally, there are other output formats to do things such as escape the output, like `@html`, or encode it, as with `@base64`. The list is available in the *Format strings and escaping* section of either the *jq(1)* man page or online at [stedolan.github.io/jq/manual](https://stedolan.github.io/jq/manual/).","link":"https://stackoverflow.com/questions/40396445/get-outputs-from-jq-on-a-single-line/58649439#58649439","title":"Get outputs from jq on a single line","body":"<p>Not precisely an answer to the long version of the question, but for people who Googled this looking for other single line output formats from jq:</p>\n<pre><code>$ jq -r '[.key, .status, .assignee]|@tsv' &lt;&lt;&lt;'\n {\n   &quot;key&quot;: &quot;SEA-739&quot;,\n   &quot;status&quot;: &quot;Open&quot;,\n   &quot;assignee&quot;: null\n }\n {\n   &quot;key&quot;: &quot;SEA-738&quot;,\n   &quot;status&quot;: &quot;Resolved&quot;,\n   &quot;assignee&quot;: &quot;user2@mycompany.com&quot;\n }'\n</code></pre>\n<p>outputs:</p>\n<pre><code>SEA-739 Open\nSEA-738 Resolved        user2@mycompany.com\n</code></pre>\n<p><code>@sh</code> rather than <code>@tsv</code> returns:</p>\n<pre><code>'SEA-739' 'Open' null\n'SEA-738' 'Resolved' 'user2@mycompany.com'\n</code></pre>\n<p>Additionally, there are other output formats to do things such as escape the output, like <code>@html</code>, or encode it, as with <code>@base64</code>. The list is available in the <em>Format strings and escaping</em> section of either the <em>jq(1)</em> man page or online at <a href=\"https://stedolan.github.io/jq/manual/\" rel=\"noreferrer\">stedolan.github.io/jq/manual</a>.</p>\n"},{"owner":{"reputation":1230,"accept_rate":75,"display_name":"Mike S","link":"https://stackoverflow.com/users/3768749/mike-s"},"is_accepted":false,"score":0,"creation_date":1680631801,"answer_id":75932555,"question_id":40396445,"share_link":"https://stackoverflow.com/a/75932555","body_markdown":"The answers with &quot;-c&quot; and &quot;-r&quot; didn&#39;t work for me with jq version 1.6. What I did was the following:\r\n\r\nGiven input like\r\n\r\n    {\r\n      &quot;parameters&quot;: {\r\n        &quot;puppetmaster&quot;: &quot;&quot;,\r\n        &quot;ansible_job_template_id&quot;: &quot;117&quot;,\r\n        &quot;lifecycle_environment&quot;: &quot;Dev&quot;,\r\n        &quot;hostname&quot;: &quot;childmas01&quot;,\r\n    }\r\n\r\nAnd a jq command like\r\n\r\n    jq -r &#39;.parameters | .hostname,.lifecycle_environment&#39; filename\r\n\r\nI got output like this:\r\n\r\n    chi12ldmas01\r\n    Dev\r\n\r\nI got the same results with -c instead of -r, and also with -cr. So I simply made the results into an array, and joined them with a space, like this:\r\n\r\n    jq -r &#39;.parameters | [ .hostname,.lifecycle_environment ] | join(&quot; &quot;)&#39;  filename\r\n\r\nTo get this:\r\n\r\n    childmas01 Dev\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/40396445/get-outputs-from-jq-on-a-single-line/75932555#75932555","title":"Get outputs from jq on a single line","body":"<p>The answers with &quot;-c&quot; and &quot;-r&quot; didn't work for me with jq version 1.6. What I did was the following:</p>\n<p>Given input like</p>\n<pre><code>{\n  &quot;parameters&quot;: {\n    &quot;puppetmaster&quot;: &quot;&quot;,\n    &quot;ansible_job_template_id&quot;: &quot;117&quot;,\n    &quot;lifecycle_environment&quot;: &quot;Dev&quot;,\n    &quot;hostname&quot;: &quot;childmas01&quot;,\n}\n</code></pre>\n<p>And a jq command like</p>\n<pre><code>jq -r '.parameters | .hostname,.lifecycle_environment' filename\n</code></pre>\n<p>I got output like this:</p>\n<pre><code>chi12ldmas01\nDev\n</code></pre>\n<p>I got the same results with -c instead of -r, and also with -cr. So I simply made the results into an array, and joined them with a space, like this:</p>\n<pre><code>jq -r '.parameters | [ .hostname,.lifecycle_environment ] | join(&quot; &quot;)'  filename\n</code></pre>\n<p>To get this:</p>\n<pre><code>childmas01 Dev\n</code></pre>\n"}],"owner":{"reputation":3615,"accept_rate":95,"display_name":"Jitesh Sojitra","link":"https://stackoverflow.com/users/4859833/jitesh-sojitra"},"is_answered":true,"view_count":128726,"up_vote_count":148,"accepted_answer_id":40396556,"answer_count":3,"score":148,"last_activity_date":1680631801,"creation_date":1478160082,"last_edit_date":1565898872,"question_id":40396445,"body_markdown":"I got below output using: https://stackoverflow.com/a/40330344\r\n\r\n     (.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})\r\n \r\n \r\n Output:\r\n \r\n     {  \r\n       &quot;key&quot;: &quot;SEA-739&quot;,\r\n       &quot;status&quot;: &quot;Open&quot;,\r\n       &quot;assignee&quot;: null\r\n     }\r\n     {\r\n       &quot;key&quot;: &quot;SEA-738&quot;,\r\n       &quot;status&quot;: &quot;Resolved&quot;,\r\n       &quot;assignee&quot;: &quot;user2@mycompany.com&quot;\r\n     }\r\n\r\nBut I need to parse each and every line but it&#39;s tough to identify which assignee is for which key as far as key group is concerned. Is this possible to make one bunch in one row using jq?\r\n\r\nExpected output:\r\n\r\n    { &quot;key&quot;: &quot;SEA-739&quot;, &quot;status&quot;: &quot;Open&quot;, &quot;assignee&quot;: null }\r\n    { &quot;key&quot;: &quot;SEA-738&quot;, &quot;status&quot;: &quot;Resolved&quot;, &quot;assignee&quot;: &quot;user2@mycompany.com&quot;}\r\n\r\nOR\r\n\r\n    { &quot;SEA-739&quot;, &quot;Open&quot;, null }\r\n    { &quot;SEA-738&quot;, &quot;Resolved&quot;, user2@mycompany.com }","link":"https://stackoverflow.com/questions/40396445/get-outputs-from-jq-on-a-single-line","title":"Get outputs from jq on a single line","body":"<p>I got below output using: <a href=\"https://stackoverflow.com/a/40330344\">https://stackoverflow.com/a/40330344</a></p>\n\n<pre><code> (.issues[] | {key, status: .fields.status.name, assignee: .fields.assignee.emailAddress})\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code> {  \n   \"key\": \"SEA-739\",\n   \"status\": \"Open\",\n   \"assignee\": null\n }\n {\n   \"key\": \"SEA-738\",\n   \"status\": \"Resolved\",\n   \"assignee\": \"user2@mycompany.com\"\n }\n</code></pre>\n\n<p>But I need to parse each and every line but it's tough to identify which assignee is for which key as far as key group is concerned. Is this possible to make one bunch in one row using jq?</p>\n\n<p>Expected output:</p>\n\n<pre><code>{ \"key\": \"SEA-739\", \"status\": \"Open\", \"assignee\": null }\n{ \"key\": \"SEA-738\", \"status\": \"Resolved\", \"assignee\": \"user2@mycompany.com\"}\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>{ \"SEA-739\", \"Open\", null }\n{ \"SEA-738\", \"Resolved\", user2@mycompany.com }\n</code></pre>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":2449,"display_name":"Anthony Battaglia","link":"https://stackoverflow.com/users/4946481/anthony-battaglia"},"is_accepted":true,"score":183,"creation_date":1465412529,"answer_id":37710802,"question_id":37710718,"share_link":"https://stackoverflow.com/a/37710802","body_markdown":"Use [parentheses](https://stedolan.github.io/jq/manual/#Parenthesis) around the string concatenation code:\r\n\r\n    echo &#39;{&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}&#39; \\\r\n     | jq &#39;{channel: (.profile_type + &quot;.&quot; + .channel)}&#39;","link":"https://stackoverflow.com/questions/37710718/concat-2-fields-in-json-using-jq/37710802#37710802","title":"Concat 2 fields in JSON using jq","body":"<p>Use <a href=\"https://stedolan.github.io/jq/manual/#Parenthesis\" rel=\"noreferrer\">parentheses</a> around the string concatenation code:</p>\n<pre><code>echo '{&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}' \\\n | jq '{channel: (.profile_type + &quot;.&quot; + .channel)}'\n</code></pre>\n"},{"owner":{"reputation":12949,"display_name":"jq170727","link":"https://stackoverflow.com/users/8379597/jq170727"},"is_accepted":false,"score":83,"creation_date":1501980396,"answer_id":45527623,"question_id":37710718,"share_link":"https://stackoverflow.com/a/45527623","body_markdown":"Here is a solution that uses string interpolation as [Jeff](https://stackoverflow.com/users/390278/jeff-mercado) suggested:\r\n\r\n    {channel: &quot;\\(.profile_type).\\(.member_key)&quot;}\r\n\r\ne.g.\r\n\r\n    $ jq &#39;{channel: &quot;\\(.profile_type).\\(.member_key)&quot;}&#39; &lt;&lt;EOF\r\n    &gt; {&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}\r\n    &gt; EOF\r\n    {\r\n      &quot;channel&quot;: &quot;video.hello&quot;\r\n    }\r\n\r\nString interpolation works with the `\\(foo)` syntax (which is similar to a shell `$(foo)` call).  \r\nSee the official [JQ manual][1].\r\n\r\n\r\n  [1]: https://stedolan.github.io/jq/manual/#Stringinterpolation-%5C(foo)","link":"https://stackoverflow.com/questions/37710718/concat-2-fields-in-json-using-jq/45527623#45527623","title":"Concat 2 fields in JSON using jq","body":"<p>Here is a solution that uses string interpolation as <a href=\"https://stackoverflow.com/users/390278/jeff-mercado\">Jeff</a> suggested:</p>\n\n<pre><code>{channel: \"\\(.profile_type).\\(.member_key)\"}\n</code></pre>\n\n<p>e.g.</p>\n\n<pre><code>$ jq '{channel: \"\\(.profile_type).\\(.member_key)\"}' &lt;&lt;EOF\n&gt; {\"channel\": \"youtube\", \"profile_type\": \"video\", \"member_key\": \"hello\"}\n&gt; EOF\n{\n  \"channel\": \"video.hello\"\n}\n</code></pre>\n\n<p>String interpolation works with the <code>\\(foo)</code> syntax (which is similar to a shell <code>$(foo)</code> call).<br>\nSee the official <a href=\"https://stedolan.github.io/jq/manual/#Stringinterpolation-%5C(foo)\" rel=\"noreferrer\">JQ manual</a>.</p>\n"}],"owner":{"reputation":2811,"accept_rate":100,"display_name":"darthsidious","link":"https://stackoverflow.com/users/2514753/darthsidious"},"is_answered":true,"view_count":124609,"up_vote_count":145,"accepted_answer_id":37710802,"answer_count":2,"score":145,"last_activity_date":1600969436,"creation_date":1465412203,"last_edit_date":1573113613,"question_id":37710718,"body_markdown":"I am using `jq` to reformat my `JSON`.\r\n\r\nJSON String:\r\n\r\n`{&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}`\r\n\r\nWanted output:\r\n\r\n`{&quot;channel&quot; : &quot;profile_type.youtube&quot;}`\r\n\r\nMy command:\r\n\r\n`echo &#39;{&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}&#39; | jq -c &#39;. | {channel: .profile_type + &quot;.&quot; + .member_key}&#39;`\r\n\r\n\r\nI know that the command below concatenates the string. But it is not working in the same logic as above:\r\n\r\n`echo &#39;{&quot;channel&quot;: &quot;youtube&quot;, &quot;profile_type&quot;: &quot;video&quot;, &quot;member_key&quot;: &quot;hello&quot;}&#39; | jq -c &#39;.profile_type + &quot;.&quot; + .member_key&#39;`\r\n\r\nHow can I achieve my result using ONLY jq?","link":"https://stackoverflow.com/questions/37710718/concat-2-fields-in-json-using-jq","title":"Concat 2 fields in JSON using jq","body":"<p>I am using <code>jq</code> to reformat my <code>JSON</code>.</p>\n\n<p>JSON String:</p>\n\n<p><code>{\"channel\": \"youtube\", \"profile_type\": \"video\", \"member_key\": \"hello\"}</code></p>\n\n<p>Wanted output:</p>\n\n<p><code>{\"channel\" : \"profile_type.youtube\"}</code></p>\n\n<p>My command:</p>\n\n<p><code>echo '{\"channel\": \"youtube\", \"profile_type\": \"video\", \"member_key\": \"hello\"}' | jq -c '. | {channel: .profile_type + \".\" + .member_key}'</code></p>\n\n<p>I know that the command below concatenates the string. But it is not working in the same logic as above:</p>\n\n<p><code>echo '{\"channel\": \"youtube\", \"profile_type\": \"video\", \"member_key\": \"hello\"}' | jq -c '.profile_type + \".\" + .member_key'</code></p>\n\n<p>How can I achieve my result using ONLY jq?</p>\n"},{"tags":["json","bash","jq"],"answers":[{"owner":{"reputation":21306,"accept_rate":74,"display_name":"sjsam","link":"https://stackoverflow.com/users/1620779/sjsam"},"is_accepted":true,"score":111,"creation_date":1472111180,"answer_id":39139478,"question_id":39139107,"share_link":"https://stackoverflow.com/a/39139478","body_markdown":"Why not something like:\r\n\r\n    echo &#39;[{\r\n        &quot;name&quot;: &quot;George&quot;,\r\n        &quot;id&quot;: 12,\r\n        &quot;email&quot;: &quot;george@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Jack&quot;,\r\n        &quot;id&quot;: 18,\r\n        &quot;email&quot;: &quot;jack@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Joe&quot;,\r\n        &quot;id&quot;: 19,\r\n        &quot;email&quot;: &quot;joe@domain.example&quot;\r\n    }]&#39; | jq -r &#39;.[] | &quot;\\(.id)\\t\\(.name)&quot;&#39;\r\n\r\nOutput\r\n\r\n    12\tGeorge\r\n    18\tJack\r\n    19\tJoe\r\n\r\n___\r\n\r\n**Edit 1 :** For fine grained formatting use tools like `awk`\r\n\r\n     echo &#39;[{\r\n        &quot;name&quot;: &quot;George&quot;,\r\n        &quot;id&quot;: 12,\r\n        &quot;email&quot;: &quot;george@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Jack&quot;,\r\n        &quot;id&quot;: 18,\r\n        &quot;email&quot;: &quot;jack@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Joe&quot;,\r\n        &quot;id&quot;: 19,\r\n        &quot;email&quot;: &quot;joe@domain.example&quot;\r\n    }]&#39; | jq -r &#39;.[] | [.id, .name] | @csv&#39; | awk -v FS=&quot;,&quot; &#39;BEGIN{print &quot;ID\\tName&quot;;print &quot;============&quot;}{printf &quot;%s\\t%s%s&quot;,$1,$2,ORS}&#39;\r\n    ID\tName\r\n    ============\r\n    12\t&quot;George&quot;\r\n    18\t&quot;Jack&quot;\r\n    19\t&quot;Joe&quot;\r\n\r\n____\r\n\r\n**Edit 2 :** In reply to\r\n\r\n&gt; There&#39;s no way I can get a variable containing an array straight\r\n&gt; from jq?\r\n\r\nWhy not?\r\n\r\nA bit involved example( in fact modified from yours ) where email is changed to an array demonstrates this\r\n\r\n    echo &#39;[{\r\n        &quot;name&quot;: &quot;George&quot;,\r\n        &quot;id&quot;: 20,\r\n        &quot;email&quot;: [ &quot;george@domain1.example&quot; , &quot;george@domain2.example&quot; ]\r\n    }, {\r\n        &quot;name&quot;: &quot;Jack&quot;,\r\n        &quot;id&quot;: 18,\r\n        &quot;email&quot;: [ &quot;jack@domain3.example&quot; , &quot;jack@domain5.example&quot; ]\r\n    }, {\r\n        &quot;name&quot;: &quot;Joe&quot;,\r\n        &quot;id&quot;: 19,\r\n        &quot;email&quot;: [ &quot;joe@domain.example&quot; ]\r\n    }]&#39; | jq -r &#39;.[] | .email&#39;\r\n\r\n**Output**\r\n\r\n    [\r\n      &quot;george@domain1.example&quot;,\r\n      &quot;george@domain2.example&quot;\r\n    ]\r\n    [\r\n      &quot;jack@domain3.example&quot;,\r\n      &quot;jack@domain5.example&quot;\r\n    ]\r\n    [\r\n      &quot;joe@domain.example&quot;\r\n    ]\r\n\r\n","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/39139478#39139478","title":"How to format a JSON string as a table using jq?","body":"<p>Why not something like:</p>\n<pre><code>echo '[{\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: 12,\n    &quot;email&quot;: &quot;george@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: &quot;jack@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: &quot;joe@domain.example&quot;\n}]' | jq -r '.[] | &quot;\\(.id)\\t\\(.name)&quot;'\n</code></pre>\n<p>Output</p>\n<pre><code>12  George\n18  Jack\n19  Joe\n</code></pre>\n<hr />\n<p><strong>Edit 1 :</strong> For fine grained formatting use tools like <code>awk</code></p>\n<pre><code> echo '[{\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: 12,\n    &quot;email&quot;: &quot;george@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: &quot;jack@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: &quot;joe@domain.example&quot;\n}]' | jq -r '.[] | [.id, .name] | @csv' | awk -v FS=&quot;,&quot; 'BEGIN{print &quot;ID\\tName&quot;;print &quot;============&quot;}{printf &quot;%s\\t%s%s&quot;,$1,$2,ORS}'\nID  Name\n============\n12  &quot;George&quot;\n18  &quot;Jack&quot;\n19  &quot;Joe&quot;\n</code></pre>\n<hr />\n<p><strong>Edit 2 :</strong> In reply to</p>\n<blockquote>\n<p>There's no way I can get a variable containing an array straight\nfrom jq?</p>\n</blockquote>\n<p>Why not?</p>\n<p>A bit involved example( in fact modified from yours ) where email is changed to an array demonstrates this</p>\n<pre><code>echo '[{\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: 20,\n    &quot;email&quot;: [ &quot;george@domain1.example&quot; , &quot;george@domain2.example&quot; ]\n}, {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: [ &quot;jack@domain3.example&quot; , &quot;jack@domain5.example&quot; ]\n}, {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: [ &quot;joe@domain.example&quot; ]\n}]' | jq -r '.[] | .email'\n</code></pre>\n<p><strong>Output</strong></p>\n<pre><code>[\n  &quot;george@domain1.example&quot;,\n  &quot;george@domain2.example&quot;\n]\n[\n  &quot;jack@domain3.example&quot;,\n  &quot;jack@domain5.example&quot;\n]\n[\n  &quot;joe@domain.example&quot;\n]\n</code></pre>\n"},{"owner":{"reputation":19869,"accept_rate":82,"display_name":"Micha Wiedenmann","link":"https://stackoverflow.com/users/1671066/micha-wiedenmann"},"is_accepted":false,"score":0,"creation_date":1472111277,"answer_id":39139507,"question_id":39139107,"share_link":"https://stackoverflow.com/a/39139507","body_markdown":"If the values don&#39;t contain spaces, this might be helpful:\r\n\r\n    read -r -a data &lt;&lt;&lt;&#39;name1 value1 name2 value2&#39;\r\n    \r\n    echo &quot;name value&quot;\r\n    echo &quot;==========&quot;\r\n    \r\n    for ((i=0; i&lt;${#data[@]}; i+=2)); do\r\n      echo ${data[$i]} ${data[$((i+1))]}\r\n    done\r\n\r\n**Output**\r\n\r\n    name value\r\n    ==========\r\n    name1 value1\r\n    name2 value2","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/39139507#39139507","title":"How to format a JSON string as a table using jq?","body":"<p>If the values don't contain spaces, this might be helpful:</p>\n\n<pre><code>read -r -a data &lt;&lt;&lt;'name1 value1 name2 value2'\n\necho \"name value\"\necho \"==========\"\n\nfor ((i=0; i&lt;${#data[@]}; i+=2)); do\n  echo ${data[$i]} ${data[$((i+1))]}\ndone\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre><code>name value\n==========\nname1 value1\nname2 value2\n</code></pre>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":169,"creation_date":1472125389,"answer_id":39144364,"question_id":39139107,"share_link":"https://stackoverflow.com/a/39144364","body_markdown":"Using the `@tsv` filter has much to recommend it, mainly because it handles numerous &quot;edge cases&quot; in a standard way:\r\n\r\n    .[] | [.id, .name] | @tsv\r\n\r\nAdding the headers can be done like so:\r\n\r\n    jq -r &#39;[&quot;ID&quot;,&quot;NAME&quot;], [&quot;--&quot;,&quot;------&quot;], (.[] | [.id, .name]) | @tsv&#39;\r\n\r\nThe result:\r\n\r\n    ID\tNAME\r\n    --\t------\r\n    12\tGeorge\r\n    18\tJack\r\n    19\tJoe\r\n\r\nAs pointed out by @Tobia, you might want to format the table for viewing by using `column` to post-process the result produced by jq. If you are using a bash-like shell then `column -ts $&#39;\\t&#39;` should be quite portable.\r\n\r\n## `length*&quot;-&quot;`\r\n\r\nTo automate the production of the line of dashes:\r\n\r\n    jq -r &#39;([&quot;ID&quot;,&quot;NAME&quot;] | (., map(length*&quot;-&quot;))), (.[] | [.id, .name]) | @tsv&#39;\r\n\r\n","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/39144364#39144364","title":"How to format a JSON string as a table using jq?","body":"<p>Using the <code>@tsv</code> filter has much to recommend it, mainly because it handles numerous &quot;edge cases&quot; in a standard way:</p>\n<pre><code>.[] | [.id, .name] | @tsv\n</code></pre>\n<p>Adding the headers can be done like so:</p>\n<pre><code>jq -r '[&quot;ID&quot;,&quot;NAME&quot;], [&quot;--&quot;,&quot;------&quot;], (.[] | [.id, .name]) | @tsv'\n</code></pre>\n<p>The result:</p>\n<pre><code>ID  NAME\n--  ------\n12  George\n18  Jack\n19  Joe\n</code></pre>\n<p>As pointed out by @Tobia, you might want to format the table for viewing by using <code>column</code> to post-process the result produced by jq. If you are using a bash-like shell then <code>column -ts $'\\t'</code> should be quite portable.</p>\n<h2><code>length*&quot;-&quot;</code></h2>\n<p>To automate the production of the line of dashes:</p>\n<pre><code>jq -r '([&quot;ID&quot;,&quot;NAME&quot;] | (., map(length*&quot;-&quot;))), (.[] | [.id, .name]) | @tsv'\n</code></pre>\n"},{"owner":{"reputation":7514,"accept_rate":61,"display_name":"Ярослав Рахматуллин","link":"https://stackoverflow.com/users/657703/%d0%af%d1%80%d0%be%d1%81%d0%bb%d0%b0%d0%b2-%d0%a0%d0%b0%d1%85%d0%bc%d0%b0%d1%82%d1%83%d0%bb%d0%bb%d0%b8%d0%bd"},"is_accepted":false,"score":43,"creation_date":1551026639,"answer_id":54854136,"question_id":39139107,"share_link":"https://stackoverflow.com/a/54854136","body_markdown":"Defining headers by hand is suboptimal! Omitting headers is also suboptimal.\r\n\r\nTL;DR\r\n\r\n### data\r\n\r\n    [{ &quot;name&quot;: &quot;George&quot;, &quot;id&quot;: 12, &quot;email&quot;: &quot;george@domain.example&quot; },\r\n    { &quot;name&quot;: &quot;Jack&quot;, &quot;id&quot;: 18, &quot;email&quot;: &quot;jack@domain.example&quot; },\r\n    { &quot;name&quot;: &quot;Joe&quot;, &quot;id&quot;: 19, &quot;email&quot;: &quot;joe@domain.example&quot; }]\r\n\r\n### script\r\n\r\n      [.[]| with_entries( .key |= ascii_downcase ) ]\r\n          |    (.[0] |keys_unsorted | @tsv)\r\n             , (.[]  |map(.) |@tsv)\r\n\r\n### how to run\r\n\r\n    $ &lt; data jq -rf script  | column -t\r\n    name    id  email\r\n    George  12  george@domain.example\r\n    Jack    18  jack@domain.example\r\n    Joe     19  joe@domain.example\r\n\r\nI found this question while summarizng some data from amazon web services. The problem I was working on, in case you want another example:\r\n\r\n    $ aws ec2 describe-spot-instance-requests | tee /tmp/ins |\r\n    \tjq  --raw-output &#39;\r\n    \t                                 # extract instances as a flat list.\r\n    \t[.SpotInstanceRequests | .[]\r\n                                         # remove unwanted data\r\n    \t| {\r\n    \t\tState,\r\n    \t\tstatusCode: .Status.Code,\r\n    \t\ttype: .LaunchSpecification.InstanceType,\r\n    \t\tblockPrice: .ActualBlockHourlyPrice,\r\n    \t\tcreated: .CreateTime,\r\n    \t\tSpotInstanceRequestId}\r\n    \t]\r\n                                            # lowercase keys\r\n                                            # (for predictable sorting, optional)\r\n    \t|  [.[]| with_entries( .key |= ascii_downcase ) ]\r\n            |    (.[0] |keys_unsorted | @tsv)               # print headers\r\n               , (.[]|.|map(.) |@tsv)                       # print table\r\n    \t&#39; | column -t\r\n\r\nOutput:\r\n\r\n    state      statuscode                   type     blockprice  created                   spotinstancerequestid\r\n    closed     instance-terminated-by-user  t3.nano  0.002000    2019-02-24T15:21:36.000Z  sir-r5bh7skq\r\n    cancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:51:47.000Z  sir-1k9s5h3m\r\n    closed     instance-terminated-by-user  t3.nano  0.002000    2019-02-24T14:55:26.000Z  sir-43x16b6n\r\n    cancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:29:23.000Z  sir-2jsh5brn\r\n    active     fulfilled                    t3.nano  0.002000    2019-02-24T15:37:26.000Z  sir-z1e9591m\r\n    cancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:33:42.000Z  sir-n7c15y5p\r\n\r\nInput:\r\n\r\n    $ cat /tmp/ins\r\n    {\r\n        &quot;SpotInstanceRequests&quot;: [\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;2019-02-24T15:29:38+0000 : 2019-02-24T15:29:38+0000 : Spot Instance terminated due to user-initiated termination.&quot;,\r\n                    &quot;Code&quot;: &quot;instance-terminated-by-user&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T15:31:03.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T15:21:36.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;InstanceId&quot;: &quot;i-0414083bef5e91d94&quot;,\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-r5bh7skq&quot;,\r\n                &quot;State&quot;: &quot;closed&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;public&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T15:21:36.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.008000&quot;\r\n            },\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\r\n                    &quot;Code&quot;: &quot;bad-parameters&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T14:51:48.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T14:51:47.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;Fault&quot;: {\r\n                    &quot;Message&quot;: &quot;Invalid device name /dev/sda&quot;,\r\n                    &quot;Code&quot;: &quot;InvalidBlockDeviceMapping&quot;\r\n                },\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-1k9s5h3m&quot;,\r\n                &quot;State&quot;: &quot;cancelled&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;public&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T14:51:47.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.011600&quot;\r\n            },\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;2019-02-24T15:02:17+0000 : 2019-02-24T15:02:17+0000 : Spot Instance terminated due to user-initiated termination.&quot;,\r\n                    &quot;Code&quot;: &quot;instance-terminated-by-user&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T15:03:34.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T14:55:26.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;InstanceId&quot;: &quot;i-010442ac3cc85ec08&quot;,\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-43x16b6n&quot;,\r\n                &quot;State&quot;: &quot;closed&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;public&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T14:55:26.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.011600&quot;\r\n            },\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\r\n                    &quot;Code&quot;: &quot;bad-parameters&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T14:29:24.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T14:29:23.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;Fault&quot;: {\r\n                    &quot;Message&quot;: &quot;Addressing type must be &#39;public&#39;&quot;,\r\n                    &quot;Code&quot;: &quot;InvalidParameterCombination&quot;\r\n                },\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-2jsh5brn&quot;,\r\n                &quot;State&quot;: &quot;cancelled&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T14:29:23.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.011600&quot;\r\n            },\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;Your spot request is fulfilled.&quot;,\r\n                    &quot;Code&quot;: &quot;fulfilled&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T15:37:28.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T15:37:26.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;InstanceId&quot;: &quot;i-0a29e9de6d59d433f&quot;,\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-z1e9591m&quot;,\r\n                &quot;State&quot;: &quot;active&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;public&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T15:37:26.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.008000&quot;\r\n            },\r\n            {\r\n                &quot;Status&quot;: {\r\n                    &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\r\n                    &quot;Code&quot;: &quot;bad-parameters&quot;,\r\n                    &quot;UpdateTime&quot;: &quot;2019-02-24T14:33:43.000Z&quot;\r\n                },\r\n                &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\r\n                &quot;ValidUntil&quot;: &quot;2019-03-03T14:33:42.000Z&quot;,\r\n                &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\r\n                &quot;Tags&quot;: [],\r\n                &quot;Fault&quot;: {\r\n                    &quot;Message&quot;: &quot;Invalid device name /dev/sda&quot;,\r\n                    &quot;Code&quot;: &quot;InvalidBlockDeviceMapping&quot;\r\n                },\r\n                &quot;BlockDurationMinutes&quot;: 60,\r\n                &quot;SpotInstanceRequestId&quot;: &quot;sir-n7c15y5p&quot;,\r\n                &quot;State&quot;: &quot;cancelled&quot;,\r\n                &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\r\n                &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\r\n                &quot;LaunchSpecification&quot;: {\r\n                    &quot;Placement&quot;: {\r\n                        &quot;Tenancy&quot;: &quot;default&quot;,\r\n                        &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\r\n                    },\r\n                    &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\r\n                    &quot;BlockDeviceMappings&quot;: [\r\n                        {\r\n                            &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\r\n                            &quot;VirtualName&quot;: &quot;root&quot;,\r\n                            &quot;NoDevice&quot;: &quot;&quot;,\r\n                            &quot;Ebs&quot;: {\r\n                                &quot;Encrypted&quot;: false,\r\n                                &quot;DeleteOnTermination&quot;: true,\r\n                                &quot;VolumeType&quot;: &quot;gp2&quot;,\r\n                                &quot;VolumeSize&quot;: 8\r\n                            }\r\n                        }\r\n                    ],\r\n                    &quot;EbsOptimized&quot;: false,\r\n                    &quot;SecurityGroups&quot;: [\r\n                        {\r\n                            &quot;GroupName&quot;: &quot;default&quot;\r\n                        }\r\n                    ],\r\n                    &quot;Monitoring&quot;: {\r\n                        &quot;Enabled&quot;: false\r\n                    },\r\n                    &quot;InstanceType&quot;: &quot;t3.nano&quot;,\r\n                    &quot;AddressingType&quot;: &quot;public&quot;,\r\n                    &quot;NetworkInterfaces&quot;: [\r\n                        {\r\n                            &quot;DeviceIndex&quot;: 0,\r\n                            &quot;Description&quot;: &quot;eth-zero&quot;,\r\n                            &quot;NetworkInterfaceId&quot;: &quot;&quot;,\r\n                            &quot;DeleteOnTermination&quot;: true,\r\n                            &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\r\n                            &quot;AssociatePublicIpAddress&quot;: true\r\n                        }\r\n                    ]\r\n                },\r\n                &quot;Type&quot;: &quot;one-time&quot;,\r\n                &quot;CreateTime&quot;: &quot;2019-02-24T14:33:42.000Z&quot;,\r\n                &quot;SpotPrice&quot;: &quot;0.011600&quot;\r\n            }\r\n        ]\r\n    }\r\n\r\n","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/54854136#54854136","title":"How to format a JSON string as a table using jq?","body":"<p>Defining headers by hand is suboptimal! Omitting headers is also suboptimal.</p>\n<p>TL;DR</p>\n<h3>data</h3>\n<pre><code>[{ &quot;name&quot;: &quot;George&quot;, &quot;id&quot;: 12, &quot;email&quot;: &quot;george@domain.example&quot; },\n{ &quot;name&quot;: &quot;Jack&quot;, &quot;id&quot;: 18, &quot;email&quot;: &quot;jack@domain.example&quot; },\n{ &quot;name&quot;: &quot;Joe&quot;, &quot;id&quot;: 19, &quot;email&quot;: &quot;joe@domain.example&quot; }]\n</code></pre>\n<h3>script</h3>\n<pre><code>  [.[]| with_entries( .key |= ascii_downcase ) ]\n      |    (.[0] |keys_unsorted | @tsv)\n         , (.[]  |map(.) |@tsv)\n</code></pre>\n<h3>how to run</h3>\n<pre><code>$ &lt; data jq -rf script  | column -t\nname    id  email\nGeorge  12  george@domain.example\nJack    18  jack@domain.example\nJoe     19  joe@domain.example\n</code></pre>\n<p>I found this question while summarizng some data from amazon web services. The problem I was working on, in case you want another example:</p>\n<pre><code>$ aws ec2 describe-spot-instance-requests | tee /tmp/ins |\n    jq  --raw-output '\n                                     # extract instances as a flat list.\n    [.SpotInstanceRequests | .[]\n                                     # remove unwanted data\n    | {\n        State,\n        statusCode: .Status.Code,\n        type: .LaunchSpecification.InstanceType,\n        blockPrice: .ActualBlockHourlyPrice,\n        created: .CreateTime,\n        SpotInstanceRequestId}\n    ]\n                                        # lowercase keys\n                                        # (for predictable sorting, optional)\n    |  [.[]| with_entries( .key |= ascii_downcase ) ]\n        |    (.[0] |keys_unsorted | @tsv)               # print headers\n           , (.[]|.|map(.) |@tsv)                       # print table\n    ' | column -t\n</code></pre>\n<p>Output:</p>\n<pre><code>state      statuscode                   type     blockprice  created                   spotinstancerequestid\nclosed     instance-terminated-by-user  t3.nano  0.002000    2019-02-24T15:21:36.000Z  sir-r5bh7skq\ncancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:51:47.000Z  sir-1k9s5h3m\nclosed     instance-terminated-by-user  t3.nano  0.002000    2019-02-24T14:55:26.000Z  sir-43x16b6n\ncancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:29:23.000Z  sir-2jsh5brn\nactive     fulfilled                    t3.nano  0.002000    2019-02-24T15:37:26.000Z  sir-z1e9591m\ncancelled  bad-parameters               t3.nano  0.002000    2019-02-24T14:33:42.000Z  sir-n7c15y5p\n</code></pre>\n<p>Input:</p>\n<pre><code>$ cat /tmp/ins\n{\n    &quot;SpotInstanceRequests&quot;: [\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;2019-02-24T15:29:38+0000 : 2019-02-24T15:29:38+0000 : Spot Instance terminated due to user-initiated termination.&quot;,\n                &quot;Code&quot;: &quot;instance-terminated-by-user&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T15:31:03.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T15:21:36.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;InstanceId&quot;: &quot;i-0414083bef5e91d94&quot;,\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-r5bh7skq&quot;,\n            &quot;State&quot;: &quot;closed&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;public&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T15:21:36.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.008000&quot;\n        },\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\n                &quot;Code&quot;: &quot;bad-parameters&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T14:51:48.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T14:51:47.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;Fault&quot;: {\n                &quot;Message&quot;: &quot;Invalid device name /dev/sda&quot;,\n                &quot;Code&quot;: &quot;InvalidBlockDeviceMapping&quot;\n            },\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-1k9s5h3m&quot;,\n            &quot;State&quot;: &quot;cancelled&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;public&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T14:51:47.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.011600&quot;\n        },\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;2019-02-24T15:02:17+0000 : 2019-02-24T15:02:17+0000 : Spot Instance terminated due to user-initiated termination.&quot;,\n                &quot;Code&quot;: &quot;instance-terminated-by-user&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T15:03:34.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T14:55:26.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;InstanceId&quot;: &quot;i-010442ac3cc85ec08&quot;,\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-43x16b6n&quot;,\n            &quot;State&quot;: &quot;closed&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;public&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T14:55:26.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.011600&quot;\n        },\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\n                &quot;Code&quot;: &quot;bad-parameters&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T14:29:24.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T14:29:23.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;Fault&quot;: {\n                &quot;Message&quot;: &quot;Addressing type must be 'public'&quot;,\n                &quot;Code&quot;: &quot;InvalidParameterCombination&quot;\n            },\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-2jsh5brn&quot;,\n            &quot;State&quot;: &quot;cancelled&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T14:29:23.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.011600&quot;\n        },\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;Your spot request is fulfilled.&quot;,\n                &quot;Code&quot;: &quot;fulfilled&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T15:37:28.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T15:37:26.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;InstanceId&quot;: &quot;i-0a29e9de6d59d433f&quot;,\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-z1e9591m&quot;,\n            &quot;State&quot;: &quot;active&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda1&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;public&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T15:37:26.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.008000&quot;\n        },\n        {\n            &quot;Status&quot;: {\n                &quot;Message&quot;: &quot;Your Spot request failed due to bad parameters.&quot;,\n                &quot;Code&quot;: &quot;bad-parameters&quot;,\n                &quot;UpdateTime&quot;: &quot;2019-02-24T14:33:43.000Z&quot;\n            },\n            &quot;ActualBlockHourlyPrice&quot;: &quot;0.002000&quot;,\n            &quot;ValidUntil&quot;: &quot;2019-03-03T14:33:42.000Z&quot;,\n            &quot;InstanceInterruptionBehavior&quot;: &quot;terminate&quot;,\n            &quot;Tags&quot;: [],\n            &quot;Fault&quot;: {\n                &quot;Message&quot;: &quot;Invalid device name /dev/sda&quot;,\n                &quot;Code&quot;: &quot;InvalidBlockDeviceMapping&quot;\n            },\n            &quot;BlockDurationMinutes&quot;: 60,\n            &quot;SpotInstanceRequestId&quot;: &quot;sir-n7c15y5p&quot;,\n            &quot;State&quot;: &quot;cancelled&quot;,\n            &quot;ProductDescription&quot;: &quot;Linux/UNIX&quot;,\n            &quot;LaunchedAvailabilityZone&quot;: &quot;eu-north-1a&quot;,\n            &quot;LaunchSpecification&quot;: {\n                &quot;Placement&quot;: {\n                    &quot;Tenancy&quot;: &quot;default&quot;,\n                    &quot;AvailabilityZone&quot;: &quot;eu-north-1a&quot;\n                },\n                &quot;ImageId&quot;: &quot;ami-6d27a913&quot;,\n                &quot;BlockDeviceMappings&quot;: [\n                    {\n                        &quot;DeviceName&quot;: &quot;/dev/sda&quot;,\n                        &quot;VirtualName&quot;: &quot;root&quot;,\n                        &quot;NoDevice&quot;: &quot;&quot;,\n                        &quot;Ebs&quot;: {\n                            &quot;Encrypted&quot;: false,\n                            &quot;DeleteOnTermination&quot;: true,\n                            &quot;VolumeType&quot;: &quot;gp2&quot;,\n                            &quot;VolumeSize&quot;: 8\n                        }\n                    }\n                ],\n                &quot;EbsOptimized&quot;: false,\n                &quot;SecurityGroups&quot;: [\n                    {\n                        &quot;GroupName&quot;: &quot;default&quot;\n                    }\n                ],\n                &quot;Monitoring&quot;: {\n                    &quot;Enabled&quot;: false\n                },\n                &quot;InstanceType&quot;: &quot;t3.nano&quot;,\n                &quot;AddressingType&quot;: &quot;public&quot;,\n                &quot;NetworkInterfaces&quot;: [\n                    {\n                        &quot;DeviceIndex&quot;: 0,\n                        &quot;Description&quot;: &quot;eth-zero&quot;,\n                        &quot;NetworkInterfaceId&quot;: &quot;&quot;,\n                        &quot;DeleteOnTermination&quot;: true,\n                        &quot;SubnetId&quot;: &quot;subnet-420ffc2b&quot;,\n                        &quot;AssociatePublicIpAddress&quot;: true\n                    }\n                ]\n            },\n            &quot;Type&quot;: &quot;one-time&quot;,\n            &quot;CreateTime&quot;: &quot;2019-02-24T14:33:42.000Z&quot;,\n            &quot;SpotPrice&quot;: &quot;0.011600&quot;\n        }\n    ]\n}\n</code></pre>\n"},{"owner":{"reputation":14336,"accept_rate":100,"display_name":"Alex Harvey","link":"https://stackoverflow.com/users/3787051/alex-harvey"},"is_accepted":false,"score":19,"creation_date":1608099878,"answer_id":65318277,"question_id":39139107,"share_link":"https://stackoverflow.com/a/65318277","body_markdown":"The problem with the answers above is they only work if the fields are all about the same width.\r\n\r\nTo avoid this issue, the Linux `column` command could be used:\r\n\r\n```json\r\n// input.json\r\n[\r\n  {\r\n    &quot;name&quot;: &quot;George&quot;,\r\n    &quot;id&quot;: &quot;a very very long field&quot;,\r\n    &quot;email&quot;: &quot;george@domain.example&quot;\r\n  },\r\n  {\r\n    &quot;name&quot;: &quot;Jack&quot;,\r\n    &quot;id&quot;: 18,\r\n    &quot;email&quot;: &quot;jack@domain.example&quot;\r\n  },\r\n  {\r\n    &quot;name&quot;: &quot;Joe&quot;,\r\n    &quot;id&quot;: 19,\r\n    &quot;email&quot;: &quot;joe@domain.example&quot;\r\n  }\r\n]\r\n```\r\n\r\nThen:\r\n\r\n```text\r\n▶ jq -r &#39;.[] | [.id, .name] | @tsv&#39; input.json | column -ts $&#39;\\t&#39;\r\na very very long field  George\r\n18                      Jack\r\n19                      Joe\r\n```","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/65318277#65318277","title":"How to format a JSON string as a table using jq?","body":"<p>The problem with the answers above is they only work if the fields are all about the same width.</p>\n<p>To avoid this issue, the Linux <code>column</code> command could be used:</p>\n<pre class=\"lang-json prettyprint-override\"><code>// input.json\n[\n  {\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: &quot;a very very long field&quot;,\n    &quot;email&quot;: &quot;george@domain.example&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: &quot;jack@domain.example&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: &quot;joe@domain.example&quot;\n  }\n]\n</code></pre>\n<p>Then:</p>\n<pre><code>▶ jq -r '.[] | [.id, .name] | @tsv' input.json | column -ts $'\\t'\na very very long field  George\n18                      Jack\n19                      Joe\n</code></pre>\n"},{"owner":{"reputation":653,"display_name":"Bertrand Cedric","link":"https://stackoverflow.com/users/5110508/bertrand-cedric"},"is_accepted":false,"score":7,"creation_date":1616748945,"answer_id":66813728,"question_id":39139107,"share_link":"https://stackoverflow.com/a/66813728","body_markdown":"I made a mix with all responses to get all this behaviours\r\n- create header table\r\n- handle long fields\r\n- create a function to reuse\r\n\r\n**function bash** \r\n\r\n    function jsonArrayToTable(){\r\n         jq -r &#39;(.[0] | ([keys[] | .] |(., map(length*&quot;-&quot;)))), (.[] | ([keys[] as $k | .[$k]])) | @tsv&#39; | column -t -s $&#39;\\t&#39;   \r\n    }\r\n\r\n**Sample use**\r\n\r\n    echo &#39;[{&quot;key1&quot;:&quot;V1.1&quot;, &quot;key2&quot;:&quot;V2.1&quot;}, {&quot;keyA&quot;:&quot;V1.2&quot;, &quot;key2&quot;:&quot;V2.2&quot;}]&#39; | jsonArrayToTable\r\n\r\n**output**\r\n\r\n    key1  key2\r\n    ----  ----\r\n    V1.1  V2.1\r\n    V2.2  V1.2\r\n   ","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/66813728#66813728","title":"How to format a JSON string as a table using jq?","body":"<p>I made a mix with all responses to get all this behaviours</p>\n<ul>\n<li>create header table</li>\n<li>handle long fields</li>\n<li>create a function to reuse</li>\n</ul>\n<p><strong>function bash</strong></p>\n<pre><code>function jsonArrayToTable(){\n     jq -r '(.[0] | ([keys[] | .] |(., map(length*&quot;-&quot;)))), (.[] | ([keys[] as $k | .[$k]])) | @tsv' | column -t -s $'\\t'   \n}\n</code></pre>\n<p><strong>Sample use</strong></p>\n<pre><code>echo '[{&quot;key1&quot;:&quot;V1.1&quot;, &quot;key2&quot;:&quot;V2.1&quot;}, {&quot;keyA&quot;:&quot;V1.2&quot;, &quot;key2&quot;:&quot;V2.2&quot;}]' | jsonArrayToTable\n</code></pre>\n<p><strong>output</strong></p>\n<pre><code>key1  key2\n----  ----\nV1.1  V2.1\nV2.2  V1.2\n</code></pre>\n"},{"owner":{"reputation":10757,"accept_rate":90,"display_name":"sealocal","link":"https://stackoverflow.com/users/3238292/sealocal"},"is_accepted":false,"score":1,"creation_date":1626557472,"answer_id":68424420,"question_id":39139107,"share_link":"https://stackoverflow.com/a/68424420","body_markdown":"If you want to generate an *HTML* table instead of a table for terminal output:\r\n\r\n```shell\r\necho &#39;[{\r\n    &quot;name&quot;: &quot;George&quot;,\r\n    &quot;id&quot;: 12,\r\n    &quot;email&quot;: &quot;george@domain.example&quot;\r\n}, {\r\n    &quot;name&quot;: &quot;Jack&quot;,\r\n    &quot;id&quot;: 18,\r\n    &quot;email&quot;: &quot;jack@domain.example&quot;\r\n}, {\r\n    &quot;name&quot;: &quot;Joe&quot;,\r\n    &quot;id&quot;: 19,\r\n    &quot;email&quot;: &quot;joe@domain.example&quot;\r\n}]&#39; | jq -r &#39;map(&quot;&lt;tr&gt;&lt;td&gt;&quot; + .name + &quot;&lt;/td&gt;&lt;td&gt;&quot; + (.id | tostring) + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;) | [&quot;&lt;table&gt;&quot;] + . + [&quot;&lt;/table&gt;&quot;] | .[]&#39;\r\n```\r\n\r\nOutput:\r\n\r\n```html\r\n&lt;table&gt;\r\n&lt;tr&gt;&lt;td&gt;George&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;/tr&gt;\r\n&lt;tr&gt;&lt;td&gt;Jack&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;/tr&gt;\r\n&lt;tr&gt;&lt;td&gt;Joe&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;/tr&gt;\r\n&lt;/table&gt;\r\n```","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/68424420#68424420","title":"How to format a JSON string as a table using jq?","body":"<p>If you want to generate an <em>HTML</em> table instead of a table for terminal output:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>echo '[{\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: 12,\n    &quot;email&quot;: &quot;george@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: &quot;jack@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: &quot;joe@domain.example&quot;\n}]' | jq -r 'map(&quot;&lt;tr&gt;&lt;td&gt;&quot; + .name + &quot;&lt;/td&gt;&lt;td&gt;&quot; + (.id | tostring) + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;) | [&quot;&lt;table&gt;&quot;] + . + [&quot;&lt;/table&gt;&quot;] | .[]'\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table&gt;\n&lt;tr&gt;&lt;td&gt;George&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Jack&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Joe&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n"},{"owner":{"reputation":149,"display_name":"Mr Z","link":"https://stackoverflow.com/users/14504212/mr-z"},"is_accepted":false,"score":0,"creation_date":1635426831,"answer_id":69754759,"question_id":39139107,"share_link":"https://stackoverflow.com/a/69754759","body_markdown":"More simple implement:\r\n```\r\njq -r &#39;(.[0]|keys_unsorted|(.,map(length*&quot;-&quot;))),.[]|map(.)|@tsv&#39;|column -ts $&#39;\\t&#39;\r\n```\r\nyou can add the following jq function into `~/.jq`:\r\n```\r\ndef pretty_table:\r\n (.[0]|keys_unsorted|(.,map(length*&quot;-&quot;))),.[]|map(.)|@tsv\r\n ;\r\n```\r\nand then run:\r\n```\r\ncat apps.json | jq -r pretty_table | column -ts $&#39;\\t&#39;\r\n```","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq/69754759#69754759","title":"How to format a JSON string as a table using jq?","body":"<p>More simple implement:</p>\n<pre><code>jq -r '(.[0]|keys_unsorted|(.,map(length*&quot;-&quot;))),.[]|map(.)|@tsv'|column -ts $'\\t'\n</code></pre>\n<p>you can add the following jq function into <code>~/.jq</code>:</p>\n<pre><code>def pretty_table:\n (.[0]|keys_unsorted|(.,map(length*&quot;-&quot;))),.[]|map(.)|@tsv\n ;\n</code></pre>\n<p>and then run:</p>\n<pre><code>cat apps.json | jq -r pretty_table | column -ts $'\\t'\n</code></pre>\n"}],"owner":{"reputation":3181,"display_name":"Rein","link":"https://stackoverflow.com/users/2381287/rein"},"is_answered":true,"view_count":132646,"up_vote_count":144,"accepted_answer_id":39139478,"answer_count":8,"score":144,"last_activity_date":1668635994,"creation_date":1472109899,"last_edit_date":1655842000,"question_id":39139107,"body_markdown":"Just started out with Bash scripting and stumbled upon jq to work with JSON.\r\n\r\nI need to transform a JSON string like below to a table for output in the terminal.\r\n\r\n    [{\r\n        &quot;name&quot;: &quot;George&quot;,\r\n        &quot;id&quot;: 12,\r\n        &quot;email&quot;: &quot;george@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Jack&quot;,\r\n        &quot;id&quot;: 18,\r\n        &quot;email&quot;: &quot;jack@domain.example&quot;\r\n    }, {\r\n        &quot;name&quot;: &quot;Joe&quot;,\r\n        &quot;id&quot;: 19,\r\n        &quot;email&quot;: &quot;joe@domain.example&quot;\r\n    }]\r\n\r\nWhat I want to display in the terminal:\r\n\r\n    ID        Name\r\n    =================\r\n    12        George\r\n    18        Jack\r\n    19        Joe\r\n\r\nNotice how I don&#39;t want to display the email property for each row, so the jq command should involve some filtering. The following gives me a plain list of names and id&#39;s:\r\n\r\n    list=$(echo &quot;$data&quot; | jq -r &#39;.[] | .name, .id&#39;)\r\n    printf &quot;$list&quot;\r\n\r\nThe problem with that is, I cannot display it like a table. I know jq has some formatting options, but not nearly as good as the options I have when using `printf`. I think I want to get these values in an array which I can then loop through myself to do the formatting...? The things I tried give me varying results, but never what I really want.\r\n\r\nCan someone point me in the right direction?","link":"https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq","title":"How to format a JSON string as a table using jq?","body":"<p>Just started out with Bash scripting and stumbled upon jq to work with JSON.</p>\n<p>I need to transform a JSON string like below to a table for output in the terminal.</p>\n<pre><code>[{\n    &quot;name&quot;: &quot;George&quot;,\n    &quot;id&quot;: 12,\n    &quot;email&quot;: &quot;george@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Jack&quot;,\n    &quot;id&quot;: 18,\n    &quot;email&quot;: &quot;jack@domain.example&quot;\n}, {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;id&quot;: 19,\n    &quot;email&quot;: &quot;joe@domain.example&quot;\n}]\n</code></pre>\n<p>What I want to display in the terminal:</p>\n<pre><code>ID        Name\n=================\n12        George\n18        Jack\n19        Joe\n</code></pre>\n<p>Notice how I don't want to display the email property for each row, so the jq command should involve some filtering. The following gives me a plain list of names and id's:</p>\n<pre><code>list=$(echo &quot;$data&quot; | jq -r '.[] | .name, .id')\nprintf &quot;$list&quot;\n</code></pre>\n<p>The problem with that is, I cannot display it like a table. I know jq has some formatting options, but not nearly as good as the options I have when using <code>printf</code>. I think I want to get these values in an array which I can then loop through myself to do the formatting...? The things I tried give me varying results, but never what I really want.</p>\n<p>Can someone point me in the right direction?</p>\n"},{"tags":["json","bash","shell","jq"],"answers":[{"owner":{"reputation":8949,"display_name":"zeppelin","link":"https://stackoverflow.com/users/2788297/zeppelin"},"is_accepted":true,"score":112,"creation_date":1489144560,"answer_id":42717073,"question_id":42716734,"share_link":"https://stackoverflow.com/a/42717073","body_markdown":"AFAIK `jq` does not support in-place editing, so you must redirect to a temporary file first and then replace your original file with it, or use `sponge` utility from the moreutils package, like that:\r\n\r\n    jq &#39;.address = &quot;abcde&quot;&#39; test.json|sponge test.json\r\n\r\nThere are other techniques to &quot;redirect to the same file&quot;, like saving your output in a variable e.t.c. &quot;Unix &amp; Linux StackExchange&quot; is a good place to start, if you want to learn more about this.","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/42717073#42717073","title":"Modify a key-value in a json using jq in-place","body":"<p>AFAIK <code>jq</code> does not support in-place editing, so you must redirect to a temporary file first and then replace your original file with it, or use <code>sponge</code> utility from the moreutils package, like that:</p>\n\n<pre><code>jq '.address = \"abcde\"' test.json|sponge test.json\n</code></pre>\n\n<p>There are other techniques to \"redirect to the same file\", like saving your output in a variable e.t.c. \"Unix &amp; Linux StackExchange\" is a good place to start, if you want to learn more about this.</p>\n"},{"owner":{"reputation":494548,"display_name":"chepner","link":"https://stackoverflow.com/users/1126841/chepner"},"is_accepted":false,"score":159,"creation_date":1489149480,"answer_id":42718624,"question_id":42716734,"share_link":"https://stackoverflow.com/a/42718624","body_markdown":"Use a temporary file; it&#39;s what any program that claims to do in-place editing is doing.\r\n\r\n    tmp=$(mktemp)\r\n    jq &#39;.address = &quot;abcde&quot;&#39; test.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; test.json\r\n\r\nIf the address isn&#39;t hard-coded, pass the correct address via a `jq` argument:\r\n\r\n    address=abcde\r\n    jq --arg a &quot;$address&quot; &#39;.address = $a&#39; test.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; test.json","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/42718624#42718624","title":"Modify a key-value in a json using jq in-place","body":"<p>Use a temporary file; it's what any program that claims to do in-place editing is doing.</p>\n\n<pre><code>tmp=$(mktemp)\njq '.address = \"abcde\"' test.json &gt; \"$tmp\" &amp;&amp; mv \"$tmp\" test.json\n</code></pre>\n\n<p>If the address isn't hard-coded, pass the correct address via a <code>jq</code> argument:</p>\n\n<pre><code>address=abcde\njq --arg a \"$address\" '.address = $a' test.json &gt; \"$tmp\" &amp;&amp; mv \"$tmp\" test.json\n</code></pre>\n"},{"owner":{"reputation":151,"display_name":"Rafal Kita","link":"https://stackoverflow.com/users/7110298/rafal-kita"},"is_accepted":false,"score":11,"creation_date":1586016321,"answer_id":61030874,"question_id":42716734,"share_link":"https://stackoverflow.com/a/61030874","body_markdown":"Just to add to chepner answer and if you want it in a shell script.\r\n\r\ntest.json\r\n\r\n    {\r\n      &quot;name&quot;: &quot;abcd&quot;,\r\n      &quot;age&quot;: 30,\r\n      &quot;address&quot;: &quot;abc&quot;\r\n    }\r\n\r\nscript.sh\r\n\r\n    #!/bin/bash\r\n    address=&quot;abcde&quot;\r\n    age=40\r\n    \r\n    # Strings:\r\n    jq --arg a &quot;${address}&quot; &#39;.address = $a&#39; test.json &gt; &quot;tmp&quot; &amp;&amp; mv &quot;tmp&quot; test.json\r\n        \r\n    # Integers:\r\n    jq --argjson a &quot;${age}&quot; &#39;.age = $a&#39; test.json &gt; &quot;tmp&quot; &amp;&amp; mv &quot;tmp&quot; test.json\r\n\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/61030874#61030874","title":"Modify a key-value in a json using jq in-place","body":"<p>Just to add to chepner answer and if you want it in a shell script.</p>\n\n<p>test.json</p>\n\n<pre><code>{\n  \"name\": \"abcd\",\n  \"age\": 30,\n  \"address\": \"abc\"\n}\n</code></pre>\n\n<p>script.sh</p>\n\n<pre><code>#!/bin/bash\naddress=\"abcde\"\nage=40\n\n# Strings:\njq --arg a \"${address}\" '.address = $a' test.json &gt; \"tmp\" &amp;&amp; mv \"tmp\" test.json\n\n# Integers:\njq --argjson a \"${age}\" '.age = $a' test.json &gt; \"tmp\" &amp;&amp; mv \"tmp\" test.json\n</code></pre>\n"},{"owner":{"reputation":2924,"display_name":"Andy","link":"https://stackoverflow.com/users/4166604/andy"},"is_accepted":false,"score":63,"creation_date":1586121517,"answer_id":61049639,"question_id":42716734,"share_link":"https://stackoverflow.com/a/61049639","body_markdown":"Temp files add more complexity when not needed (unless you are truly dealing with JSON files so large you cannot fit them in memory (GB to 100&#39;s of GB or TB, depending on how much RAM/parallelism you have)\r\n\r\nThe Pure bash way.\r\n\r\n```\r\ncontents=&quot;$(jq &#39;.address = &quot;abcde&quot;&#39; test.json)&quot; &amp;&amp; \\\r\necho -E &quot;${contents}&quot; &gt; test.json\r\n```\r\n\r\n## Pros\r\n\r\n- No temp file to juggle\r\n- Pure bash\r\n- Don&#39;t need an admin to install `sponge`, which is not installed by default\r\n- Simpler\r\n\r\n## Cons\r\n\r\n- This works perfectly fine for json because it cannot contain a literal null character. If you were to try this outside the json arena, it would fail when a null is encountered (and you would have to do some encoding/decoding workarounds). Bash variables cannot store literal nulls.\r\n\r\n**Note**: this can not be combined as &quot;one command&quot; (like @codekandis\r\n suggested), since redirection sometimes starts *before* the left hand side (LHS) of an expression is run, and starting redirection before running `jq` erroneously empties the file, hence two separate commands. It may &quot;seem&quot; to work when you try it, but this is misleading and has a very high probability of failing as soon as the circumstances change.\r\n\r\n*Update*: Added `-E` option to disable escape characters _just in case_ you are on `systems where they are interpreted by default.` (Which I&#39;ve never actually seen)","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/61049639#61049639","title":"Modify a key-value in a json using jq in-place","body":"<p>Temp files add more complexity when not needed (unless you are truly dealing with JSON files so large you cannot fit them in memory (GB to 100's of GB or TB, depending on how much RAM/parallelism you have)</p>\n<p>The Pure bash way.</p>\n<pre><code>contents=&quot;$(jq '.address = &quot;abcde&quot;' test.json)&quot; &amp;&amp; \\\necho -E &quot;${contents}&quot; &gt; test.json\n</code></pre>\n<h2>Pros</h2>\n<ul>\n<li>No temp file to juggle</li>\n<li>Pure bash</li>\n<li>Don't need an admin to install <code>sponge</code>, which is not installed by default</li>\n<li>Simpler</li>\n</ul>\n<h2>Cons</h2>\n<ul>\n<li>This works perfectly fine for json because it cannot contain a literal null character. If you were to try this outside the json arena, it would fail when a null is encountered (and you would have to do some encoding/decoding workarounds). Bash variables cannot store literal nulls.</li>\n</ul>\n<p><strong>Note</strong>: this can not be combined as &quot;one command&quot; (like @codekandis\nsuggested), since redirection sometimes starts <em>before</em> the left hand side (LHS) of an expression is run, and starting redirection before running <code>jq</code> erroneously empties the file, hence two separate commands. It may &quot;seem&quot; to work when you try it, but this is misleading and has a very high probability of failing as soon as the circumstances change.</p>\n<p><em>Update</em>: Added <code>-E</code> option to disable escape characters <em>just in case</em> you are on <code>systems where they are interpreted by default.</code> (Which I've never actually seen)</p>\n"},{"owner":{"reputation":1428,"display_name":"mahendra rathod","link":"https://stackoverflow.com/users/6791465/mahendra-rathod"},"is_accepted":false,"score":8,"creation_date":1617634501,"answer_id":66954991,"question_id":42716734,"share_link":"https://stackoverflow.com/a/66954991","body_markdown":"Example for nested json with changing single and multiple values. \r\n\r\nconfig.json\r\n\r\n    {\r\n      &quot;Parameters&quot;: {\r\n        &quot;Environment&quot;: &quot;Prod&quot;,\r\n        &quot;InstanceType&quot;: &quot;t2.micro&quot;,\r\n        &quot;AMIID&quot;: &quot;ami-02d8e11&quot;,\r\n        &quot;ConfigRegion&quot;: &quot;eu-west-1&quot;\r\n      }\r\n    }\r\n\r\n\r\nwith the below command, you can edit multiple values. \r\n\r\n\r\n    tmp=$(mktemp)\r\n    jq &#39;.Parameters.AMIID = &quot;ami-02d8sdfsdf&quot; | .Parameters.Environment = &quot;QA&quot;&#39; config.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; config.json\r\n\r\n\r\nwith the below command, you can edit single value. \r\n\r\n    tmp=$(mktemp)\r\n    jq &#39;.Parameters.AMIID = &quot;ami-02d8sdfsdf&quot;&#39; config.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; config.json\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/66954991#66954991","title":"Modify a key-value in a json using jq in-place","body":"<p>Example for nested json with changing single and multiple values.</p>\n<p>config.json</p>\n<pre><code>{\n  &quot;Parameters&quot;: {\n    &quot;Environment&quot;: &quot;Prod&quot;,\n    &quot;InstanceType&quot;: &quot;t2.micro&quot;,\n    &quot;AMIID&quot;: &quot;ami-02d8e11&quot;,\n    &quot;ConfigRegion&quot;: &quot;eu-west-1&quot;\n  }\n}\n</code></pre>\n<p>with the below command, you can edit multiple values.</p>\n<pre><code>tmp=$(mktemp)\njq '.Parameters.AMIID = &quot;ami-02d8sdfsdf&quot; | .Parameters.Environment = &quot;QA&quot;' config.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; config.json\n</code></pre>\n<p>with the below command, you can edit single value.</p>\n<pre><code>tmp=$(mktemp)\njq '.Parameters.AMIID = &quot;ami-02d8sdfsdf&quot;' config.json &gt; &quot;$tmp&quot; &amp;&amp; mv &quot;$tmp&quot; config.json\n</code></pre>\n"},{"owner":{"reputation":8615,"display_name":"Danila Vershinin","link":"https://stackoverflow.com/users/285069/danila-vershinin"},"is_accepted":false,"score":-3,"creation_date":1625080364,"answer_id":68200468,"question_id":42716734,"share_link":"https://stackoverflow.com/a/68200468","body_markdown":"I didn&#39;t like any of the solutions and created the [`sde` utility](https://github.com/dvershinin/sde).\r\n\r\n```bash\r\npip install sde\r\n```\r\n\r\nThen, e.g. for the following JSON data:\r\n\r\n```json\r\n{\r\n  &quot;Parameters&quot;: {\r\n    &quot;Environment&quot;: &quot;Prod&quot;,\r\n    &quot;InstanceType&quot;: &quot;t2.micro&quot;,\r\n    &quot;AMIID&quot;: &quot;ami-02d8e11&quot;,\r\n    &quot;ConfigRegion&quot;: &quot;eu-west-1&quot;\r\n  }   \r\n}\r\n```\r\n\r\n you can simply do:\r\n\r\n```bash\r\nsde Parameters.Environment Dev test.json\r\n```\r\n","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/68200468#68200468","title":"Modify a key-value in a json using jq in-place","body":"<p>I didn't like any of the solutions and created the <a href=\"https://github.com/dvershinin/sde\" rel=\"nofollow noreferrer\"><code>sde</code> utility</a>.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>pip install sde\n</code></pre>\n<p>Then, e.g. for the following JSON data:</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n  &quot;Parameters&quot;: {\n    &quot;Environment&quot;: &quot;Prod&quot;,\n    &quot;InstanceType&quot;: &quot;t2.micro&quot;,\n    &quot;AMIID&quot;: &quot;ami-02d8e11&quot;,\n    &quot;ConfigRegion&quot;: &quot;eu-west-1&quot;\n  }   \n}\n</code></pre>\n<p>you can simply do:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>sde Parameters.Environment Dev test.json\n</code></pre>\n"},{"owner":{"reputation":81,"display_name":"Delcroip","link":"https://stackoverflow.com/users/3533113/delcroip"},"is_accepted":false,"score":6,"creation_date":1631720045,"answer_id":69196044,"question_id":42716734,"share_link":"https://stackoverflow.com/a/69196044","body_markdown":"this should work\r\n```\r\naddress = aaaaa\r\necho $(jq --arg a &quot;$address&quot; &#39;.address = ($a)&#39; test.json) &gt; test.json\r\n```\r\nfor whatever reason, without the echo, it makes a bin file and my python script was not able to parse it.\r\n\r\n","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/69196044#69196044","title":"Modify a key-value in a json using jq in-place","body":"<p>this should work</p>\n<pre><code>address = aaaaa\necho $(jq --arg a &quot;$address&quot; '.address = ($a)' test.json) &gt; test.json\n</code></pre>\n<p>for whatever reason, without the echo, it makes a bin file and my python script was not able to parse it.</p>\n"},{"owner":{"reputation":3724,"accept_rate":29,"display_name":"rainabba","link":"https://stackoverflow.com/users/901899/rainabba"},"is_accepted":false,"score":1,"creation_date":1663015246,"answer_id":73695035,"question_id":42716734,"share_link":"https://stackoverflow.com/a/73695035","body_markdown":"I took the best of a couple answers [here][1] and [here][2].\r\n\r\nThis uses a parameter named `actionname` as an input to an assignment of the `name` property at the document level. ACTION_NAME is just an envvar I want to use as the replacement value.\r\n```bash\r\ncontents=&quot;$(jq --arg actionname ${ACTION_NAME} &#39;.name = $actionname&#39; ./${ACTION_NAME}/package.json)&quot; &amp;&amp; \\\r\necho -E &quot;${contents}&quot; &gt; ${ACTION_NAME}/package.json;\r\n```\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/61049639/901899\r\n  [2]: https://stackoverflow.com/a/69196044/901899","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/73695035#73695035","title":"Modify a key-value in a json using jq in-place","body":"<p>I took the best of a couple answers <a href=\"https://stackoverflow.com/a/61049639/901899\">here</a> and <a href=\"https://stackoverflow.com/a/69196044/901899\">here</a>.</p>\n<p>This uses a parameter named <code>actionname</code> as an input to an assignment of the <code>name</code> property at the document level. ACTION_NAME is just an envvar I want to use as the replacement value.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>contents=&quot;$(jq --arg actionname ${ACTION_NAME} '.name = $actionname' ./${ACTION_NAME}/package.json)&quot; &amp;&amp; \\\necho -E &quot;${contents}&quot; &gt; ${ACTION_NAME}/package.json;\n</code></pre>\n"},{"owner":{"reputation":3098,"accept_rate":70,"display_name":"donatJ","link":"https://stackoverflow.com/users/345350/donatj"},"is_accepted":false,"score":0,"creation_date":1684861224,"answer_id":76317115,"question_id":42716734,"share_link":"https://stackoverflow.com/a/76317115","body_markdown":"The simple answer is just to store interim JSON to a variable rather than a file.\r\n\r\n```bash\r\nJSON=$(jq &#39;.address = &quot;abcde&quot;&#39; test.json)\r\necho &quot;$JSON&quot; &gt; test.json\r\n```","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place/76317115#76317115","title":"Modify a key-value in a json using jq in-place","body":"<p>The simple answer is just to store interim JSON to a variable rather than a file.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>JSON=$(jq '.address = &quot;abcde&quot;' test.json)\necho &quot;$JSON&quot; &gt; test.json\n</code></pre>\n"}],"owner":{"reputation":1659,"accept_rate":10,"display_name":"wolfsbane","link":"https://stackoverflow.com/users/6948883/wolfsbane"},"is_answered":true,"view_count":143194,"up_vote_count":142,"accepted_answer_id":42717073,"answer_count":9,"score":142,"last_activity_date":1684861224,"creation_date":1489143582,"last_edit_date":1684861149,"question_id":42716734,"body_markdown":"I have a json in which I want to modify a particular value but the terminal always displays the json with the modified value but it does not actually change the value in the particular file. \r\n\r\nSample json:\r\n\r\n```json\r\n{\r\n    &quot;name&quot;: &quot;abcd&quot;,\r\n    &quot;age&quot;: 30,\r\n    &quot;address&quot;: &quot;abc&quot;\r\n}\r\n```\r\n\r\nI want to change the value of address in the file itself but so far I&#39;ve been unable to do so. I tried using:\r\n\r\n    jq &#39;.address = &quot;abcde&quot;&#39; test.json\r\nbut it didn&#39;t work. Any suggestions?","link":"https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place","title":"Modify a key-value in a json using jq in-place","body":"<p>I have a json in which I want to modify a particular value but the terminal always displays the json with the modified value but it does not actually change the value in the particular file.</p>\n<p>Sample json:</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n    &quot;name&quot;: &quot;abcd&quot;,\n    &quot;age&quot;: 30,\n    &quot;address&quot;: &quot;abc&quot;\n}\n</code></pre>\n<p>I want to change the value of address in the file itself but so far I've been unable to do so. I tried using:</p>\n<pre><code>jq '.address = &quot;abcde&quot;' test.json\n</code></pre>\n<p>but it didn't work. Any suggestions?</p>\n"},{"tags":["bash","jq","in-place","edit-in-place"],"answers":[{"owner":{"reputation":128831,"accept_rate":86,"display_name":"Jeff Mercado","link":"https://stackoverflow.com/users/390278/jeff-mercado"},"is_accepted":false,"score":14,"creation_date":1460444677,"answer_id":36565891,"question_id":36565295,"share_link":"https://stackoverflow.com/a/36565891","body_markdown":"You&#39;ll want to update the action objects without changing the context.  By having the pipe there, you&#39;re changing the context to each individual action.  You can control that with some parentheses.\r\n\r\n    $ jq --arg age &quot;3&quot; \\\r\n    &#39;(.Actions[] | select(.properties.age == $age).properties.other) = &quot;no-test&quot;&#39; sample.json\r\n\r\nThis should yield:\r\n\r\n    {\r\n      &quot;Actions&quot;: [\r\n        {\r\n          &quot;value&quot;: &quot;1&quot;,\r\n          &quot;properties&quot;: {\r\n            &quot;name&quot;: &quot;abc&quot;,\r\n            &quot;age&quot;: &quot;2&quot;,\r\n            &quot;other &quot;: &quot;test1&quot;\r\n          }\r\n        },\r\n        {\r\n          &quot;value&quot;: &quot;2&quot;,\r\n          &quot;properties&quot;: {\r\n            &quot;name&quot;: &quot;def&quot;,\r\n            &quot;age&quot;: &quot;3&quot;,\r\n            &quot;other&quot;: &quot;no-test&quot;\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\nYou can redirect the results to a file to replace the input file. It won&#39;t do in-place updates to a file as sed does.\r\n","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/36565891#36565891","title":"jq to replace text directly on file (like sed -i)","body":"<p>You'll want to update the action objects without changing the context.  By having the pipe there, you're changing the context to each individual action.  You can control that with some parentheses.</p>\n\n<pre><code>$ jq --arg age \"3\" \\\n'(.Actions[] | select(.properties.age == $age).properties.other) = \"no-test\"' sample.json\n</code></pre>\n\n<p>This should yield:</p>\n\n<pre><code>{\n  \"Actions\": [\n    {\n      \"value\": \"1\",\n      \"properties\": {\n        \"name\": \"abc\",\n        \"age\": \"2\",\n        \"other \": \"test1\"\n      }\n    },\n    {\n      \"value\": \"2\",\n      \"properties\": {\n        \"name\": \"def\",\n        \"age\": \"3\",\n        \"other\": \"no-test\"\n      }\n    }\n  ]\n}\n</code></pre>\n\n<p>You can redirect the results to a file to replace the input file. It won't do in-place updates to a file as sed does.</p>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":102,"creation_date":1460474391,"answer_id":36577521,"question_id":36565295,"share_link":"https://stackoverflow.com/a/36577521","body_markdown":"This post addresses the question about the absence of the equivalent of sed&#39;s &quot;-i&quot; option, and in particular the situation described:\r\n\r\n&gt; I have a bunch of files and writing each one to a separate file wouldn&#39;t be easy.  \r\n\r\nThere are several options, at least if you are working in a Mac or Linux or similar environment.  Their pros and cons are discussed at\r\nhttp://backreference.org/2011/01/29/in-place-editing-of-files/\r\nso I&#39;ll focus on just three techniques:\r\n\r\nOne is simply to use &quot;&amp;&amp;&quot; along the lines of:\r\n\r\n    jq ... INPUT &gt; INPUT.tmp &amp;&amp; mv INPUT.tmp INPUT\r\n  \r\nAnother is to use the `sponge` utility (part of GNU `moreutils`):\r\n\r\n    jq ... INPUT | sponge INPUT\r\n\r\nThe third option might be useful if it is advantageous to avoid updating a file if there are no changes to it. Here is a script which illustrates such a function:\r\n\r\n\r\n    #!/bin/bash\r\n    \r\n    function maybeupdate {\r\n        local f=&quot;$1&quot;\r\n        cmp -s &quot;$f&quot; &quot;$f.tmp&quot;\r\n        if [ $? = 0 ] ; then\r\n    \t  /bin/rm $f.tmp\r\n        else\r\n    \t  /bin/mv &quot;$f.tmp&quot; &quot;$f&quot;\r\n        fi\r\n    }\r\n    \r\n    for f\r\n    do\r\n        jq . &quot;$f&quot; &gt; &quot;$f.tmp&quot;\r\n        maybeupdate &quot;$f&quot;\r\n    done\r\n","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/36577521#36577521","title":"jq to replace text directly on file (like sed -i)","body":"<p>This post addresses the question about the absence of the equivalent of sed's \"-i\" option, and in particular the situation described:</p>\n\n<blockquote>\n  <p>I have a bunch of files and writing each one to a separate file wouldn't be easy.  </p>\n</blockquote>\n\n<p>There are several options, at least if you are working in a Mac or Linux or similar environment.  Their pros and cons are discussed at\n<a href=\"http://backreference.org/2011/01/29/in-place-editing-of-files/\" rel=\"noreferrer\">http://backreference.org/2011/01/29/in-place-editing-of-files/</a>\nso I'll focus on just three techniques:</p>\n\n<p>One is simply to use \"&amp;&amp;\" along the lines of:</p>\n\n<pre><code>jq ... INPUT &gt; INPUT.tmp &amp;&amp; mv INPUT.tmp INPUT\n</code></pre>\n\n<p>Another is to use the <code>sponge</code> utility (part of GNU <code>moreutils</code>):</p>\n\n<pre><code>jq ... INPUT | sponge INPUT\n</code></pre>\n\n<p>The third option might be useful if it is advantageous to avoid updating a file if there are no changes to it. Here is a script which illustrates such a function:</p>\n\n<pre><code>#!/bin/bash\n\nfunction maybeupdate {\n    local f=\"$1\"\n    cmp -s \"$f\" \"$f.tmp\"\n    if [ $? = 0 ] ; then\n      /bin/rm $f.tmp\n    else\n      /bin/mv \"$f.tmp\" \"$f\"\n    fi\n}\n\nfor f\ndo\n    jq . \"$f\" &gt; \"$f.tmp\"\n    maybeupdate \"$f\"\ndone\n</code></pre>\n"},{"owner":{"reputation":4029,"display_name":"Will Barnwell","link":"https://stackoverflow.com/users/5216668/will-barnwell"},"is_accepted":false,"score":3,"creation_date":1460749840,"answer_id":36655724,"question_id":36565295,"share_link":"https://stackoverflow.com/a/36655724","body_markdown":"[Using my answer to a duplicate question][1]\n\n&gt;Assignment prints the whole object with the assignment executed so you could assign a new value to `.Actions` of the modified Actions array\n&gt;\n&gt;     .Actions=([.Actions[] | if .properties.age == &quot;3&quot; then .properties.other = &quot;no-test&quot; else . end])\n&gt;\n&gt;I used an if statement but we can use your code to do the same thing\n&gt;\n&gt;     .Actions=[.Actions[] | select (.properties.age == &quot;3&quot;).properties.other = &quot;no-test&quot;]\n\nThe above will output the entire json with `.Actions` edited.\njq does not had `sed -i` like functionality, but all you need to do is pipe it back into a [sponge][2] to the file with `| sponge`\n\n     jq &#39;.Actions=([.Actions[] | if .properties.age == &quot;3&quot; then .properties.other = &quot;no-test&quot; else . end])&#39; sample.json | sponge sample.json\n\n\n  [1]: https://stackoverflow.com/questions/36607650/how-to-rewrite-the-exact-value-on-jq-referencing-the-top-element/36608845#36608845\n  [2]: http://linux.die.net/man/1/sponge","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/36655724#36655724","title":"jq to replace text directly on file (like sed -i)","body":"<p><a href=\"https://stackoverflow.com/questions/36607650/how-to-rewrite-the-exact-value-on-jq-referencing-the-top-element/36608845#36608845\">Using my answer to a duplicate question</a></p>\n<blockquote>\n<p>Assignment prints the whole object with the assignment executed so you could assign a new value to <code>.Actions</code> of the modified Actions array</p>\n<pre><code>.Actions=([.Actions[] | if .properties.age == &quot;3&quot; then .properties.other = &quot;no-test&quot; else . end])\n</code></pre>\n<p>I used an if statement but we can use your code to do the same thing</p>\n<pre><code>.Actions=[.Actions[] | select (.properties.age == &quot;3&quot;).properties.other = &quot;no-test&quot;]\n</code></pre>\n</blockquote>\n<p>The above will output the entire json with <code>.Actions</code> edited.\njq does not had <code>sed -i</code> like functionality, but all you need to do is pipe it back into a <a href=\"http://linux.die.net/man/1/sponge\" rel=\"nofollow noreferrer\">sponge</a> to the file with <code>| sponge</code></p>\n<pre><code> jq '.Actions=([.Actions[] | if .properties.age == &quot;3&quot; then .properties.other = &quot;no-test&quot; else . end])' sample.json | sponge sample.json\n</code></pre>\n"},{"owner":{"reputation":831,"display_name":"moriaki","link":"https://stackoverflow.com/users/10277256/moriaki"},"is_accepted":false,"score":59,"creation_date":1584552439,"answer_id":60744617,"question_id":36565295,"share_link":"https://stackoverflow.com/a/60744617","body_markdown":"instead of `sponge` :\r\n```\r\ncat &lt;&lt;&lt; $(jq &#39;QUERY&#39; sample.json) &gt; sample.json\r\n```","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/60744617#60744617","title":"jq to replace text directly on file (like sed -i)","body":"<p>instead of <code>sponge</code> :</p>\n\n<pre><code>cat &lt;&lt;&lt; $(jq 'QUERY' sample.json) &gt; sample.json\n</code></pre>\n"},{"owner":{"reputation":19798,"accept_rate":67,"display_name":"Charles Merriam","link":"https://stackoverflow.com/users/1320510/charles-merriam"},"is_accepted":false,"score":21,"creation_date":1585343692,"answer_id":60894210,"question_id":36565295,"share_link":"https://stackoverflow.com/a/60894210","body_markdown":"You ran into two issues:\r\n\r\n - This is a common problem for text processing, not solved in the base Linux distribution.\r\n - *jq* did not write special code to overcome this problem.\r\n\r\nOne good solution:\r\n\r\n  - Install [moreutils](http://joeyh.name/code/moreutils/) using `brew install moreutils` or your favorite package manager.  This contains the handy program `sponge`, for just this purpose.\r\n  - Use `cat myfile | jq blahblahblah | sponge myfile`.  That is, run *jq*, capturing the standard out, when *jq* has finished, then write the standard output over `myfile` (the input file).","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/60894210#60894210","title":"jq to replace text directly on file (like sed -i)","body":"<p>You ran into two issues:</p>\n\n<ul>\n<li>This is a common problem for text processing, not solved in the base Linux distribution.</li>\n<li><em>jq</em> did not write special code to overcome this problem.</li>\n</ul>\n\n<p>One good solution:</p>\n\n<ul>\n<li>Install <a href=\"http://joeyh.name/code/moreutils/\" rel=\"noreferrer\">moreutils</a> using <code>brew install moreutils</code> or your favorite package manager.  This contains the handy program <code>sponge</code>, for just this purpose.</li>\n<li>Use <code>cat myfile | jq blahblahblah | sponge myfile</code>.  That is, run <em>jq</em>, capturing the standard out, when <em>jq</em> has finished, then write the standard output over <code>myfile</code> (the input file).</li>\n</ul>\n"},{"owner":{"reputation":1889,"display_name":"tamerlaha","link":"https://stackoverflow.com/users/2335253/tamerlaha"},"is_accepted":false,"score":2,"creation_date":1634770790,"answer_id":69653942,"question_id":36565295,"share_link":"https://stackoverflow.com/a/69653942","body_markdown":"It&#39;s possible to do something  like:\r\n\r\n    echo &quot;$(jq &#39;. + {&quot;registry-mirrors&quot;: [&quot;https://docker-mirror&quot;]}&#39; /etc/docker/daemon.json)&quot; &gt; /etc/docker/daemon.json\r\n\r\nSo it gets text in sub-shell using jq and echoes it to file in &#39;main&#39; shell.\r\n\r\nNote: The main idea here is to illustrate how it can be achieved without additional tools like `sponge` or so. Instead of `echo` you can use any command which can write to stdout e.g. `printf &#39;%s&#39; &quot;$(jq ... file)&quot; &gt; file`.\r\n\r\nP.S Issue in jq project is still open: https://github.com/stedolan/jq/issues/105\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/69653942#69653942","title":"jq to replace text directly on file (like sed -i)","body":"<p>It's possible to do something  like:</p>\n<pre><code>echo &quot;$(jq '. + {&quot;registry-mirrors&quot;: [&quot;https://docker-mirror&quot;]}' /etc/docker/daemon.json)&quot; &gt; /etc/docker/daemon.json\n</code></pre>\n<p>So it gets text in sub-shell using jq and echoes it to file in 'main' shell.</p>\n<p>Note: The main idea here is to illustrate how it can be achieved without additional tools like <code>sponge</code> or so. Instead of <code>echo</code> you can use any command which can write to stdout e.g. <code>printf '%s' &quot;$(jq ... file)&quot; &gt; file</code>.</p>\n<p>P.S Issue in jq project is still open: <a href=\"https://github.com/stedolan/jq/issues/105\" rel=\"nofollow noreferrer\">https://github.com/stedolan/jq/issues/105</a></p>\n"},{"owner":{"reputation":49,"display_name":"James Hopbourn","link":"https://stackoverflow.com/users/8172264/james-hopbourn"},"is_accepted":false,"score":4,"creation_date":1635418330,"answer_id":69752749,"question_id":36565295,"share_link":"https://stackoverflow.com/a/69752749","body_markdown":"use tee command\r\n\r\n```\r\n➜ cat config.json|jq &#39;.Actions[] | select (.properties.age == &quot;3&quot;) .properties.other = &quot;no-test&quot;&#39;|tee config.json\r\n{\r\n  &quot;value&quot;: &quot;1&quot;,\r\n  &quot;properties&quot;: {\r\n    &quot;name&quot;: &quot;abc&quot;,\r\n    &quot;age&quot;: &quot;2&quot;,\r\n    &quot;other &quot;: &quot;test1&quot;\r\n  }\r\n}\r\n{\r\n  &quot;value&quot;: &quot;2&quot;,\r\n  &quot;properties&quot;: {\r\n    &quot;name&quot;: &quot;def&quot;,\r\n    &quot;age&quot;: &quot;3&quot;,\r\n    &quot;other&quot;: &quot;no-test&quot;\r\n  }\r\n}\r\n\r\n➜ cat config.json\r\n{\r\n  &quot;value&quot;: &quot;1&quot;,\r\n  &quot;properties&quot;: {\r\n    &quot;name&quot;: &quot;abc&quot;,\r\n    &quot;age&quot;: &quot;2&quot;,\r\n    &quot;other &quot;: &quot;test1&quot;\r\n  }\r\n}\r\n{\r\n  &quot;value&quot;: &quot;2&quot;,\r\n  &quot;properties&quot;: {\r\n    &quot;name&quot;: &quot;def&quot;,\r\n    &quot;age&quot;: &quot;3&quot;,\r\n    &quot;other&quot;: &quot;no-test&quot;\r\n  }\r\n}\r\n```","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/69752749#69752749","title":"jq to replace text directly on file (like sed -i)","body":"<p>use tee command</p>\n<pre><code>➜ cat config.json|jq '.Actions[] | select (.properties.age == &quot;3&quot;) .properties.other = &quot;no-test&quot;'|tee config.json\n{\n  &quot;value&quot;: &quot;1&quot;,\n  &quot;properties&quot;: {\n    &quot;name&quot;: &quot;abc&quot;,\n    &quot;age&quot;: &quot;2&quot;,\n    &quot;other &quot;: &quot;test1&quot;\n  }\n}\n{\n  &quot;value&quot;: &quot;2&quot;,\n  &quot;properties&quot;: {\n    &quot;name&quot;: &quot;def&quot;,\n    &quot;age&quot;: &quot;3&quot;,\n    &quot;other&quot;: &quot;no-test&quot;\n  }\n}\n\n➜ cat config.json\n{\n  &quot;value&quot;: &quot;1&quot;,\n  &quot;properties&quot;: {\n    &quot;name&quot;: &quot;abc&quot;,\n    &quot;age&quot;: &quot;2&quot;,\n    &quot;other &quot;: &quot;test1&quot;\n  }\n}\n{\n  &quot;value&quot;: &quot;2&quot;,\n  &quot;properties&quot;: {\n    &quot;name&quot;: &quot;def&quot;,\n    &quot;age&quot;: &quot;3&quot;,\n    &quot;other&quot;: &quot;no-test&quot;\n  }\n}\n</code></pre>\n"},{"owner":{"reputation":13110,"display_name":"Orwellophile","link":"https://stackoverflow.com/users/912236/orwellophile"},"is_accepted":false,"score":0,"creation_date":1636133539,"answer_id":69857148,"question_id":36565295,"share_link":"https://stackoverflow.com/a/69857148","body_markdown":"This `bash` (probably `sh` compatible) function `jqi` will take care of everything.\r\n\r\nUsage: `jqi [-i] &lt;filename&gt; [jq options] &lt;jq filter&gt;`  \r\n\r\ne.g.: \r\n\r\n```bash\r\nfix-node-sass() \r\n{ \r\n    jqi -i package.json &#39;.resolutions += {&quot;node-sass&quot;: &quot;6.0.1&quot;}&#39; \\\r\n                  &#39;| .devDependencies += {&quot;node-sass&quot;: &quot;6.0.1&quot;}&#39;\r\n\r\n}\r\n```\r\n\r\n\r\nMuch like `sed` or `perl`, specify `-i` as the leading argument to force rewriting of the original file.  If `-i` is not specified, it will be a &quot;dry run&quot; and output will go to `stdout`.\r\n\r\nIf for some arcane reason you want to do something weird like:\r\n\r\n`cat in.json | jq -i - &gt; out.json`\r\n\r\nThen `out.json` will hold either the result, or the original contents of `in.json` on error -- i.e., `out.json` should be valid json.\r\n\r\nNote: an output of less than 7 characters (e.g. `null`) is considered an error, and will not overwrite.  You can disable this safety feature if you wish.\r\n\r\n```bash\r\njqi () \r\n{ \r\n    local filename=$1;\r\n    shift;\r\n    local inplace=;\r\n    local stdin=;\r\n    if [[ $filename == &quot;-i&quot; ]]; then\r\n        echo &quot;jqi: in-place editing enabled&quot; 1&gt;&amp;2;\r\n        inplace=y;\r\n        filename=$1;\r\n        shift;\r\n    fi;\r\n    if [[ $filename == &quot;-&quot; ]]; then\r\n        echo &quot;jqi: reading/writing from stdin/stdout&quot; 1&gt;&amp;2;\r\n        if [ -n &quot;$inplace&quot; ]; then\r\n            stdin=y;\r\n            inplace=;\r\n        fi;\r\n        filename=&quot;/dev/stdin&quot;;\r\n    fi;\r\n    local tempname=&quot;$( mktemp --directory --suffix __jq )/$( dirname &quot;$filename&quot; ).$$.json&quot;;\r\n    local timestamp=&quot;${tempname%json}timestamp&quot;;\r\n    local -i error=0;\r\n    cat &quot;$filename&quot; &gt; &quot;$tempname&quot;;\r\n    touch &quot;$timestamp&quot;;\r\n    while :; do\r\n        if jq &quot;${*}&quot; &quot;$filename&quot; &gt; &quot;$tempname&quot;; then\r\n            if test &quot;$tempname&quot; -nt &quot;$timestamp&quot;; then\r\n                local ls_output=($( ls -Lon &quot;$tempname&quot; ));\r\n                filesize=${ls_output[3]};\r\n                if [[ $filesize -lt 7 ]]; then\r\n                    echo &quot;jqi: read only $filesize bytes, not overwriting&quot; 1&gt;&amp;2;\r\n                    error=1;\r\n                    break;\r\n                fi;\r\n                if [ -n &quot;$inplace&quot; ]; then\r\n                    cat &quot;$tempname&quot; &gt; &quot;$filename&quot;;\r\n                else\r\n                    echo &quot;jqi: output from dry run&quot; 1&gt;&amp;2;\r\n                    cat &quot;$tempname&quot;;\r\n                fi;\r\n                error=0;\r\n                break;\r\n            else\r\n                echo &quot;jqi: output not newer, not overwriting&quot; 1&gt;&amp;2;\r\n                error=1;\r\n                break;\r\n            fi;\r\n        else\r\n            echo &quot;jqi: jq error, not overwriting&quot; 1&gt;&amp;2;\r\n            error=1;\r\n            break;\r\n        fi;\r\n    done;\r\n    if [ -n &quot;$stdin&quot; ] &amp;&amp; [ $error -eq 1 ]; then\r\n        echo &quot;jqi: output original to stdout&quot; 1&gt;&amp;2;\r\n        cat &quot;$filename&quot;;\r\n    fi;\r\n    rm &quot;$tempname&quot; &quot;$timestamp&quot;;\r\n    rmdir &quot;$( dirname &quot;$tempname&quot; )&quot;\r\n}\r\n```","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/69857148#69857148","title":"jq to replace text directly on file (like sed -i)","body":"<p>This <code>bash</code> (probably <code>sh</code> compatible) function <code>jqi</code> will take care of everything.</p>\n<p>Usage: <code>jqi [-i] &lt;filename&gt; [jq options] &lt;jq filter&gt;</code></p>\n<p>e.g.:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>fix-node-sass() \n{ \n    jqi -i package.json '.resolutions += {&quot;node-sass&quot;: &quot;6.0.1&quot;}' \\\n                  '| .devDependencies += {&quot;node-sass&quot;: &quot;6.0.1&quot;}'\n\n}\n</code></pre>\n<p>Much like <code>sed</code> or <code>perl</code>, specify <code>-i</code> as the leading argument to force rewriting of the original file.  If <code>-i</code> is not specified, it will be a &quot;dry run&quot; and output will go to <code>stdout</code>.</p>\n<p>If for some arcane reason you want to do something weird like:</p>\n<p><code>cat in.json | jq -i - &gt; out.json</code></p>\n<p>Then <code>out.json</code> will hold either the result, or the original contents of <code>in.json</code> on error -- i.e., <code>out.json</code> should be valid json.</p>\n<p>Note: an output of less than 7 characters (e.g. <code>null</code>) is considered an error, and will not overwrite.  You can disable this safety feature if you wish.</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jqi () \n{ \n    local filename=$1;\n    shift;\n    local inplace=;\n    local stdin=;\n    if [[ $filename == &quot;-i&quot; ]]; then\n        echo &quot;jqi: in-place editing enabled&quot; 1&gt;&amp;2;\n        inplace=y;\n        filename=$1;\n        shift;\n    fi;\n    if [[ $filename == &quot;-&quot; ]]; then\n        echo &quot;jqi: reading/writing from stdin/stdout&quot; 1&gt;&amp;2;\n        if [ -n &quot;$inplace&quot; ]; then\n            stdin=y;\n            inplace=;\n        fi;\n        filename=&quot;/dev/stdin&quot;;\n    fi;\n    local tempname=&quot;$( mktemp --directory --suffix __jq )/$( dirname &quot;$filename&quot; ).$$.json&quot;;\n    local timestamp=&quot;${tempname%json}timestamp&quot;;\n    local -i error=0;\n    cat &quot;$filename&quot; &gt; &quot;$tempname&quot;;\n    touch &quot;$timestamp&quot;;\n    while :; do\n        if jq &quot;${*}&quot; &quot;$filename&quot; &gt; &quot;$tempname&quot;; then\n            if test &quot;$tempname&quot; -nt &quot;$timestamp&quot;; then\n                local ls_output=($( ls -Lon &quot;$tempname&quot; ));\n                filesize=${ls_output[3]};\n                if [[ $filesize -lt 7 ]]; then\n                    echo &quot;jqi: read only $filesize bytes, not overwriting&quot; 1&gt;&amp;2;\n                    error=1;\n                    break;\n                fi;\n                if [ -n &quot;$inplace&quot; ]; then\n                    cat &quot;$tempname&quot; &gt; &quot;$filename&quot;;\n                else\n                    echo &quot;jqi: output from dry run&quot; 1&gt;&amp;2;\n                    cat &quot;$tempname&quot;;\n                fi;\n                error=0;\n                break;\n            else\n                echo &quot;jqi: output not newer, not overwriting&quot; 1&gt;&amp;2;\n                error=1;\n                break;\n            fi;\n        else\n            echo &quot;jqi: jq error, not overwriting&quot; 1&gt;&amp;2;\n            error=1;\n            break;\n        fi;\n    done;\n    if [ -n &quot;$stdin&quot; ] &amp;&amp; [ $error -eq 1 ]; then\n        echo &quot;jqi: output original to stdout&quot; 1&gt;&amp;2;\n        cat &quot;$filename&quot;;\n    fi;\n    rm &quot;$tempname&quot; &quot;$timestamp&quot;;\n    rmdir &quot;$( dirname &quot;$tempname&quot; )&quot;\n}\n</code></pre>\n"},{"owner":{"reputation":20650,"accept_rate":64,"display_name":"Shakiba Moshiri","link":"https://stackoverflow.com/users/4643584/shakiba-moshiri"},"is_accepted":false,"score":8,"creation_date":1650189618,"answer_id":71900930,"question_id":36565295,"share_link":"https://stackoverflow.com/a/71900930","body_markdown":"I use `yq`,\r\nFor advanced users this `-i` (in-place update) is needed, hope be added to `jq`\r\n```BASH\r\nyq -iP &#39;.Email.Port=3030&#39; config.json -o json\r\n```\r\n - `-i` in place update\r\n - `-P` pretty print\r\n - `-o` output should be json\r\n\r\n---\r\n\r\n    yq --version\r\n    yq (https://github.com/mikefarah/yq/) version 4.21.1","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/71900930#71900930","title":"jq to replace text directly on file (like sed -i)","body":"<p>I use <code>yq</code>,\nFor advanced users this <code>-i</code> (in-place update) is needed, hope be added to <code>jq</code></p>\n<pre><code>yq -iP '.Email.Port=3030' config.json -o json\n</code></pre>\n<ul>\n<li><code>-i</code> in place update</li>\n<li><code>-P</code> pretty print</li>\n<li><code>-o</code> output should be json</li>\n</ul>\n<hr />\n<pre><code>yq --version\nyq (https://github.com/mikefarah/yq/) version 4.21.1\n</code></pre>\n"},{"owner":{"reputation":3060,"display_name":"cababunga","link":"https://stackoverflow.com/users/489566/cababunga"},"is_accepted":false,"score":0,"creation_date":1681273239,"answer_id":75991875,"question_id":36565295,"share_link":"https://stackoverflow.com/a/75991875","body_markdown":"The simplest way of accomplishing it is to load the file into a variable first and then send it into jq.\r\n\r\n    content=$(cat sample.json) &amp;&amp; \r\n    jq &#39;&lt;your jq script&gt;&#39; &lt;&lt;&lt;$content &gt;sample.json\r\n\r\nThis will only work if your JSON file fits in shell variable. To find out the maximum size the bash variable on your system run:\r\n\r\n    getconf ARG_MAX\r\n\r\nMine shows 2MB.","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/75991875#75991875","title":"jq to replace text directly on file (like sed -i)","body":"<p>The simplest way of accomplishing it is to load the file into a variable first and then send it into jq.</p>\n<pre><code>content=$(cat sample.json) &amp;&amp; \njq '&lt;your jq script&gt;' &lt;&lt;&lt;$content &gt;sample.json\n</code></pre>\n<p>This will only work if your JSON file fits in shell variable. To find out the maximum size the bash variable on your system run:</p>\n<pre><code>getconf ARG_MAX\n</code></pre>\n<p>Mine shows 2MB.</p>\n"},{"owner":{"reputation":1,"display_name":"damienmillet","link":"https://stackoverflow.com/users/14136424/damienmillet"},"is_accepted":false,"score":0,"creation_date":1684174488,"answer_id":76256921,"question_id":36565295,"share_link":"https://stackoverflow.com/a/76256921","body_markdown":"in one line : `cat file.json | jq &#39;.&#39; | tee file.json.json &gt;/dev/null`","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i/76256921#76256921","title":"jq to replace text directly on file (like sed -i)","body":"<p>in one line : <code>cat file.json | jq '.' | tee file.json.json &gt;/dev/null</code></p>\n"}],"owner":{"reputation":1393,"display_name":"Supra","link":"https://stackoverflow.com/users/5973420/supra"},"is_answered":true,"view_count":99650,"up_vote_count":137,"answer_count":11,"score":137,"last_activity_date":1684174488,"creation_date":1460442964,"last_edit_date":1661520097,"question_id":36565295,"body_markdown":"I have a json file that needs to be updated on a certain condition. \r\n\r\nSample json\r\n\r\n    {\r\n       &quot;Actions&quot; : [\r\n          {\r\n             &quot;value&quot; : &quot;1&quot;,\r\n             &quot;properties&quot; : {\r\n                &quot;name&quot; : &quot;abc&quot;,\r\n                &quot;age&quot; : &quot;2&quot;,\r\n                &quot;other &quot;: &quot;test1&quot;\r\n              }\r\n          },\r\n          {\r\n             &quot;value&quot; : &quot;2&quot;,\r\n             &quot;properties&quot; : {\r\n                &quot;name&quot; : &quot;def&quot;,\r\n                &quot;age&quot; : &quot;3&quot;,\r\n                &quot;other&quot; : &quot;test2&quot;\r\n              }\r\n          }\r\n       ]\r\n    }\r\n\r\nI am writing a script that makes use of Jq to match a value and update, as shown below\r\n\r\n    cat sample.json |  jq &#39;.Actions[] | select (.properties.age == &quot;3&quot;) .properties.other = &quot;no-test&quot;&#39;\r\n\r\nOutput (printed to terminal)\r\n\r\n    {\r\n      &quot;value&quot;: &quot;1&quot;,\r\n      &quot;properties&quot;: {\r\n        &quot;name&quot;: &quot;abc&quot;,\r\n        &quot;age&quot;: &quot;2&quot;,\r\n        &quot;other &quot;: &quot;test1&quot;\r\n      }\r\n    }\r\n    {\r\n      &quot;value&quot;: &quot;2&quot;,\r\n      &quot;properties&quot;: {\r\n        &quot;name&quot;: &quot;def&quot;,\r\n        &quot;age&quot;: &quot;3&quot;,\r\n        &quot;other&quot;: &quot;no-test&quot;\r\n      }\r\n    }\r\n\r\nWhile this command makes the needed change, it outputs the entire json on the terminal and does not make change to the file itself. \r\n\r\nPlease advise if there is an option to have jq make changes on the file directly (similar to sed -i).","link":"https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i","title":"jq to replace text directly on file (like sed -i)","body":"<p>I have a json file that needs to be updated on a certain condition. </p>\n\n<p>Sample json</p>\n\n<pre><code>{\n   \"Actions\" : [\n      {\n         \"value\" : \"1\",\n         \"properties\" : {\n            \"name\" : \"abc\",\n            \"age\" : \"2\",\n            \"other \": \"test1\"\n          }\n      },\n      {\n         \"value\" : \"2\",\n         \"properties\" : {\n            \"name\" : \"def\",\n            \"age\" : \"3\",\n            \"other\" : \"test2\"\n          }\n      }\n   ]\n}\n</code></pre>\n\n<p>I am writing a script that makes use of Jq to match a value and update, as shown below</p>\n\n<pre><code>cat sample.json |  jq '.Actions[] | select (.properties.age == \"3\") .properties.other = \"no-test\"'\n</code></pre>\n\n<p>Output (printed to terminal)</p>\n\n<pre><code>{\n  \"value\": \"1\",\n  \"properties\": {\n    \"name\": \"abc\",\n    \"age\": \"2\",\n    \"other \": \"test1\"\n  }\n}\n{\n  \"value\": \"2\",\n  \"properties\": {\n    \"name\": \"def\",\n    \"age\": \"3\",\n    \"other\": \"no-test\"\n  }\n}\n</code></pre>\n\n<p>While this command makes the needed change, it outputs the entire json on the terminal and does not make change to the file itself. </p>\n\n<p>Please advise if there is an option to have jq make changes on the file directly (similar to sed -i).</p>\n"},{"tags":["json","sorting","jq"],"answers":[{"owner":{"reputation":3895,"display_name":"karlos","link":"https://stackoverflow.com/users/4907881/karlos"},"is_accepted":false,"score":133,"creation_date":1432057702,"answer_id":30332672,"question_id":30331504,"share_link":"https://stackoverflow.com/a/30332672","body_markdown":"Ok with some assistance on the IRC channel I&#39;ve found an answer.\r\n\r\nBasically, it looks like this:\r\n\r\n```sh\r\njq \\\r\n  &#39;.components.rows|=sort_by(.id)|.components.rows[].properties|=sort_by(.name)&#39; \\\r\n  file.json &gt; out.json\r\n```\r\n\r\nSelect the right object,  \r\nwalk into arrays if needed,  \r\nthen `sort_by` a single value. \r\n\r\nI was trying `sort_by(.components.rows.id)` which failed.\r\n\r\n`|=` instead of `|` passes the values along instead of stripping them.","link":"https://stackoverflow.com/questions/30331504/how-to-sort-a-json-file-by-keys-and-values-of-those-keys-in-jq/30332672#30332672","title":"How to sort a json file by keys and values of those keys in jq","body":"<p>Ok with some assistance on the IRC channel I've found an answer.</p>\n<p>Basically, it looks like this:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>jq \\\n  '.components.rows|=sort_by(.id)|.components.rows[].properties|=sort_by(.name)' \\\n  file.json &gt; out.json\n</code></pre>\n<p>Select the right object,<br />\nwalk into arrays if needed,<br />\nthen <code>sort_by</code> a single value.</p>\n<p>I was trying <code>sort_by(.components.rows.id)</code> which failed.</p>\n<p><code>|=</code> instead of <code>|</code> passes the values along instead of stripping them.</p>\n"},{"owner":{"reputation":1408,"display_name":"Thibaud Ledent","link":"https://stackoverflow.com/users/9321274/thibaud-ledent"},"is_accepted":false,"score":111,"creation_date":1568897170,"answer_id":58011343,"question_id":30331504,"share_link":"https://stackoverflow.com/a/58011343","body_markdown":"This doesn&#39;t answer the question, but here is another way to sort by attributes/keys: \r\n\r\n    jq --sort-keys . my_file &gt; sorted_file\r\n-or-\r\n\r\n    jq -S . my_file &gt; sorted_file\r\n","link":"https://stackoverflow.com/questions/30331504/how-to-sort-a-json-file-by-keys-and-values-of-those-keys-in-jq/58011343#58011343","title":"How to sort a json file by keys and values of those keys in jq","body":"<p>This doesn't answer the question, but here is another way to sort by attributes/keys:</p>\n<pre><code>jq --sort-keys . my_file &gt; sorted_file\n</code></pre>\n<p>-or-</p>\n<pre><code>jq -S . my_file &gt; sorted_file\n</code></pre>\n"},{"owner":{"reputation":61,"display_name":"Black Rain","link":"https://stackoverflow.com/users/2452171/black-rain"},"is_accepted":false,"score":0,"creation_date":1676026875,"answer_id":75410201,"question_id":30331504,"share_link":"https://stackoverflow.com/a/75410201","body_markdown":"If you need it inside a JQ query go for:\r\n\r\n```\r\ndef sort_keys:\r\n\t(if (.|type!=&quot;object&quot;) then error(&quot;sort_keys: object expected&quot;) else . end)\r\n\t|(.|keys) as $keys\r\n\t|. as $o\r\n\t|reduce $keys[] as $i ({};.[$i]=$o[$i]);\r\n```","link":"https://stackoverflow.com/questions/30331504/how-to-sort-a-json-file-by-keys-and-values-of-those-keys-in-jq/75410201#75410201","title":"How to sort a json file by keys and values of those keys in jq","body":"<p>If you need it inside a JQ query go for:</p>\n<pre><code>def sort_keys:\n    (if (.|type!=&quot;object&quot;) then error(&quot;sort_keys: object expected&quot;) else . end)\n    |(.|keys) as $keys\n    |. as $o\n    |reduce $keys[] as $i ({};.[$i]=$o[$i]);\n</code></pre>\n"}],"owner":{"reputation":3895,"display_name":"karlos","link":"https://stackoverflow.com/users/4907881/karlos"},"is_answered":true,"view_count":121993,"up_vote_count":129,"answer_count":3,"score":129,"last_activity_date":1676026875,"creation_date":1432053922,"last_edit_date":1620855178,"question_id":30331504,"body_markdown":"We&#39;re building a website using the Pentaho CTools library, which has a graphical dashboard editor which writes out JSON-format files for part of the dashboard.\r\n\r\nI&#39;d like to apply a transform to these files before check-in to git in order to sort them by key and then by the value of certain keys. The purpose is to make diffs easier, since the editor has a habit of rearranging all of the json fields.\r\n\r\nFor example, we might have something like this:\r\n\r\n    {\r\n      &quot;components&quot;: {\r\n        &quot;rows&quot;: [\r\n          {\r\n            &quot;id&quot;: &quot;CHARTS&quot;,\r\n            &quot;name&quot;: &quot;Charts&quot;,\r\n            &quot;parent&quot;: &quot;UnIqEiD&quot;,\r\n            &quot;properties&quot;: [\r\n              {\r\n                &quot;name&quot;: &quot;Group&quot;,\r\n                &quot;type&quot;: &quot;Label&quot;,\r\n                &quot;value&quot;: &quot;Charts&quot;\r\n              }\r\n            ],\r\n            &quot;type&quot;: &quot;Label&quot;,\r\n            &quot;typeDesc&quot;: &quot;&lt;i&gt;Group&lt;/i&gt;&quot;\r\n          },\r\n          {\r\n            &quot;id&quot;: &quot;kjalajsdjf&quot;,\r\n            &quot;meta_cdwSupport&quot;: &quot;true&quot;,\r\n            &quot;parent&quot;: &quot;CHARTS&quot;,\r\n            &quot;properties&quot;: [\r\n              {\r\n                &quot;name&quot;: &quot;name&quot;,\r\n                &quot;type&quot;: &quot;Id&quot;,\r\n                &quot;value&quot;: &quot;Value1&quot;\r\n              },\r\n              {\r\n                &quot;name&quot;: &quot;title&quot;,\r\n                &quot;type&quot;: &quot;String&quot;,\r\n                &quot;value&quot;: &quot;Value2&quot;\r\n              },\r\n              {\r\n                &quot;name&quot;: &quot;listeners&quot;,\r\n                &quot;type&quot;: &quot;Listeners&quot;,\r\n                &quot;value&quot;: &quot;[]&quot;\r\n              },\r\n    ...\r\n\r\n\r\nWe are able to `jq --sort-keys` (http://stedolan.github.io/jq/) to sort all of the keys, but I&#39;m struggling to find out how to use the `sort_by` function to then sort certain specific elements by the value of certain keys (so, in the example above, sorting by `properties.name` for example. Any ideas?","link":"https://stackoverflow.com/questions/30331504/how-to-sort-a-json-file-by-keys-and-values-of-those-keys-in-jq","title":"How to sort a json file by keys and values of those keys in jq","body":"<p>We're building a website using the Pentaho CTools library, which has a graphical dashboard editor which writes out JSON-format files for part of the dashboard.</p>\n\n<p>I'd like to apply a transform to these files before check-in to git in order to sort them by key and then by the value of certain keys. The purpose is to make diffs easier, since the editor has a habit of rearranging all of the json fields.</p>\n\n<p>For example, we might have something like this:</p>\n\n<pre><code>{\n  \"components\": {\n    \"rows\": [\n      {\n        \"id\": \"CHARTS\",\n        \"name\": \"Charts\",\n        \"parent\": \"UnIqEiD\",\n        \"properties\": [\n          {\n            \"name\": \"Group\",\n            \"type\": \"Label\",\n            \"value\": \"Charts\"\n          }\n        ],\n        \"type\": \"Label\",\n        \"typeDesc\": \"&lt;i&gt;Group&lt;/i&gt;\"\n      },\n      {\n        \"id\": \"kjalajsdjf\",\n        \"meta_cdwSupport\": \"true\",\n        \"parent\": \"CHARTS\",\n        \"properties\": [\n          {\n            \"name\": \"name\",\n            \"type\": \"Id\",\n            \"value\": \"Value1\"\n          },\n          {\n            \"name\": \"title\",\n            \"type\": \"String\",\n            \"value\": \"Value2\"\n          },\n          {\n            \"name\": \"listeners\",\n            \"type\": \"Listeners\",\n            \"value\": \"[]\"\n          },\n...\n</code></pre>\n\n<p>We are able to <code>jq --sort-keys</code> (<a href=\"http://stedolan.github.io/jq/\" rel=\"noreferrer\">http://stedolan.github.io/jq/</a>) to sort all of the keys, but I'm struggling to find out how to use the <code>sort_by</code> function to then sort certain specific elements by the value of certain keys (so, in the example above, sorting by <code>properties.name</code> for example. Any ideas?</p>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":5502,"display_name":"aaaaaa123456789","link":"https://stackoverflow.com/users/2058293/aaaaaa123456789"},"is_accepted":true,"score":136,"creation_date":1472563337,"answer_id":39228718,"question_id":39228500,"share_link":"https://stackoverflow.com/a/39228718","body_markdown":"If you just want to extract the `name` fields, the command you&#39;re looking for is `jq &#39;.example.&quot;sub-example&quot; | .[] | .name&#39;`. If you want to keep the names in an array, wrap the whole `jq` expression in square brackets.","link":"https://stackoverflow.com/questions/39228500/extract-a-specific-field-from-json-output-using-jq/39228718#39228718","title":"Extract a specific field from JSON output using jq","body":"<p>If you just want to extract the <code>name</code> fields, the command you're looking for is <code>jq '.example.\"sub-example\" | .[] | .name'</code>. If you want to keep the names in an array, wrap the whole <code>jq</code> expression in square brackets.</p>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":45,"creation_date":1472569740,"answer_id":39231150,"question_id":39228500,"share_link":"https://stackoverflow.com/a/39231150","body_markdown":"Using jq 1.3 (and later), you can use the filter to extract the values:\r\n\r\n    .example[&quot;sub-example&quot;] | .[] | .name\r\n\r\nOr more compactly:\r\n\r\n    .example[&quot;sub-example&quot;][].name\r\n\r\nThese of course also work with later versions of jq as well.\r\n\r\n## Reading into shell variables\r\nRather than populating separate shell variables (which would require knowing in advance how many values there are), consider populating a shell array.  For example, using a bash shell with `mapfile` (aka `readarray`):\r\n```\r\nmapfile -t ary &lt; &lt;(&lt; json_file jq &#39;.example.&quot;sub-example&quot;[].name&#39;)\r\n```\r\n\r\nYou could alternatively use a shell `while` loop. Etc etc. There are many SO Qs on this topic.\r\n\r\n","link":"https://stackoverflow.com/questions/39228500/extract-a-specific-field-from-json-output-using-jq/39231150#39231150","title":"Extract a specific field from JSON output using jq","body":"<p>Using jq 1.3 (and later), you can use the filter to extract the values:</p>\n<pre><code>.example[&quot;sub-example&quot;] | .[] | .name\n</code></pre>\n<p>Or more compactly:</p>\n<pre><code>.example[&quot;sub-example&quot;][].name\n</code></pre>\n<p>These of course also work with later versions of jq as well.</p>\n<h2>Reading into shell variables</h2>\n<p>Rather than populating separate shell variables (which would require knowing in advance how many values there are), consider populating a shell array.  For example, using a bash shell with <code>mapfile</code> (aka <code>readarray</code>):</p>\n<pre><code>mapfile -t ary &lt; &lt;(&lt; json_file jq '.example.&quot;sub-example&quot;[].name')\n</code></pre>\n<p>You could alternatively use a shell <code>while</code> loop. Etc etc. There are many SO Qs on this topic.</p>\n"},{"owner":{"reputation":839,"accept_rate":29,"display_name":"Mandar Pathak","link":"https://stackoverflow.com/users/623851/mandar-pathak"},"is_accepted":false,"score":7,"creation_date":1573510905,"answer_id":58809456,"question_id":39228500,"share_link":"https://stackoverflow.com/a/58809456","body_markdown":"It&#39;s been a few years and I recently had to do this myself so thought I should post another way here. \r\n\r\nYou can also use `map()` to extract specific fields. e.g.\r\n```\r\n.example.&quot;sub-example&quot;|map(.name)\r\n```\r\nRef: https://jqplay.org/s/N6TboUkELM","link":"https://stackoverflow.com/questions/39228500/extract-a-specific-field-from-json-output-using-jq/58809456#58809456","title":"Extract a specific field from JSON output using jq","body":"<p>It's been a few years and I recently had to do this myself so thought I should post another way here. </p>\n\n<p>You can also use <code>map()</code> to extract specific fields. e.g.</p>\n\n<pre><code>.example.\"sub-example\"|map(.name)\n</code></pre>\n\n<p>Ref: <a href=\"https://jqplay.org/s/N6TboUkELM\" rel=\"noreferrer\">https://jqplay.org/s/N6TboUkELM</a></p>\n"}],"owner":{"reputation":1707,"accept_rate":90,"display_name":"rmb","link":"https://stackoverflow.com/users/4949839/rmb"},"is_answered":true,"view_count":159036,"up_vote_count":121,"accepted_answer_id":39228718,"answer_count":3,"score":121,"last_activity_date":1675288722,"creation_date":1472562791,"last_edit_date":1525709428,"question_id":39228500,"body_markdown":"I have a JSON output as follows:\r\n\r\n    {\r\n      &quot;example&quot;: {\r\n        &quot;sub-example&quot;: [\r\n          {\r\n            &quot;name&quot;: &quot;123-345&quot;,\r\n            &quot;tag&quot; : 100\r\n          },\r\n          {\r\n            &quot;name&quot;: &quot;234-456&quot;,\r\n            &quot;tag&quot; : 100\r\n          },\r\n          {\r\n            &quot;name&quot;: &quot;4a7-a07a5&quot;,\r\n            &quot;tag&quot; : 100\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\nI want to extract the values of the three &quot;name&quot; fields and store it in three variables.\r\n\r\nI tried `cat json_file | jq &#39;.[&quot;example.sub-example.name&quot;]&#39;` to extract the value of the &quot;name&quot; field but that doesn&#39;t work.\r\n\r\nCan anyone tell me how to achieve this using jq (or some other method)?","link":"https://stackoverflow.com/questions/39228500/extract-a-specific-field-from-json-output-using-jq","title":"Extract a specific field from JSON output using jq","body":"<p>I have a JSON output as follows:</p>\n\n<pre><code>{\n  \"example\": {\n    \"sub-example\": [\n      {\n        \"name\": \"123-345\",\n        \"tag\" : 100\n      },\n      {\n        \"name\": \"234-456\",\n        \"tag\" : 100\n      },\n      {\n        \"name\": \"4a7-a07a5\",\n        \"tag\" : 100\n      }\n    ]\n  }\n}\n</code></pre>\n\n<p>I want to extract the values of the three \"name\" fields and store it in three variables.</p>\n\n<p>I tried <code>cat json_file | jq '.[\"example.sub-example.name\"]'</code> to extract the value of the \"name\" field but that doesn't work.</p>\n\n<p>Can anyone tell me how to achieve this using jq (or some other method)?</p>\n"},{"tags":["json","command-line","jq"],"answers":[{"owner":{"reputation":12409,"accept_rate":89,"display_name":"max taldykin","link":"https://stackoverflow.com/users/147057/max-taldykin"},"is_accepted":true,"score":187,"creation_date":1386665770,"answer_id":20489951,"question_id":19573517,"share_link":"https://stackoverflow.com/a/20489951","body_markdown":"You can use the [select][1] function to get only required entries:\r\n\r\n    jq &#39;select(.geo != null)&#39; all.json\r\n\r\n\r\n  [1]: https://stedolan.github.io/jq/manual/#select(boolean_expression)","link":"https://stackoverflow.com/questions/19573517/jq-conditional-output/20489951#20489951","title":"jq Conditional output","body":"<p>You can use the <a href=\"https://stedolan.github.io/jq/manual/#select(boolean_expression)\">select</a> function to get only required entries:</p>\n\n<pre><code>jq 'select(.geo != null)' all.json\n</code></pre>\n"}],"owner":{"reputation":19944,"accept_rate":89,"display_name":"clwen","link":"https://stackoverflow.com/users/477865/clwen"},"is_answered":true,"view_count":116657,"up_vote_count":116,"accepted_answer_id":20489951,"answer_count":1,"score":116,"last_activity_date":1457767108,"creation_date":1382638551,"last_edit_date":1404458459,"question_id":19573517,"body_markdown":"I&#39;m using [jq][1] to play with json. I was wondering how to conditionally print something in that.\r\n\r\nSay I am interested in a field call `geo`. I used the following command and find out there is only one entry whose `geo` is `null`:\r\n\r\n    % cat all.json | jq &#39;.geo != null&#39; | sort | uniq -c              \r\n       1 false\r\n    6891 true\r\n\r\nHow can I print out that entry only without printing everything else?\r\n\r\nDidn&#39;t see something like `print` command in the manual. And this doesn&#39;t work: `cat all.json | jq &#39;if .place == null then . end&#39;`. `jq` complained about syntax error.\r\n\r\n\r\n  [1]: http://stedolan.github.io/jq/","link":"https://stackoverflow.com/questions/19573517/jq-conditional-output","title":"jq Conditional output","body":"<p>I'm using <a href=\"http://stedolan.github.io/jq/\">jq</a> to play with json. I was wondering how to conditionally print something in that.</p>\n\n<p>Say I am interested in a field call <code>geo</code>. I used the following command and find out there is only one entry whose <code>geo</code> is <code>null</code>:</p>\n\n<pre><code>% cat all.json | jq '.geo != null' | sort | uniq -c              \n   1 false\n6891 true\n</code></pre>\n\n<p>How can I print out that entry only without printing everything else?</p>\n\n<p>Didn't see something like <code>print</code> command in the manual. And this doesn't work: <code>cat all.json | jq 'if .place == null then . end'</code>. <code>jq</code> complained about syntax error.</p>\n"},{"tags":["arrays","json","bash","jq"],"answers":[{"owner":{"reputation":79378,"accept_rate":100,"display_name":"Inian","link":"https://stackoverflow.com/users/5291015/inian"},"is_accepted":true,"score":167,"creation_date":1487160081,"answer_id":42248841,"question_id":42245288,"share_link":"https://stackoverflow.com/a/42248841","body_markdown":"The `|= .+ ` part in the filter adds a new element to the existing array. You can use `jq` with filter like:\r\n\r\n    jq &#39;.data.messages[3] |= . + {\r\n          &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, \r\n          &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \r\n          &quot;status&quot;: &quot;OKKK&quot;, \r\n          &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\r\n    }&#39; inputJson\r\n\r\nTo avoid using the hardcoded length value `3` and dynamically add a new element, use `. | length` which returns the length, which can be used as the next array index, i.e.,\r\n\r\n    jq &#39;.data.messages[.data.messages| length] |= . + {\r\n          &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, \r\n          &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \r\n          &quot;status&quot;: &quot;OKKK&quot;, \r\n          &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\r\n    }&#39; inputJson\r\n\r\n(or) as per peak&#39;s suggestion in the comments, using the `+=` operator alone\r\n\r\n    jq &#39;.data.messages += [{\r\n         &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\r\n         &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \r\n         &quot;status&quot;: &quot;OKKK&quot;, \r\n         &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\r\n    }]&#39;\r\n\r\nwhich produces the output you need:\r\n\r\n    {\r\n      &quot;report&quot;: &quot;1.0&quot;,\r\n      &quot;data&quot;: {\r\n        &quot;date&quot;: &quot;2010-01-07&quot;,\r\n        &quot;messages&quot;: [\r\n          {\r\n            &quot;date&quot;: &quot;2010-01-07T19:58:42.949Z&quot;,\r\n            &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n            &quot;status&quot;: &quot;OK&quot;,\r\n            &quot;message&quot;: &quot;metadata loaded into iRODS successfully&quot;\r\n          },\r\n          {\r\n            &quot;date&quot;: &quot;2010-01-07T20:22:46.949Z&quot;,\r\n            &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n            &quot;status&quot;: &quot;NOK&quot;,\r\n            &quot;message&quot;: &quot;metadata duplicated into iRODS&quot;\r\n          },\r\n          {\r\n            &quot;date&quot;: &quot;2010-01-07T22:11:55.949Z&quot;,\r\n            &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n            &quot;status&quot;: &quot;NOK&quot;,\r\n            &quot;message&quot;: &quot;metadata was not validated by XSD schema&quot;\r\n          },\r\n          {\r\n            &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\r\n            &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n            &quot;status&quot;: &quot;OKKK&quot;,\r\n            &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\nUse [jq-play](https://jqplay.org/) to dry-run your `jq-filter` and optimize any way you want.","link":"https://stackoverflow.com/questions/42245288/add-new-element-to-existing-json-array-with-jq/42248841#42248841","title":"Add new element to existing JSON array with jq","body":"<p>The <code>|= .+ </code> part in the filter adds a new element to the existing array. You can use <code>jq</code> with filter like:</p>\n<pre><code>jq '.data.messages[3] |= . + {\n      &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, \n      &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \n      &quot;status&quot;: &quot;OKKK&quot;, \n      &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\n}' inputJson\n</code></pre>\n<p>To avoid using the hardcoded length value <code>3</code> and dynamically add a new element, use <code>. | length</code> which returns the length, which can be used as the next array index, i.e.,</p>\n<pre><code>jq '.data.messages[.data.messages| length] |= . + {\n      &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, \n      &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \n      &quot;status&quot;: &quot;OKKK&quot;, \n      &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\n}' inputJson\n</code></pre>\n<p>(or) as per peak's suggestion in the comments, using the <code>+=</code> operator alone</p>\n<pre><code>jq '.data.messages += [{\n     &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\n     &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, \n     &quot;status&quot;: &quot;OKKK&quot;, \n     &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\n}]'\n</code></pre>\n<p>which produces the output you need:</p>\n<pre><code>{\n  &quot;report&quot;: &quot;1.0&quot;,\n  &quot;data&quot;: {\n    &quot;date&quot;: &quot;2010-01-07&quot;,\n    &quot;messages&quot;: [\n      {\n        &quot;date&quot;: &quot;2010-01-07T19:58:42.949Z&quot;,\n        &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\n        &quot;status&quot;: &quot;OK&quot;,\n        &quot;message&quot;: &quot;metadata loaded into iRODS successfully&quot;\n      },\n      {\n        &quot;date&quot;: &quot;2010-01-07T20:22:46.949Z&quot;,\n        &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\n        &quot;status&quot;: &quot;NOK&quot;,\n        &quot;message&quot;: &quot;metadata duplicated into iRODS&quot;\n      },\n      {\n        &quot;date&quot;: &quot;2010-01-07T22:11:55.949Z&quot;,\n        &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\n        &quot;status&quot;: &quot;NOK&quot;,\n        &quot;message&quot;: &quot;metadata was not validated by XSD schema&quot;\n      },\n      {\n        &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\n        &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\n        &quot;status&quot;: &quot;OKKK&quot;,\n        &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Use <a href=\"https://jqplay.org/\" rel=\"noreferrer\">jq-play</a> to dry-run your <code>jq-filter</code> and optimize any way you want.</p>\n"},{"owner":{"reputation":104330,"display_name":"peak","link":"https://stackoverflow.com/users/997358/peak"},"is_accepted":false,"score":68,"creation_date":1487184636,"answer_id":42257772,"question_id":42245288,"share_link":"https://stackoverflow.com/a/42257772","body_markdown":"Rather than using `|=`, consider using `+=`:\r\n\r\n    .data.messages += [{&quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\r\n       &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n       &quot;status&quot;: &quot;OKKK&quot;, &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;}]\r\n\r\n### Prepend\r\nOn the other hand, if (as @NicHuang asked) you want to add the JSON object to the beginning of the array, you could use the pattern:\r\n\r\n     .data.messages |= [ _ ] + .\r\n\r\n \r\n\r\n\r\n","link":"https://stackoverflow.com/questions/42245288/add-new-element-to-existing-json-array-with-jq/42257772#42257772","title":"Add new element to existing JSON array with jq","body":"<p>Rather than using <code>|=</code>, consider using <code>+=</code>:</p>\n\n<pre><code>.data.messages += [{\"date\": \"2010-01-07T19:55:99.999Z\",\n   \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n   \"status\": \"OKKK\", \"message\": \"metadata loaded into iRODS successfullyyyyy\"}]\n</code></pre>\n\n<h3>Prepend</h3>\n\n<p>On the other hand, if (as @NicHuang asked) you want to add the JSON object to the beginning of the array, you could use the pattern:</p>\n\n<pre><code> .data.messages |= [ _ ] + .\n</code></pre>\n"},{"owner":{"reputation":3168,"display_name":"pr-pal","link":"https://stackoverflow.com/users/5785743/pr-pal"},"is_accepted":false,"score":43,"creation_date":1566052257,"answer_id":57537190,"question_id":42245288,"share_link":"https://stackoverflow.com/a/57537190","body_markdown":"Summary:   &quot;. +&quot;  is your saviour\r\n\r\nDetails: \r\n\r\nFor adding an entry to a list: You can append [list1] + [list2]  (and not [list]  + data)\r\n\r\n    $ echo &#39;[ &quot;data1&quot; ]&#39; | jq &#39;. + [ &quot;data2&quot; ]&#39;\r\n    [\r\n      &quot;data1&quot;,\r\n      &quot;data2&quot;\r\n    ]\r\n\r\n    $ echo &#39;[ {&quot;key1&quot;: &quot;value1&quot;} ]&#39; | jq &#39;. + [{&quot;key2&quot;: &quot;value2&quot;}]&#39;\r\n    [\r\n      {\r\n        &quot;key1&quot;: &quot;value1&quot;\r\n      },\r\n      {\r\n        &quot;key2&quot;: &quot;value2&quot;\r\n      }\r\n    ]\r\n\r\n\r\nFor adding a key/value to a dictionary:\r\n\r\n    $ echo &#39;{&quot;key1&quot;: &quot;value1&quot;}&#39; | jq &#39;. + {&quot;key2&quot;: &quot;value2&quot;}&#39;\r\n    {\r\n      &quot;key1&quot;: &quot;value1&quot;,\r\n      &quot;key2&quot;: &quot;value2&quot;\r\n    }\r\n\r\n\r\nReferences:\r\n\r\nhttps://gist.github.com/joar/776b7d176196592ed5d8\r\n\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/42245288/add-new-element-to-existing-json-array-with-jq/57537190#57537190","title":"Add new element to existing JSON array with jq","body":"<p>Summary:   \". +\"  is your saviour</p>\n\n<p>Details: </p>\n\n<p>For adding an entry to a list: You can append [list1] + [list2]  (and not [list]  + data)</p>\n\n<pre><code>$ echo '[ \"data1\" ]' | jq '. + [ \"data2\" ]'\n[\n  \"data1\",\n  \"data2\"\n]\n\n$ echo '[ {\"key1\": \"value1\"} ]' | jq '. + [{\"key2\": \"value2\"}]'\n[\n  {\n    \"key1\": \"value1\"\n  },\n  {\n    \"key2\": \"value2\"\n  }\n]\n</code></pre>\n\n<p>For adding a key/value to a dictionary:</p>\n\n<pre><code>$ echo '{\"key1\": \"value1\"}' | jq '. + {\"key2\": \"value2\"}'\n{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}\n</code></pre>\n\n<p>References:</p>\n\n<p><a href=\"https://gist.github.com/joar/776b7d176196592ed5d8\" rel=\"noreferrer\">https://gist.github.com/joar/776b7d176196592ed5d8</a></p>\n"}],"owner":{"reputation":6883,"accept_rate":37,"display_name":"Felipe","link":"https://stackoverflow.com/users/2096986/felipe"},"is_answered":true,"view_count":181095,"up_vote_count":109,"accepted_answer_id":42248841,"answer_count":3,"score":109,"last_activity_date":1670939167,"creation_date":1487150672,"last_edit_date":1613709187,"question_id":42245288,"body_markdown":"I want to append an element to an array in a JSON file using the `jq``add` command, but it&#39;s not working. \r\n\r\n`report-2017-01-07.json` file:\r\n\r\n    {  \r\n       &quot;report&quot;: &quot;1.0&quot;,\r\n       &quot;data&quot;: {  \r\n          &quot;date&quot;: &quot;2010-01-07&quot;,\r\n          &quot;messages&quot;: [  \r\n             {  \r\n                &quot;date&quot;: &quot;2010-01-07T19:58:42.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;OK&quot;,\r\n                &quot;message&quot;: &quot;metadata loaded into iRODS successfully&quot;\r\n             },\r\n             {  \r\n                &quot;date&quot;: &quot;2010-01-07T20:22:46.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;NOK&quot;,\r\n                &quot;message&quot;: &quot;metadata duplicated into iRODS&quot;\r\n             },\r\n             {  \r\n                &quot;date&quot;: &quot;2010-01-07T22:11:55.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;NOK&quot;,\r\n                &quot;message&quot;: &quot;metadata was not validated by XSD schema&quot;\r\n             }\r\n          ]\r\n       }\r\n    }\r\n\r\n\r\n\r\nI am using this command:\r\n\r\n    $ cat report-2017-01-07.json \r\n    | jq -s &#39;.data.messages {&quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, &quot;status&quot;: &quot;OKKK&quot;, &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;}&#39;\r\n    jq: error: syntax error, unexpected &#39;{&#39;, expecting $end (Unix shell quoting issues?) at &lt;top-level&gt;, line 1:\r\n    .data.messages {&quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;, &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;, &quot;status&quot;: &quot;OKKK&quot;, &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;}               \r\n    jq: 1 compile error\r\n\r\n\r\nHere&#39;s how I want the output to look:\r\n\r\n    {\r\n        &quot;report&quot;: &quot;1.0&quot;,\r\n        &quot;data&quot;: {\r\n            &quot;date&quot;: &quot;2010-01-07&quot;,\r\n            &quot;messages&quot;: [{\r\n                &quot;date&quot;: &quot;2010-01-07T19:58:42.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;OK&quot;,\r\n                &quot;message&quot;: &quot;metadata loaded into iRODS successfully&quot;\r\n            }, {\r\n                &quot;date&quot;: &quot;2010-01-07T20:22:46.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;NOK&quot;,\r\n                &quot;message&quot;: &quot;metadata duplicated into iRODS&quot;\r\n            }, {\r\n                &quot;date&quot;: &quot;2010-01-07T22:11:55.949Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;NOK&quot;,\r\n                &quot;message&quot;: &quot;metadata was not validated by XSD schema&quot;\r\n            }, {\r\n                &quot;date&quot;: &quot;2010-01-07T19:55:99.999Z&quot;,\r\n                &quot;xml&quot;: &quot;xml_samplesheet_2017_01_07_run_09.xml&quot;,\r\n                &quot;status&quot;: &quot;OKKKKKKK&quot;,\r\n                &quot;message&quot;: &quot;metadata loaded into iRODS successfullyyyyy&quot;\r\n            }]\r\n        }\r\n    }","link":"https://stackoverflow.com/questions/42245288/add-new-element-to-existing-json-array-with-jq","title":"Add new element to existing JSON array with jq","body":"<p>I want to append an element to an array in a JSON file using the <code>jq``add</code> command, but it's not working. </p>\n\n<p><code>report-2017-01-07.json</code> file:</p>\n\n<pre><code>{  \n   \"report\": \"1.0\",\n   \"data\": {  \n      \"date\": \"2010-01-07\",\n      \"messages\": [  \n         {  \n            \"date\": \"2010-01-07T19:58:42.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"OK\",\n            \"message\": \"metadata loaded into iRODS successfully\"\n         },\n         {  \n            \"date\": \"2010-01-07T20:22:46.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"NOK\",\n            \"message\": \"metadata duplicated into iRODS\"\n         },\n         {  \n            \"date\": \"2010-01-07T22:11:55.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"NOK\",\n            \"message\": \"metadata was not validated by XSD schema\"\n         }\n      ]\n   }\n}\n</code></pre>\n\n<p>I am using this command:</p>\n\n<pre><code>$ cat report-2017-01-07.json \n| jq -s '.data.messages {\"date\": \"2010-01-07T19:55:99.999Z\", \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\", \"status\": \"OKKK\", \"message\": \"metadata loaded into iRODS successfullyyyyy\"}'\njq: error: syntax error, unexpected '{', expecting $end (Unix shell quoting issues?) at &lt;top-level&gt;, line 1:\n.data.messages {\"date\": \"2010-01-07T19:55:99.999Z\", \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\", \"status\": \"OKKK\", \"message\": \"metadata loaded into iRODS successfullyyyyy\"}               \njq: 1 compile error\n</code></pre>\n\n<p>Here's how I want the output to look:</p>\n\n<pre><code>{\n    \"report\": \"1.0\",\n    \"data\": {\n        \"date\": \"2010-01-07\",\n        \"messages\": [{\n            \"date\": \"2010-01-07T19:58:42.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"OK\",\n            \"message\": \"metadata loaded into iRODS successfully\"\n        }, {\n            \"date\": \"2010-01-07T20:22:46.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"NOK\",\n            \"message\": \"metadata duplicated into iRODS\"\n        }, {\n            \"date\": \"2010-01-07T22:11:55.949Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"NOK\",\n            \"message\": \"metadata was not validated by XSD schema\"\n        }, {\n            \"date\": \"2010-01-07T19:55:99.999Z\",\n            \"xml\": \"xml_samplesheet_2017_01_07_run_09.xml\",\n            \"status\": \"OKKKKKKK\",\n            \"message\": \"metadata loaded into iRODS successfullyyyyy\"\n        }]\n    }\n}\n</code></pre>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":4051,"accept_rate":20,"display_name":"AXE Labs","link":"https://stackoverflow.com/users/632827/axe-labs"},"is_accepted":false,"score":104,"creation_date":1454432907,"answer_id":35365770,"question_id":35365769,"share_link":"https://stackoverflow.com/a/35365770","body_markdown":"The jq command has the [tostring][1] function.  It took me a while to learn to use it by trial and error.  Here is how to use it:\r\n\r\n    jq -r &#39;.[] | [ .string, .number|tostring ] | join(&quot;: &quot;)&#39; &lt;&lt;&lt; &#39;\r\n    [{ &quot;number&quot;: 9, &quot;string&quot;: &quot;nine&quot;},\r\n     { &quot;number&quot;: 4, &quot;string&quot;: &quot;four&quot;}]\r\n    &#39;\r\n    nine: 9\r\n    four: 4\r\n\r\n\r\n  [1]: https://stedolan.github.io/jq/manual/#tostring","link":"https://stackoverflow.com/questions/35365769/how-do-i-use-jq-to-convert-number-to-string/35365770#35365770","title":"How do I use jq to convert number to string?","body":"<p>The jq command has the <a href=\"https://stedolan.github.io/jq/manual/#tostring\">tostring</a> function.  It took me a while to learn to use it by trial and error.  Here is how to use it:</p>\n\n<pre><code>jq -r '.[] | [ .string, .number|tostring ] | join(\": \")' &lt;&lt;&lt; '\n[{ \"number\": 9, \"string\": \"nine\"},\n { \"number\": 4, \"string\": \"four\"}]\n'\nnine: 9\nfour: 4\n</code></pre>\n"},{"owner":{"reputation":793,"display_name":"Andrew Neilson","link":"https://stackoverflow.com/users/1846221/andrew-neilson"},"is_accepted":false,"score":66,"creation_date":1507665115,"answer_id":46674867,"question_id":35365769,"share_link":"https://stackoverflow.com/a/46674867","body_markdown":"An alternative and arguably more intuitive format is:\r\n\r\n    jq &#39;.[] | .string + &quot;: &quot; + (.number|tostring)&#39; &lt;&lt;&lt; ...\r\n\r\nWorth noting the need for parens around `.number|tostring`.","link":"https://stackoverflow.com/questions/35365769/how-do-i-use-jq-to-convert-number-to-string/46674867#46674867","title":"How do I use jq to convert number to string?","body":"<p>An alternative and arguably more intuitive format is:</p>\n\n<pre><code>jq '.[] | .string + \": \" + (.number|tostring)' &lt;&lt;&lt; ...\n</code></pre>\n\n<p>Worth noting the need for parens around <code>.number|tostring</code>.</p>\n"},{"owner":{"reputation":1679,"display_name":"manatwork","link":"https://stackoverflow.com/users/662504/manatwork"},"is_accepted":false,"score":16,"creation_date":1565352722,"answer_id":57429821,"question_id":35365769,"share_link":"https://stackoverflow.com/a/57429821","body_markdown":"For such simple case [string interpolation](https://stedolan.github.io/jq/manual/#Stringinterpolation-\\%28foo%29)&#39;s implicit casting to string will do it:\r\n\r\n&lt;!-- language: lang-jq --&gt;\r\n\r\n    .[] | &quot;\\( .string ): \\( .number )&quot;\r\n\r\nSee it in action on [jq‣play](https://jqplay.org/s/o3ki4PNtPo).\r\n","link":"https://stackoverflow.com/questions/35365769/how-do-i-use-jq-to-convert-number-to-string/57429821#57429821","title":"How do I use jq to convert number to string?","body":"<p>For such simple case <a href=\"https://stedolan.github.io/jq/manual/#Stringinterpolation-%28foo%29\" rel=\"noreferrer\">string interpolation</a>'s implicit casting to string will do it:</p>\n<pre class=\"lang-jq prettyprint-override\"><code>.[] | &quot;\\( .string ): \\( .number )&quot;\n</code></pre>\n<p>See it in action on <a href=\"https://jqplay.org/s/o3ki4PNtPo\" rel=\"noreferrer\">jq‣play</a>.</p>\n"}],"owner":{"reputation":4051,"accept_rate":20,"display_name":"AXE Labs","link":"https://stackoverflow.com/users/632827/axe-labs"},"is_answered":true,"view_count":91814,"up_vote_count":105,"answer_count":3,"score":105,"last_activity_date":1642066776,"creation_date":1454432907,"last_edit_date":1642066776,"question_id":35365769,"body_markdown":"Given the following jq command and Json:\r\n\r\n\r\n    jq &#39;.[]|[.string,.number]|join(&quot;: &quot;)&#39; &lt;&lt;&lt; &#39;\r\n    [\r\n      {\r\n        &quot;number&quot;: 3,\r\n        &quot;string&quot;: &quot;threee&quot;\r\n      },\r\n      {\r\n        &quot;number&quot;: 7,\r\n        &quot;string&quot;: &quot;seven&quot;\r\n      }\r\n    ]\r\n    &#39;\r\nI&#39;m trying to format the output as:\r\n\r\n    three: 3\r\n    seven: 7\r\n\r\nUnfortunately, my attempt is resulting in the following error:\r\n\r\n&gt; jq: error: string and number cannot be added\r\n\r\nHow do I convert the number to string so both can be joined?","link":"https://stackoverflow.com/questions/35365769/how-do-i-use-jq-to-convert-number-to-string","title":"How do I use jq to convert number to string?","body":"<p>Given the following jq command and Json:</p>\n\n<pre><code>jq '.[]|[.string,.number]|join(\": \")' &lt;&lt;&lt; '\n[\n  {\n    \"number\": 3,\n    \"string\": \"threee\"\n  },\n  {\n    \"number\": 7,\n    \"string\": \"seven\"\n  }\n]\n'\n</code></pre>\n\n<p>I'm trying to format the output as:</p>\n\n<pre><code>three: 3\nseven: 7\n</code></pre>\n\n<p>Unfortunately, my attempt is resulting in the following error:</p>\n\n<blockquote>\n  <p>jq: error: string and number cannot be added</p>\n</blockquote>\n\n<p>How do I convert the number to string so both can be joined?</p>\n"},{"tags":["bash","jq","git-bash"],"answers":[{"owner":{"reputation":1238870,"accept_rate":100,"display_name":"VonC","link":"https://stackoverflow.com/users/6309/vonc"},"is_accepted":true,"score":87,"creation_date":1546071756,"answer_id":53967916,"question_id":53967693,"share_link":"https://stackoverflow.com/a/53967916","body_markdown":"Using `jq-win64.exe` from [`github.com/stedolan/jq/releases`][1], I get\r\n\r\n    vonc@voncav MINGW64 /d/prgs/dl\r\n    $ ./jq-win64.exe --version\r\n    jq-1.6\r\n    \r\n    vonc@voncav MINGW64 /d/prgs/dl\r\n    $ echo &#39;{&quot;foo&quot;: 0}&#39; | ./jq-win64.exe .\r\n    {\r\n      &quot;foo&quot;: 0\r\n    }\r\n\r\nSo it does work, but it then depends on the json document you are parsing with it.  \r\nIf that json document is not well-formed, that would generate the error you see.\r\n\r\nIn your bash session, you can define (or add to your `~/.bashrc`) an alias:\r\n\r\n    alias jq=/path/to/jq-win64.exe\r\n\r\nThat way, you don&#39;t need to use `./jq`, but directly `jq`.\r\n\r\n    $ echo &#39;{&quot;foo&quot;: 0}&#39; | jq\r\n\r\nIn my case:\r\n\r\n    vonc@voncav:/$ alias jq=/mnt/d/dwnl/jq-win64.exe\r\n    vonc@voncav:/$ echo &#39;{&quot;foo&quot;: 0}&#39; | jq\r\n    {\r\n      &quot;foo&quot;: 0\r\n    }\r\n\r\n  [1]: https://github.com/stedolan/jq/releases\r\n\r\n\r\n","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/53967916#53967916","title":"How to run jq from gitbash in windows?","body":"<p>Using <code>jq-win64.exe</code> from <a href=\"https://github.com/stedolan/jq/releases\" rel=\"noreferrer\"><code>github.com/stedolan/jq/releases</code></a>, I get</p>\n\n<pre><code>vonc@voncav MINGW64 /d/prgs/dl\n$ ./jq-win64.exe --version\njq-1.6\n\nvonc@voncav MINGW64 /d/prgs/dl\n$ echo '{\"foo\": 0}' | ./jq-win64.exe .\n{\n  \"foo\": 0\n}\n</code></pre>\n\n<p>So it does work, but it then depends on the json document you are parsing with it.<br>\nIf that json document is not well-formed, that would generate the error you see.</p>\n\n<p>In your bash session, you can define (or add to your <code>~/.bashrc</code>) an alias:</p>\n\n<pre><code>alias jq=/path/to/jq-win64.exe\n</code></pre>\n\n<p>That way, you don't need to use <code>./jq</code>, but directly <code>jq</code>.</p>\n\n<pre><code>$ echo '{\"foo\": 0}' | jq\n</code></pre>\n\n<p>In my case:</p>\n\n<pre><code>vonc@voncav:/$ alias jq=/mnt/d/dwnl/jq-win64.exe\nvonc@voncav:/$ echo '{\"foo\": 0}' | jq\n{\n  \"foo\": 0\n}\n</code></pre>\n"},{"owner":{"reputation":2344,"accept_rate":59,"display_name":"kidbrax","link":"https://stackoverflow.com/users/25999/kidbrax"},"is_accepted":false,"score":2,"creation_date":1565896026,"answer_id":57514888,"question_id":53967693,"share_link":"https://stackoverflow.com/a/57514888","body_markdown":"I just downloaded the binary to `%HOMEPATH%/bin/jq-win64` and it worked right away via `jq`\r\n\r\n```\r\n$ mkdir -p $HOMEPATH/bin\r\n$ curl -L -o $HOMEPATH/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\r\n```\r\n\r\ntest\r\n```\r\n$ jq --version\r\njq-1.6\r\n```\r\n\r\n","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/57514888#57514888","title":"How to run jq from gitbash in windows?","body":"<p>I just downloaded the binary to <code>%HOMEPATH%/bin/jq-win64</code> and it worked right away via <code>jq</code></p>\n<pre><code>$ mkdir -p $HOMEPATH/bin\n$ curl -L -o $HOMEPATH/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\n</code></pre>\n<p>test</p>\n<pre><code>$ jq --version\njq-1.6\n</code></pre>\n"},{"owner":{"reputation":16170,"accept_rate":87,"display_name":"bryanbcook","link":"https://stackoverflow.com/users/30809/bryanbcook"},"is_accepted":false,"score":60,"creation_date":1590078467,"answer_id":61939199,"question_id":53967693,"share_link":"https://stackoverflow.com/a/61939199","body_markdown":"I hate answers that say you need another to use another tool to download, but using https://chocolatey.org/ made this incredibly simple for me.\r\n\r\nFrom an elevated command-prompt, run:\r\n```\r\nchoco install jq\r\n```\r\n\r\n```jq``` magically works from bash going forward.\r\n\r\n","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/61939199#61939199","title":"How to run jq from gitbash in windows?","body":"<p>I hate answers that say you need another to use another tool to download, but using <a href=\"https://chocolatey.org/\" rel=\"noreferrer\">https://chocolatey.org/</a> made this incredibly simple for me.</p>\n\n<p>From an elevated command-prompt, run:</p>\n\n<pre><code>choco install jq\n</code></pre>\n\n<p><code>jq</code> magically works from bash going forward.</p>\n"},{"owner":{"reputation":51,"display_name":"Marc vA","link":"https://stackoverflow.com/users/3811235/marc-va"},"is_accepted":false,"score":4,"creation_date":1593178017,"answer_id":62595763,"question_id":53967693,"share_link":"https://stackoverflow.com/a/62595763","body_markdown":"Instead of using [chocolatey](https://chocolatey.org/packages/jq) (with elevated rights) you could also use [scoop.sh](https://scoop.sh/):\r\n\r\n```bash\r\nscoop install jq\r\n```","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/62595763#62595763","title":"How to run jq from gitbash in windows?","body":"<p>Instead of using <a href=\"https://chocolatey.org/packages/jq\" rel=\"nofollow noreferrer\">chocolatey</a> (with elevated rights) you could also use <a href=\"https://scoop.sh/\" rel=\"nofollow noreferrer\">scoop.sh</a>:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>scoop install jq\n</code></pre>\n"},{"owner":{"reputation":7811,"accept_rate":67,"display_name":"MrSimpleMind","link":"https://stackoverflow.com/users/1223532/mrsimplemind"},"is_accepted":false,"score":136,"creation_date":1604050831,"answer_id":64605901,"question_id":53967693,"share_link":"https://stackoverflow.com/a/64605901","body_markdown":"**Easiest solution and always latest version:**\r\n\r\n____\r\nrun this curl in your gitbash:\r\n\r\n    curl -L -o /usr/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\r\n\r\n\r\nor manually save the `jq-win64.exe` in link above as `jq.exe` to your `/usr/bin` (which is in your git bash installation folder)\r\n\r\n(if you are behind a proxy add the `-x proxyhost:port`)\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/cCRCz.png","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/64605901#64605901","title":"How to run jq from gitbash in windows?","body":"<p><strong>Easiest solution and always latest version:</strong></p>\n<hr />\n<p>run this curl in your gitbash:</p>\n<pre><code>curl -L -o /usr/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\n</code></pre>\n<p>or manually save the <code>jq-win64.exe</code> in link above as <code>jq.exe</code> to your <code>/usr/bin</code> (which is in your git bash installation folder)</p>\n<p>(if you are behind a proxy add the <code>-x proxyhost:port</code>)</p>\n<p><a href=\"https://i.stack.imgur.com/cCRCz.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/cCRCz.png\" alt=\"enter image description here\" /></a></p>\n"},{"owner":{"reputation":1405,"display_name":"devops-admin","link":"https://stackoverflow.com/users/14004008/devops-admin"},"is_accepted":false,"score":2,"creation_date":1639416714,"answer_id":70338666,"question_id":53967693,"share_link":"https://stackoverflow.com/a/70338666","body_markdown":"Below steps worked for me in git bash on windows 10\r\n\r\n```\r\ncurl -L -o jq-win64.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\r\n\r\nexport PATH=$PATH:&quot;/C/Users/devops/Downloads/jq-win64.exe\r\n\r\njq --version\r\n\r\njq-1.6\r\n\r\n```","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/70338666#70338666","title":"How to run jq from gitbash in windows?","body":"<p>Below steps worked for me in git bash on windows 10</p>\n<pre><code>curl -L -o jq-win64.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\n\nexport PATH=$PATH:&quot;/C/Users/devops/Downloads/jq-win64.exe\n\njq --version\n\njq-1.6\n\n</code></pre>\n"},{"owner":{"reputation":99,"display_name":"Kishore Uppala","link":"https://stackoverflow.com/users/13196830/kishore-uppala"},"is_accepted":false,"score":2,"creation_date":1657358011,"answer_id":72920207,"question_id":53967693,"share_link":"https://stackoverflow.com/a/72920207","body_markdown":"In my case, I have fixed it in Windows10 while practicing a scenario of &quot;Techworld with Nana&quot; course, as per the below steps:\r\n\r\n**1)** open &quot;cmd&quot; prompt (Run as administrator)\r\n\r\n**2)** `curl -L -o /usr/bin/jq-win64.exe`\r\n[Download it here][1]\r\n\r\n**3)** You can add `C:\\Program Files\\Git\\usr\\bin` path to your environment variables. *If you follow this step, ignore the below steps.*\r\n\r\n**[OR]**\r\n\r\n**3)** Go to the directory where jq is downloaded: `C:\\Program Files\\Git\\usr\\bin` and copy the file to `C:\\` drive\r\n\r\n**4)** Add the path `C:\\` to &quot;path&quot; environment variable. This `PC--&gt;Properties--&gt;Advanced` system `settings --&gt; Environment Variables --&gt;Edit--&gt;New`. Then add the path (where you copied jq.exe, i.e., C:\\) and Save it.\r\n\r\n**5)** Now open a new &quot;cmd&quot; prompt, jq --version\r\n\r\n\r\n  [1]: https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/72920207#72920207","title":"How to run jq from gitbash in windows?","body":"<p>In my case, I have fixed it in Windows10 while practicing a scenario of &quot;Techworld with Nana&quot; course, as per the below steps:</p>\n<p><strong>1)</strong> open &quot;cmd&quot; prompt (Run as administrator)</p>\n<p><strong>2)</strong> <code>curl -L -o /usr/bin/jq-win64.exe</code>\n<a href=\"https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe\" rel=\"nofollow noreferrer\">Download it here</a></p>\n<p><strong>3)</strong> You can add <code>C:\\Program Files\\Git\\usr\\bin</code> path to your environment variables. <em>If you follow this step, ignore the below steps.</em></p>\n<p><strong>[OR]</strong></p>\n<p><strong>3)</strong> Go to the directory where jq is downloaded: <code>C:\\Program Files\\Git\\usr\\bin</code> and copy the file to <code>C:\\</code> drive</p>\n<p><strong>4)</strong> Add the path <code>C:\\</code> to &quot;path&quot; environment variable. This <code>PC--&gt;Properties--&gt;Advanced</code> system <code>settings --&gt; Environment Variables --&gt;Edit--&gt;New</code>. Then add the path (where you copied jq.exe, i.e., C:) and Save it.</p>\n<p><strong>5)</strong> Now open a new &quot;cmd&quot; prompt, jq --version</p>\n"},{"owner":{"reputation":3954,"accept_rate":53,"display_name":"Christian Matthew","link":"https://stackoverflow.com/users/2084798/christian-matthew"},"is_accepted":false,"score":1,"creation_date":1662698173,"answer_id":73657377,"question_id":53967693,"share_link":"https://stackoverflow.com/a/73657377","body_markdown":"For windows Powershell &amp;&amp; cmd \r\n\r\n[Download executable][1] -&gt; jq 1+ executables for 64-bit\r\n\r\nCreate folder in Program Files -&gt; JQ\r\n\r\nCopy .exe into program folder\r\n\r\nSet environment variable to that folder\r\n\r\nRestart terminal \r\n\r\nSet alias \r\n\r\n     Set-Alias -Name jq -Value .\\jq-win64.exe\r\n\r\nRun command\r\n\r\n     echo &#39;{&quot;foo&quot;: 0}&#39; | jq \r\n\r\nOutput\r\n\r\n     {\r\n        &quot;foo&quot;: 0\r\n     }\r\n\r\nenjoy!\r\n\r\n  [1]: https://stedolan.github.io/jq/download/","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows/73657377#73657377","title":"How to run jq from gitbash in windows?","body":"<p>For windows Powershell &amp;&amp; cmd</p>\n<p><a href=\"https://stedolan.github.io/jq/download/\" rel=\"nofollow noreferrer\">Download executable</a> -&gt; jq 1+ executables for 64-bit</p>\n<p>Create folder in Program Files -&gt; JQ</p>\n<p>Copy .exe into program folder</p>\n<p>Set environment variable to that folder</p>\n<p>Restart terminal</p>\n<p>Set alias</p>\n<pre><code> Set-Alias -Name jq -Value .\\jq-win64.exe\n</code></pre>\n<p>Run command</p>\n<pre><code> echo '{&quot;foo&quot;: 0}' | jq \n</code></pre>\n<p>Output</p>\n<pre><code> {\n    &quot;foo&quot;: 0\n }\n</code></pre>\n<p>enjoy!</p>\n"}],"owner":{"reputation":1031,"display_name":"DotNetDeveloper","link":"https://stackoverflow.com/users/5782518/dotnetdeveloper"},"is_answered":true,"view_count":139598,"up_vote_count":103,"accepted_answer_id":53967916,"answer_count":8,"score":102,"last_activity_date":1680780092,"creation_date":1546069408,"last_edit_date":1546072163,"question_id":53967693,"body_markdown":"I have `gitbash` in Windows. I am trying to run `jq` but its giving me error.\r\n\r\n    $ ./jq-win64.exe \r\n    jq \r\n    parse error: Invalid numeric literal at line 2, column 0\r\n\r\n*Intention*: I want to use `jq` to parse json.\r\n\r\n","link":"https://stackoverflow.com/questions/53967693/how-to-run-jq-from-gitbash-in-windows","title":"How to run jq from gitbash in windows?","body":"<p>I have <code>gitbash</code> in Windows. I am trying to run <code>jq</code> but its giving me error.</p>\n\n<pre><code>$ ./jq-win64.exe \njq \nparse error: Invalid numeric literal at line 2, column 0\n</code></pre>\n\n<p><em>Intention</em>: I want to use <code>jq</code> to parse json.</p>\n"},{"tags":["json","jq"],"answers":[{"owner":{"reputation":151210,"accept_rate":100,"display_name":"hek2mgl","link":"https://stackoverflow.com/users/171318/hek2mgl"},"is_accepted":true,"score":172,"creation_date":1451555137,"answer_id":34544406,"question_id":34543829,"share_link":"https://stackoverflow.com/a/34544406","body_markdown":"It should be:\r\n\r\n    jq &#39;.[].aux[].def&#39; file.json\r\n\r\n`.[]` iterates over the outer array, `.aux[]` then iterates over the the `aux` array of every node and `.def` prints their `.def` property.\r\n\r\nThis will output:\r\n\r\n    &quot;I want this&quot;\r\n\r\nIf you want to get rid of the double quotes pass `-r` (`--raw`) to `jq`:\r\n\r\n    jq -r &#39;.[].aux[].def&#39; file.json\r\n\r\nOutput:\r\n\r\n    I want this","link":"https://stackoverflow.com/questions/34543829/jq-cannot-index-array-with-string/34544406#34544406","title":"jq: Cannot index array with string","body":"<p>It should be:</p>\n\n<pre><code>jq '.[].aux[].def' file.json\n</code></pre>\n\n<p><code>.[]</code> iterates over the outer array, <code>.aux[]</code> then iterates over the the <code>aux</code> array of every node and <code>.def</code> prints their <code>.def</code> property.</p>\n\n<p>This will output:</p>\n\n<pre><code>\"I want this\"\n</code></pre>\n\n<p>If you want to get rid of the double quotes pass <code>-r</code> (<code>--raw</code>) to <code>jq</code>:</p>\n\n<pre><code>jq -r '.[].aux[].def' file.json\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>I want this\n</code></pre>\n"}],"owner":{"reputation":10149,"accept_rate":81,"display_name":"Xu Wang","link":"https://stackoverflow.com/users/815646/xu-wang"},"is_answered":true,"view_count":150207,"up_vote_count":102,"accepted_answer_id":34544406,"answer_count":1,"score":101,"last_activity_date":1652840423,"creation_date":1451552544,"last_edit_date":1652840423,"question_id":34543829,"body_markdown":"I have the following in a file (which I will call &quot;myfile&quot;):\r\n\r\n    [{\r\n    \t&quot;id&quot;: 123,\r\n    \t&quot;name&quot;: &quot;John&quot;,\r\n    \t&quot;aux&quot;: [{\r\n    \t\t&quot;abc&quot;: &quot;random&quot;,\r\n    \t\t&quot;def&quot;: &quot;I want this&quot;\r\n    \t}],\r\n    \t&quot;blah&quot;: 23.11\r\n    }]\r\n\r\nI could parse it if the file did not have the first `[` and last `]` as follows:\r\n\r\n    $ cat myfile | jq -r &#39;.aux[] | .def&#39;\r\n    I want this\r\n    $\r\n\r\nbut with the `[` and `]` I get:\r\n\r\n    $ cat myfile | jq -r &#39;.aux[] | .def&#39;\r\n    jq: error: Cannot index array with string\r\n\r\nHow can I deal with the `[` and `]` using jq? (I&#39;m sure I could parse them off with a different tool but I want to learn correct usage of jq.","link":"https://stackoverflow.com/questions/34543829/jq-cannot-index-array-with-string","title":"jq: Cannot index array with string","body":"<p>I have the following in a file (which I will call &quot;myfile&quot;):</p>\n<pre><code>[{\n    &quot;id&quot;: 123,\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;aux&quot;: [{\n        &quot;abc&quot;: &quot;random&quot;,\n        &quot;def&quot;: &quot;I want this&quot;\n    }],\n    &quot;blah&quot;: 23.11\n}]\n</code></pre>\n<p>I could parse it if the file did not have the first <code>[</code> and last <code>]</code> as follows:</p>\n<pre><code>$ cat myfile | jq -r '.aux[] | .def'\nI want this\n$\n</code></pre>\n<p>but with the <code>[</code> and <code>]</code> I get:</p>\n<pre><code>$ cat myfile | jq -r '.aux[] | .def'\njq: error: Cannot index array with string\n</code></pre>\n<p>How can I deal with the <code>[</code> and <code>]</code> using jq? (I'm sure I could parse them off with a different tool but I want to learn correct usage of jq.</p>\n"}],"has_more":true,"quota_max":10000,"quota_remaining":9993,"page":1,"page_size":30,"total":6321}